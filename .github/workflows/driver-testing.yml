name: Driver Testing and Validation

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'src/drivers/**'
      - 'src/driver-sdk/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'src/drivers/**'
      - 'src/driver-sdk/**'
  schedule:
    # 每天凌晨2点运行完整测试
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - validation-only
          - performance-only
      driver_pattern:
        description: 'Driver pattern to test (optional)'
        required: false
        default: '**/*Driver.ts'

env:
  NODE_VERSION: '18'
  REPORT_RETENTION_DAYS: 30

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 驱动验证测试
  driver-validation:
    name: Driver Validation
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-group: [serial, network, multi, compatibility]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run driver validation tests
        run: |
          npm run test:drivers -- \
            --group=${{ matrix.test-group }} \
            --output-dir=./test-results/${{ matrix.test-group }} \
            --report-formats=json,html,xml
        env:
          TEST_MODE: ${{ github.event.inputs.test_mode || 'full' }}
          DRIVER_PATTERN: ${{ github.event.inputs.driver_pattern || '**/*Driver.ts' }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-group }}
          path: ./test-results/${{ matrix.test-group }}
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Driver Tests (${{ matrix.test-group }})
          path: './test-results/${{ matrix.test-group }}/test-results.xml'
          reporter: jest-junit
          fail-on-error: true

  # 性能基准测试
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'schedule' || github.event.inputs.test_mode == 'full' || github.event.inputs.test_mode == 'performance-only'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download previous benchmark data
        uses: actions/cache@v3
        with:
          path: ./benchmark-data
          key: benchmark-data-${{ runner.os }}

      - name: Run performance benchmarks
        run: |
          npm run benchmark:drivers -- \
            --baseline=./benchmark-data/baseline.json \
            --output=./benchmark-results \
            --compare-with-baseline

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'customSmallerIsBetter'
          output-file-path: ./benchmark-results/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: '200%'
          comment-on-alert: true
          fail-on-alert: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: ./benchmark-results
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # 兼容性测试
  compatibility-test:
    name: Compatibility Test
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['16', '18', '20']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run compatibility tests
        run: npm run test:compatibility
        env:
          OS: ${{ matrix.os }}
          NODE_VERSION: ${{ matrix.node-version }}

  # 聚合测试结果
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [driver-validation, performance-benchmark, compatibility-test]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./all-test-results

      - name: Generate summary report
        run: |
          npm run test:summary -- \
            --input-dir=./all-test-results \
            --output-dir=./summary-report \
            --include-recommendations

      - name: Upload summary report
        uses: actions/upload-artifact@v3
        with:
          name: test-summary-report
          path: ./summary-report
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './summary-report/summary.md';
            
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🧪 驱动测试结果\n\n${summary}`
              });
            }

      - name: Update README badge
        if: github.ref == 'refs/heads/main'
        run: |
          # 更新README中的测试状态徽章
          npm run update-badges -- --test-results=./summary-report/summary.json

  # 发布测试报告到GitHub Pages
  publish-reports:
    name: Publish Test Reports
    runs-on: ubuntu-latest
    needs: test-summary
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download summary report
        uses: actions/download-artifact@v3
        with:
          name: test-summary-report
          path: ./docs/test-reports

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # 质量门控检查
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [driver-validation, performance-benchmark, compatibility-test]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./all-test-results

      - name: Check quality gates
        run: |
          npm run quality-gate -- \
            --input-dir=./all-test-results \
            --min-validation-score=70 \
            --min-functional-coverage=80 \
            --max-performance-regression=20 \
            --required-grade=B
        env:
          FAIL_ON_QUALITY_GATE: ${{ github.event_name == 'pull_request' }}

      - name: Set job status
        if: failure()
        run: |
          echo "Quality gate failed! Please check the test results and fix the issues."
          exit 1

  # Slack通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify Slack on success
        if: needs.quality-gate.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#driver-testing'
          text: |
            ✅ 驱动测试全部通过！
            
            • 测试分支: ${{ github.ref_name }}
            • 提交: ${{ github.sha }}
            • 触发者: ${{ github.actor }}
            
            查看详细报告: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.quality-gate.result != 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#driver-testing'
          text: |
            ❌ 驱动测试失败！
            
            • 测试分支: ${{ github.ref_name }}
            • 提交: ${{ github.sha }}
            • 触发者: ${{ github.actor }}
            
            请检查并修复问题: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}