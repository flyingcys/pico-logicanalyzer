{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/services/WorkspaceManager.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/services/WorkspaceManager.ts"],"sourcesContent":["/**\r\n * 工作区集成和项目管理服务\r\n * 负责VSCode工作区集成、项目结构管理、文件组织、协作功能等\r\n * 提供完整的项目生命周期管理能力\r\n */\r\nimport * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs/promises';\r\nimport { EventEmitter } from 'events';\r\nimport { ServiceLifecycleBase, ServiceInitOptions, ServiceDisposeOptions } from '../common/ServiceLifecycle';\r\nimport { SessionData, sessionManager } from './SessionManager';\r\nimport { configurationManager } from './ConfigurationManager';\r\n\r\n// 项目配置\r\nexport interface ProjectConfiguration {\r\n  name: string;\r\n  version: string;\r\n  description?: string;\r\n  author?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n\r\n  // 项目结构\r\n  structure: {\r\n    sessionsDir: string;    // 会话文件目录\r\n    dataDir: string;        // 原始数据目录\r\n    analysisDir: string;    // 分析结果目录\r\n    reportsDir: string;     // 报告目录\r\n    configDir: string;      // 配置目录\r\n    tempDir: string;        // 临时文件目录\r\n  };\r\n\r\n  // 项目设置\r\n  settings: {\r\n    defaultSampleRate: number;\r\n    defaultChannelCount: number;\r\n    autoBackup: boolean;\r\n    compressionEnabled: boolean;\r\n    collaborationEnabled: boolean;\r\n  };\r\n\r\n  // 协作配置\r\n  collaboration?: {\r\n    repositoryUrl?: string;\r\n    branches: string[];\r\n    contributors: Contributor[];\r\n    permissions: ProjectPermissions;\r\n  };\r\n\r\n  // 元数据\r\n  metadata: {\r\n    totalSessions: number;\r\n    totalDataSize: number;  // 字节\r\n    lastBackup?: string;\r\n    tags: string[];\r\n  };\r\n}\r\n\r\nexport interface Contributor {\r\n  name: string;\r\n  email: string;\r\n  role: 'owner' | 'maintainer' | 'contributor' | 'viewer';\r\n  joinedAt: string;\r\n  lastActive: string;\r\n}\r\n\r\nexport interface ProjectPermissions {\r\n  read: string[];         // 用户ID列表\r\n  write: string[];\r\n  admin: string[];\r\n  public: boolean;\r\n}\r\n\r\n// 文件类型\r\nexport enum FileType {\r\n  Session = 'session',       // 会话文件 (.lacsession)\r\n  Data = 'data',            // 原始数据文件 (.lac, .csv等)\r\n  Analysis = 'analysis',     // 分析结果文件\r\n  Report = 'report',        // 报告文件 (.html, .pdf等)\r\n  Config = 'config',        // 配置文件\r\n  Template = 'template',    // 模板文件\r\n  Script = 'script'         // 脚本文件\r\n}\r\n\r\n// 项目文件信息\r\nexport interface ProjectFile {\r\n  id: string;\r\n  name: string;\r\n  path: string;\r\n  type: FileType;\r\n  size: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  description?: string;\r\n  tags: string[];\r\n  metadata?: {\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\n// 项目模板\r\nexport interface ProjectTemplate {\r\n  name: string;\r\n  displayName: string;\r\n  description: string;\r\n  icon: string;\r\n  structure: string[];      // 需要创建的目录结构\r\n  files: {                  // 需要创建的模板文件\r\n    path: string;\r\n    content: string;\r\n  }[];\r\n  settings: Partial<ProjectConfiguration['settings']>;\r\n}\r\n\r\n// 备份配置\r\nexport interface BackupConfiguration {\r\n  enabled: boolean;\r\n  interval: number;         // 小时\r\n  maxBackups: number;\r\n  includeData: boolean;\r\n  compression: boolean;\r\n  remoteLocation?: string;\r\n}\r\n\r\n// 项目创建选项\r\nexport interface ProjectCreationOptions {\r\n  name: string;\r\n  location: string;\r\n  template?: string;\r\n  initializeGit?: boolean;\r\n  createSampleData?: boolean;\r\n  description?: string;\r\n  author?: string;\r\n}\r\n\r\nexport class WorkspaceManager extends ServiceLifecycleBase {\r\n  private eventEmitter = new EventEmitter();\r\n  private readonly PROJECT_CONFIG_FILE = 'logicanalyzer-project.json';\r\n  private readonly PROJECT_LOCK_FILE = '.logicanalyzer.lock';\r\n  private readonly BACKUP_DIR = '.backups';\r\n\r\n  private currentProject?: ProjectConfiguration;\r\n  private projectRoot?: string;\r\n  private fileWatchers: Map<string, vscode.FileSystemWatcher> = new Map();\r\n  private backupTimer?: NodeJS.Timeout;\r\n\r\n  constructor() {\r\n    super('WorkspaceManager');\r\n    this.setupWorkspaceWatchers();\r\n    this.initializeCurrentProject();\r\n  }\r\n\r\n  /**\r\n   * 实现父类的初始化方法\r\n   */\r\n  protected async onInitialize(options: ServiceInitOptions): Promise<void> {\r\n    // WorkspaceManager 在构造时已经完成初始化\r\n    // 这里可以添加额外的初始化逻辑\r\n    this.updateMetadata({\r\n      hasCurrentProject: !!this.currentProject,\r\n      projectRoot: this.projectRoot,\r\n      fileWatchersCount: this.fileWatchers.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 实现父类的销毁方法\r\n   */\r\n  protected async onDispose(options: ServiceDisposeOptions): Promise<void> {\r\n    // 清理文件监听器\r\n    for (const watcher of this.fileWatchers.values()) {\r\n      watcher.dispose();\r\n    }\r\n    this.fileWatchers.clear();\r\n\r\n    // 清理备份定时器\r\n    if (this.backupTimer) {\r\n      clearTimeout(this.backupTimer);\r\n      this.backupTimer = undefined;\r\n    }\r\n\r\n    // 清理事件监听器\r\n    this.eventEmitter.removeAllListeners();\r\n\r\n    // 清理项目状态\r\n    this.currentProject = undefined;\r\n    this.projectRoot = undefined;\r\n  }\r\n\r\n  // EventEmitter 代理方法\r\n  on(event: string | symbol, listener: (...args: any[]) => void): this {\r\n    this.eventEmitter.on(event, listener);\r\n    return this;\r\n  }\r\n\r\n  emit(event: string | symbol, ...args: any[]): boolean {\r\n    return this.eventEmitter.emit(event, ...args);\r\n  }\r\n\r\n  off(event: string | symbol, listener: (...args: any[]) => void): this {\r\n    this.eventEmitter.off(event, listener);\r\n    return this;\r\n  }\r\n\r\n  removeAllListeners(event?: string | symbol): this {\r\n    this.eventEmitter.removeAllListeners(event);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 创建新工作区\r\n   */\r\n  async createWorkspace(workspaceDir: string, config: {\r\n    name: string;\r\n    description?: string;\r\n    settings?: any;\r\n  }): Promise<string> {\r\n    const workspaceId = `workspace-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n    // 创建工作区目录结构\r\n    await fs.mkdir(workspaceDir, { recursive: true });\r\n    await fs.mkdir(path.join(workspaceDir, 'sessions'), { recursive: true });\r\n    await fs.mkdir(path.join(workspaceDir, 'data'), { recursive: true });\r\n    await fs.mkdir(path.join(workspaceDir, 'exports'), { recursive: true });\r\n\r\n    // 创建项目配置\r\n    const projectConfig: ProjectConfiguration = {\r\n      name: config.name,\r\n      version: '1.0.0',\r\n      description: config.description,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      structure: {\r\n        sessionsDir: 'sessions',\r\n        dataDir: 'data',\r\n        analysisDir: 'analysis',\r\n        reportsDir: 'reports',\r\n        configDir: 'config',\r\n        tempDir: 'temp'\r\n      },\r\n      settings: {\r\n        defaultSampleRate: 24000000,\r\n        defaultChannelCount: 16,\r\n        autoBackup: true,\r\n        compressionEnabled: true,\r\n        collaborationEnabled: false,\r\n        ...config.settings\r\n      },\r\n      metadata: {\r\n        totalSessions: 0,\r\n        totalDataSize: 0,\r\n        tags: []\r\n      }\r\n    };\r\n\r\n    // 保存项目配置\r\n    const configPath = path.join(workspaceDir, this.PROJECT_CONFIG_FILE);\r\n    await fs.writeFile(configPath, JSON.stringify(projectConfig, null, 2));\r\n\r\n    this.currentProject = projectConfig;\r\n    this.projectRoot = workspaceDir;\r\n\r\n    return workspaceId;\r\n  }\r\n\r\n  /**\r\n   * 获取工作区信息\r\n   */\r\n  async getWorkspaceInfo(workspaceId: string): Promise<ProjectConfiguration | undefined> {\r\n    return this.currentProject;\r\n  }\r\n\r\n  /**\r\n   * 获取工作区会话列表\r\n   */\r\n  async getSessions(workspaceId: string): Promise<SessionData[]> {\r\n    // 在实际实现中，这里应该从工作区的会话目录中加载\r\n    // 目前返回模拟数据\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * 添加会话到工作区\r\n   */\r\n  async addSession(workspaceId: string, sessionId: string): Promise<void> {\r\n    // 在实际实现中，这里应该更新工作区配置\r\n    if (this.currentProject) {\r\n      this.currentProject.metadata.totalSessions += 1;\r\n      this.currentProject.updatedAt = new Date().toISOString();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 保存工作区\r\n   */\r\n  async saveWorkspace(workspaceId: string): Promise<void> {\r\n    if (this.currentProject && this.projectRoot) {\r\n      const configPath = path.join(this.projectRoot, this.PROJECT_CONFIG_FILE);\r\n      await fs.writeFile(configPath, JSON.stringify(this.currentProject, null, 2));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载工作区\r\n   */\r\n  async loadWorkspace(workspaceId: string): Promise<{ sessions: SessionData[] }> {\r\n    // 模拟加载工作区数据\r\n    return {\r\n      sessions: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 迁移工作区\r\n   */\r\n  async migrateWorkspace(legacyConfigPath: string): Promise<string> {\r\n    // 读取旧配置\r\n    const legacyData = JSON.parse(await fs.readFile(legacyConfigPath, 'utf-8'));\r\n\r\n    // 生成新的工作区ID\r\n    const workspaceId = `migrated-workspace-${Date.now()}`;\r\n\r\n    // 创建新的配置格式\r\n    const migratedConfig: ProjectConfiguration = {\r\n      name: legacyData.name || 'Migrated Workspace',\r\n      version: '2.0.0', // 升级版本\r\n      description: 'Migrated from legacy format',\r\n      createdAt: legacyData.createdAt || new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      structure: {\r\n        sessionsDir: 'sessions',\r\n        dataDir: 'data',\r\n        analysisDir: 'analysis',\r\n        reportsDir: 'reports',\r\n        configDir: 'config',\r\n        tempDir: 'temp'\r\n      },\r\n      settings: {\r\n        defaultSampleRate: 24000000,\r\n        defaultChannelCount: 16,\r\n        autoBackup: true,\r\n        compressionEnabled: true,\r\n        collaborationEnabled: false\r\n      },\r\n      metadata: {\r\n        totalSessions: legacyData.sessions?.length || 0,\r\n        totalDataSize: 0,\r\n        tags: []\r\n      }\r\n    };\r\n\r\n    this.currentProject = migratedConfig;\r\n\r\n    return workspaceId;\r\n  }\r\n\r\n  /**\r\n   * 创建新项目（支持两种调用方式）\r\n   */\r\n  async createProject(options: ProjectCreationOptions): Promise<void>;\r\n  async createProject(\r\n    projectPath: string,\r\n    config: Partial<ProjectConfiguration>,\r\n    template?: string\r\n  ): Promise<void>;\r\n  async createProject(\r\n    optionsOrPath: ProjectCreationOptions | string,\r\n    config?: Partial<ProjectConfiguration>,\r\n    template?: string\r\n  ): Promise<void> {\r\n    // 如果第一个参数是对象，使用新的接口\r\n    if (typeof optionsOrPath === 'object') {\r\n      const options = optionsOrPath as ProjectCreationOptions;\r\n      return this.createProjectFromOptions(options);\r\n    }\r\n\r\n    // 否则使用原来的接口\r\n    return this.createProjectFromParameters(optionsOrPath, config!, template);\r\n  }\r\n\r\n  /**\r\n   * 从选项创建项目\r\n   */\r\n  private async createProjectFromOptions(options: ProjectCreationOptions): Promise<void> {\r\n    const config: Partial<ProjectConfiguration> = {\r\n      name: options.name,\r\n      description: options.description,\r\n      author: options.author\r\n    };\r\n    return this.createProjectFromParameters(options.location, config, options.template);\r\n  }\r\n\r\n  /**\r\n   * 从参数创建项目（原始实现）\r\n   */\r\n  private async createProjectFromParameters(\r\n    projectPath: string,\r\n    config: Partial<ProjectConfiguration>,\r\n    template?: string\r\n  ): Promise<void> {\r\n    try {\r\n      const projectName = config.name || path.basename(projectPath);\r\n\r\n      // 创建项目根目录\r\n      await fs.mkdir(projectPath, { recursive: true });\r\n\r\n      // 应用项目模板\r\n      if (template) {\r\n        await this.applyProjectTemplate(projectPath, template);\r\n      }\r\n\r\n      // 创建项目配置\r\n      const projectConfig: ProjectConfiguration = {\r\n        name: projectName,\r\n        version: '1.0.0',\r\n        description: config.description || `Logic Analyzer Project: ${projectName}`,\r\n        author: config.author || process.env.USERNAME || process.env.USER || 'Unknown',\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n\r\n        structure: {\r\n          sessionsDir: 'sessions',\r\n          dataDir: 'data',\r\n          analysisDir: 'analysis',\r\n          reportsDir: 'reports',\r\n          configDir: 'config',\r\n          tempDir: 'temp'\r\n        },\r\n\r\n        settings: {\r\n          defaultSampleRate: 1000000,\r\n          defaultChannelCount: 8,\r\n          autoBackup: true,\r\n          compressionEnabled: true,\r\n          collaborationEnabled: false,\r\n          ...config.settings\r\n        },\r\n\r\n        metadata: {\r\n          totalSessions: 0,\r\n          totalDataSize: 0,\r\n          tags: config.metadata?.tags || []\r\n        }\r\n      };\r\n\r\n      // 创建目录结构\r\n      await this.createProjectStructure(projectPath, projectConfig);\r\n\r\n      // 保存项目配置\r\n      await this.saveProjectConfiguration(projectPath, projectConfig);\r\n\r\n      // 创建项目锁文件\r\n      await this.createProjectLock(projectPath);\r\n\r\n      // 在VSCode中打开项目\r\n      const uri = vscode.Uri.file(projectPath);\r\n      await vscode.commands.executeCommand('vscode.openFolder', uri);\r\n\r\n      this.emit('projectCreated', projectConfig);\r\n\r\n      vscode.window.showInformationMessage(`项目 \"${projectName}\" 创建成功`);\r\n\r\n    } catch (error) {\r\n      throw new Error(`创建项目失败: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 打开现有项目\r\n   */\r\n  async openProject(projectPath: string): Promise<void> {\r\n    try {\r\n      // 检查项目配置文件\r\n      const configPath = path.join(projectPath, this.PROJECT_CONFIG_FILE);\r\n      if (!await this.fileExists(configPath)) {\r\n        throw new Error('不是有效的Logic Analyzer项目目录');\r\n      }\r\n\r\n      // 加载项目配置\r\n      const projectConfig = await this.loadProjectConfiguration(projectPath);\r\n\r\n      // 验证项目结构\r\n      await this.validateProjectStructure(projectPath, projectConfig);\r\n\r\n      // 设置当前项目\r\n      this.currentProject = projectConfig;\r\n      this.projectRoot = projectPath;\r\n\r\n      // 启动文件监听\r\n      this.setupFileWatchers(projectPath);\r\n\r\n      // 启动自动备份\r\n      if (projectConfig.settings.autoBackup) {\r\n        this.startAutoBackup();\r\n      }\r\n\r\n      this.emit('projectOpened', projectConfig);\r\n\r\n    } catch (error) {\r\n      throw new Error(`打开项目失败: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 关闭当前项目\r\n   */\r\n  async closeProject(): Promise<void> {\r\n    if (!this.currentProject) return;\r\n\r\n    try {\r\n      // 停止文件监听\r\n      this.stopFileWatchers();\r\n\r\n      // 停止自动备份\r\n      this.stopAutoBackup();\r\n\r\n      // 清理临时文件\r\n      if (this.projectRoot) {\r\n        await this.cleanupTempFiles();\r\n      }\r\n\r\n      // 移除项目锁文件\r\n      if (this.projectRoot) {\r\n        await this.removeProjectLock(this.projectRoot);\r\n      }\r\n\r\n      this.emit('projectClosed', this.currentProject);\r\n\r\n      this.currentProject = undefined;\r\n      this.projectRoot = undefined;\r\n\r\n    } catch (error) {\r\n      console.error('关闭项目时出错:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前项目\r\n   */\r\n  getCurrentProject(): ProjectConfiguration | null {\r\n    return this.currentProject || null;\r\n  }\r\n\r\n  /**\r\n   * 检查是否有活动项目\r\n   */\r\n  hasActiveProject(): boolean {\r\n    return !!this.currentProject;\r\n  }\r\n\r\n  /**\r\n   * 获取项目信息\r\n   */\r\n  getProjectInfo(): ProjectConfiguration | null {\r\n    return this.getCurrentProject();\r\n  }\r\n\r\n  /**\r\n   * 更新项目配置\r\n   */\r\n  async updateProject(updates: Partial<ProjectConfiguration>): Promise<void> {\r\n    if (!this.currentProject || !this.projectRoot) {\r\n      throw new Error('没有打开的项目');\r\n    }\r\n\r\n    this.currentProject = {\r\n      ...this.currentProject,\r\n      ...updates,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    await this.saveProjectConfiguration(this.projectRoot, this.currentProject);\r\n\r\n    this.emit('projectUpdated', this.currentProject);\r\n  }\r\n\r\n  /**\r\n   * 获取项目文件列表\r\n   */\r\n  async getProjectFiles(type?: FileType): Promise<ProjectFile[]> {\r\n    if (!this.projectRoot) {\r\n      throw new Error('没有打开的项目');\r\n    }\r\n\r\n    const files: ProjectFile[] = [];\r\n    const directories = type ? [this.getDirectoryForFileType(type)] :\r\n      Object.values(this.currentProject!.structure);\r\n\r\n    for (const dir of directories) {\r\n      const dirPath = path.join(this.projectRoot, dir);\r\n      if (await this.fileExists(dirPath)) {\r\n        const dirFiles = await this.scanDirectory(dirPath, type);\r\n        files.push(...dirFiles);\r\n      }\r\n    }\r\n\r\n    return files.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\r\n  }\r\n\r\n  /**\r\n   * 添加文件到项目\r\n   */\r\n  async addFileToProject(\r\n    filePath: string,\r\n    type: FileType,\r\n    targetPath?: string,\r\n    metadata?: any\r\n  ): Promise<string> {\r\n    if (!this.projectRoot) {\r\n      throw new Error('没有打开的项目');\r\n    }\r\n\r\n    let finalTargetPath: string;\r\n    if (targetPath) {\r\n      // 如果指定了目标路径，使用它\r\n      finalTargetPath = path.join(this.projectRoot, targetPath);\r\n    } else {\r\n      // 否则，使用默认目录\r\n      const targetDir = path.join(this.projectRoot, this.getDirectoryForFileType(type));\r\n      await fs.mkdir(targetDir, { recursive: true });\r\n      const fileName = path.basename(filePath);\r\n      finalTargetPath = path.join(targetDir, fileName);\r\n    }\r\n\r\n    // 确保目标目录存在\r\n    await fs.mkdir(path.dirname(finalTargetPath), { recursive: true });\r\n\r\n    // 复制文件\r\n    await fs.copyFile(filePath, finalTargetPath);\r\n\r\n    // 创建文件信息\r\n    const stats = await fs.stat(finalTargetPath);\r\n    const fileId = this.generateFileId();\r\n    const projectFile: ProjectFile = {\r\n      id: fileId,\r\n      name: path.basename(finalTargetPath),\r\n      path: path.relative(this.projectRoot, finalTargetPath),\r\n      type,\r\n      size: stats.size,\r\n      createdAt: stats.birthtime.toISOString(),\r\n      updatedAt: stats.mtime.toISOString(),\r\n      tags: [],\r\n      metadata\r\n    };\r\n\r\n    this.emit('fileAdded', projectFile);\r\n\r\n    return fileId;\r\n  }\r\n\r\n  /**\r\n   * 删除项目文件\r\n   */\r\n  async removeFileFromProject(fileId: string): Promise<void> {\r\n    if (!this.projectRoot) {\r\n      throw new Error('没有打开的项目');\r\n    }\r\n\r\n    const files = await this.getProjectFiles();\r\n    const file = files.find(f => f.id === fileId);\r\n\r\n    if (!file) {\r\n      throw new Error('文件不存在');\r\n    }\r\n\r\n    const fullPath = path.join(this.projectRoot, file.path);\r\n    await fs.rm(fullPath, { force: true });\r\n\r\n    this.emit('fileRemoved', file);\r\n  }\r\n\r\n  /**\r\n   * 创建项目备份\r\n   */\r\n  async createBackup(includeData: boolean = true): Promise<string> {\r\n    if (!this.projectRoot || !this.currentProject) {\r\n      throw new Error('没有打开的项目');\r\n    }\r\n\r\n    const backupName = `backup_${this.currentProject.name}_${new Date().toISOString().slice(0, 19).replace(/[:-]/g, '')}`;\r\n    const backupDir = path.join(this.projectRoot, this.BACKUP_DIR);\r\n    const backupPath = path.join(backupDir, `${backupName}.zip`);\r\n\r\n    await fs.mkdir(backupDir, { recursive: true });\r\n\r\n    // 简化的备份实现 - 实际应使用压缩库\r\n    const backupData = {\r\n      project: this.currentProject,\r\n      timestamp: new Date().toISOString(),\r\n      includeData,\r\n      files: await this.getProjectFiles()\r\n    };\r\n\r\n    await fs.writeFile(\r\n      path.join(backupDir, `${backupName}.json`),\r\n      JSON.stringify(backupData, null, 2)\r\n    );\r\n\r\n    // 更新项目元数据\r\n    await this.updateProject({\r\n      metadata: {\r\n        ...this.currentProject.metadata,\r\n        lastBackup: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n    this.emit('backupCreated', backupPath);\r\n\r\n    return backupPath;\r\n  }\r\n\r\n  /**\r\n   * 恢复项目备份\r\n   */\r\n  async restoreBackup(backupPath: string): Promise<void> {\r\n    if (!this.projectRoot) {\r\n      throw new Error('没有打开的项目');\r\n    }\r\n\r\n    try {\r\n      // 检查备份文件是否存在\r\n      await fs.access(backupPath);\r\n\r\n      // 简化的恢复实现\r\n      const backupData = JSON.parse(await fs.readFile(backupPath, 'utf8'));\r\n\r\n      if (backupData.project) {\r\n        await this.updateProject(backupData.project);\r\n      }\r\n\r\n      this.emit('backupRestored', backupPath);\r\n\r\n      vscode.window.showInformationMessage('项目备份恢复成功');\r\n\r\n    } catch (error: any) {\r\n      if (error.code === 'ENOENT') {\r\n        throw new Error('备份文件不存在');\r\n      }\r\n      throw new Error(`恢复备份失败: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取项目模板\r\n   */\r\n  getProjectTemplates(): ProjectTemplate[] {\r\n    return [\r\n      {\r\n        name: 'basic',\r\n        displayName: '基础项目',\r\n        description: '标准的逻辑分析器项目结构',\r\n        icon: 'folder',\r\n        structure: ['sessions', 'data', 'analysis', 'reports', 'config'],\r\n        files: [\r\n          {\r\n            path: 'README.md',\r\n            content: this.getReadmeTemplate()\r\n          },\r\n          {\r\n            path: '.gitignore',\r\n            content: this.getGitignoreTemplate()\r\n          }\r\n        ],\r\n        settings: {\r\n          defaultSampleRate: 1000000,\r\n          defaultChannelCount: 8,\r\n          autoBackup: true,\r\n          compressionEnabled: true\r\n        }\r\n      },\r\n      {\r\n        name: 'protocol-analysis',\r\n        displayName: '协议分析项目',\r\n        description: '专门用于协议分析的项目结构',\r\n        icon: 'symbol-interface',\r\n        structure: ['sessions', 'data', 'analysis', 'reports', 'config', 'protocols', 'decoders'],\r\n        files: [\r\n          {\r\n            path: 'README.md',\r\n            content: this.getProtocolAnalysisReadmeTemplate()\r\n          },\r\n          {\r\n            path: 'protocols/README.md',\r\n            content: '# 协议定义\\n\\n这个目录包含自定义协议定义文件。'\r\n          }\r\n        ],\r\n        settings: {\r\n          defaultSampleRate: 10000000,\r\n          defaultChannelCount: 16,\r\n          autoBackup: true,\r\n          compressionEnabled: true\r\n        }\r\n      },\r\n      {\r\n        name: 'team-collaboration',\r\n        displayName: '团队协作项目',\r\n        description: '支持团队协作的项目结构',\r\n        icon: 'organization',\r\n        structure: ['sessions', 'data', 'analysis', 'reports', 'config', 'shared', 'docs'],\r\n        files: [\r\n          {\r\n            path: 'README.md',\r\n            content: this.getCollaborationReadmeTemplate()\r\n          },\r\n          {\r\n            path: 'docs/CONTRIBUTING.md',\r\n            content: '# 贡献指南\\n\\n如何为这个项目做贡献的说明。'\r\n          }\r\n        ],\r\n        settings: {\r\n          defaultSampleRate: 1000000,\r\n          defaultChannelCount: 8,\r\n          autoBackup: true,\r\n          compressionEnabled: true,\r\n          collaborationEnabled: true\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * 获取项目统计信息\r\n   */\r\n  async getProjectStatistics(): Promise<{\r\n    fileCount: number;\r\n    totalSize: number;\r\n    sessionCount: number;\r\n    lastActivity: string;\r\n    storageUsage: { [type: string]: number };\r\n  }> {\r\n    if (!this.projectRoot) {\r\n      throw new Error('没有打开的项目');\r\n    }\r\n\r\n    const files = await this.getProjectFiles();\r\n    const sessionFiles = files.filter(f => f.type === FileType.Session);\r\n\r\n    const storageUsage: { [type: string]: number } = {};\r\n    let totalSize = 0;\r\n\r\n    for (const file of files) {\r\n      totalSize += file.size;\r\n      storageUsage[file.type] = (storageUsage[file.type] || 0) + file.size;\r\n    }\r\n\r\n    const lastActivity = files.length > 0 ?\r\n      Math.max(...files.map(f => new Date(f.updatedAt).getTime())) :\r\n      new Date().getTime();\r\n\r\n    return {\r\n      fileCount: files.length,\r\n      totalSize,\r\n      sessionCount: sessionFiles.length,\r\n      lastActivity: new Date(lastActivity).toISOString(),\r\n      storageUsage\r\n    };\r\n  }\r\n\r\n  // 私有方法\r\n\r\n  /**\r\n   * 设置工作区监听器\r\n   */\r\n  private setupWorkspaceWatchers(): void {\r\n    // 监听工作区变化\r\n    vscode.workspace.onDidChangeWorkspaceFolders(event => {\r\n      if (event.added.length > 0) {\r\n        this.initializeCurrentProject();\r\n      }\r\n      if (event.removed.length > 0) {\r\n        this.closeProject();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 初始化当前项目\r\n   */\r\n  private async initializeCurrentProject(): Promise<void> {\r\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\r\n    if (!workspaceFolder) return;\r\n\r\n    const configPath = path.join(workspaceFolder.uri.fsPath, this.PROJECT_CONFIG_FILE);\r\n    if (await this.fileExists(configPath)) {\r\n      try {\r\n        await this.openProject(workspaceFolder.uri.fsPath);\r\n      } catch (error) {\r\n        console.error('初始化项目失败:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用项目模板\r\n   */\r\n  private async applyProjectTemplate(projectPath: string, templateName: string): Promise<void> {\r\n    const template = this.getProjectTemplates().find(t => t.name === templateName);\r\n    if (!template) return;\r\n\r\n    // 创建目录结构\r\n    for (const dir of template.structure) {\r\n      await fs.mkdir(path.join(projectPath, dir), { recursive: true });\r\n    }\r\n\r\n    // 创建模板文件\r\n    for (const file of template.files) {\r\n      const filePath = path.join(projectPath, file.path);\r\n      const fileDir = path.dirname(filePath);\r\n      await fs.mkdir(fileDir, { recursive: true });\r\n      await fs.writeFile(filePath, file.content, 'utf8');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建项目结构\r\n   */\r\n  private async createProjectStructure(\r\n    projectPath: string,\r\n    config: ProjectConfiguration\r\n  ): Promise<void> {\r\n    for (const dir of Object.values(config.structure)) {\r\n      await fs.mkdir(path.join(projectPath, dir), { recursive: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 保存项目配置\r\n   */\r\n  private async saveProjectConfiguration(\r\n    projectPath: string,\r\n    config: ProjectConfiguration\r\n  ): Promise<void> {\r\n    const configPath = path.join(projectPath, this.PROJECT_CONFIG_FILE);\r\n    await fs.writeFile(configPath, JSON.stringify(config, null, 2), 'utf8');\r\n  }\r\n\r\n  /**\r\n   * 加载项目配置\r\n   */\r\n  private async loadProjectConfiguration(projectPath: string): Promise<ProjectConfiguration> {\r\n    const configPath = path.join(projectPath, this.PROJECT_CONFIG_FILE);\r\n    const content = await fs.readFile(configPath, 'utf8');\r\n    return JSON.parse(content);\r\n  }\r\n\r\n  /**\r\n   * 验证项目结构\r\n   */\r\n  private async validateProjectStructure(\r\n    projectPath: string,\r\n    config: ProjectConfiguration\r\n  ): Promise<void> {\r\n    for (const [key, dir] of Object.entries(config.structure)) {\r\n      const dirPath = path.join(projectPath, dir);\r\n      if (!await this.fileExists(dirPath)) {\r\n        await fs.mkdir(dirPath, { recursive: true });\r\n        console.warn(`重新创建缺失的目录: ${dir}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置文件监听器\r\n   */\r\n  private setupFileWatchers(projectPath: string): void {\r\n    this.stopFileWatchers(); // 清理旧的监听器\r\n\r\n    const patterns = [\r\n      path.join(projectPath, '**/*.lacsession'),\r\n      path.join(projectPath, '**/*.lac'),\r\n      path.join(projectPath, this.PROJECT_CONFIG_FILE)\r\n    ];\r\n\r\n    for (const pattern of patterns) {\r\n      const watcher = vscode.workspace.createFileSystemWatcher(pattern);\r\n\r\n      watcher.onDidCreate(uri => this.emit('fileCreated', uri.fsPath));\r\n      watcher.onDidChange(uri => this.emit('fileChanged', uri.fsPath));\r\n      watcher.onDidDelete(uri => this.emit('fileDeleted', uri.fsPath));\r\n\r\n      this.fileWatchers.set(pattern, watcher);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 停止文件监听器\r\n   */\r\n  private stopFileWatchers(): void {\r\n    for (const watcher of this.fileWatchers.values()) {\r\n      watcher.dispose();\r\n    }\r\n    this.fileWatchers.clear();\r\n  }\r\n\r\n  /**\r\n   * 启动自动备份\r\n   */\r\n  private startAutoBackup(): void {\r\n    this.stopAutoBackup();\r\n\r\n    // 每24小时自动备份一次\r\n    this.backupTimer = setInterval(async () => {\r\n      try {\r\n        await this.createBackup(false); // 不包含大数据文件\r\n      } catch (error) {\r\n        console.error('自动备份失败:', error);\r\n      }\r\n    }, 24 * 60 * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * 停止自动备份\r\n   */\r\n  private stopAutoBackup(): void {\r\n    if (this.backupTimer) {\r\n      clearInterval(this.backupTimer);\r\n      this.backupTimer = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理临时文件\r\n   */\r\n  private async cleanupTempFiles(): Promise<void> {\r\n    if (!this.projectRoot || !this.currentProject) return;\r\n\r\n    const tempDir = path.join(this.projectRoot, this.currentProject.structure.tempDir);\r\n    if (await this.fileExists(tempDir)) {\r\n      const files = await fs.readdir(tempDir);\r\n      for (const file of files) {\r\n        try {\r\n          await fs.unlink(path.join(tempDir, file));\r\n        } catch (error) {\r\n          // 忽略删除失败，继续清理其他文件\r\n          console.warn(`删除临时文件失败: ${file}`, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 扫描目录获取文件列表\r\n   */\r\n  private async scanDirectory(dirPath: string, type?: FileType): Promise<ProjectFile[]> {\r\n    const files: ProjectFile[] = [];\r\n\r\n    try {\r\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\r\n\r\n      for (const entry of entries) {\r\n        if (entry.isFile()) {\r\n          const filePath = path.join(dirPath, entry.name);\r\n          const stats = await fs.stat(filePath);\r\n          const fileType = this.detectFileType(entry.name);\r\n\r\n          if (!type || fileType === type) {\r\n            files.push({\r\n              id: this.generateFileId(),\r\n              name: entry.name,\r\n              path: path.relative(this.projectRoot!, filePath),\r\n              type: fileType,\r\n              size: stats.size,\r\n              createdAt: stats.birthtime.toISOString(),\r\n              updatedAt: stats.mtime.toISOString(),\r\n              tags: []\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`扫描目录失败: ${dirPath}`, error);\r\n    }\r\n\r\n    return files;\r\n  }\r\n\r\n  /**\r\n   * 检测文件类型\r\n   */\r\n  private detectFileType(fileName: string): FileType {\r\n    const ext = path.extname(fileName).toLowerCase();\r\n\r\n    switch (ext) {\r\n      case '.lacsession':\r\n        return FileType.Session;\r\n      case '.lac':\r\n      case '.csv':\r\n        return FileType.Data;\r\n      case '.json':\r\n        if (fileName.includes('config')) return FileType.Config;\r\n        return FileType.Data;\r\n      case '.html':\r\n      case '.pdf':\r\n        return FileType.Report;\r\n      case '.js':\r\n      case '.ts':\r\n      case '.py':\r\n        return FileType.Script;\r\n      default:\r\n        return FileType.Data;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据文件类型获取目录\r\n   */\r\n  private getDirectoryForFileType(type: FileType): string {\r\n    if (!this.currentProject) return '';\r\n\r\n    switch (type) {\r\n      case FileType.Session:\r\n        return this.currentProject.structure.sessionsDir;\r\n      case FileType.Data:\r\n        return this.currentProject.structure.dataDir;\r\n      case FileType.Analysis:\r\n        return this.currentProject.structure.analysisDir;\r\n      case FileType.Report:\r\n        return this.currentProject.structure.reportsDir;\r\n      case FileType.Config:\r\n        return this.currentProject.structure.configDir;\r\n      default:\r\n        return this.currentProject.structure.dataDir;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成文件ID\r\n   */\r\n  private generateFileId(): string {\r\n    return `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * 创建项目锁文件\r\n   */\r\n  private async createProjectLock(projectPath: string): Promise<void> {\r\n    const lockPath = path.join(projectPath, this.PROJECT_LOCK_FILE);\r\n    const lockData = {\r\n      pid: process.pid,\r\n      user: process.env.USERNAME || process.env.USER || 'unknown',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    await fs.writeFile(lockPath, JSON.stringify(lockData), 'utf8');\r\n  }\r\n\r\n  /**\r\n   * 移除项目锁文件\r\n   */\r\n  private async removeProjectLock(projectPath: string): Promise<void> {\r\n    const lockPath = path.join(projectPath, this.PROJECT_LOCK_FILE);\r\n    try {\r\n      await fs.unlink(lockPath);\r\n    } catch (error) {\r\n      // 忽略删除失败\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查文件是否存在\r\n   */\r\n  private async fileExists(filePath: string): Promise<boolean> {\r\n    try {\r\n      await fs.access(filePath);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 模板内容生成方法\r\n\r\n  private getReadmeTemplate(): string {\r\n    return `# Logic Analyzer Project\r\n\r\n这是一个使用VSCode Logic Analyzer插件创建的项目。\r\n\r\n## 项目结构\r\n\r\n- \\`sessions/\\` - 采集会话文件\r\n- \\`data/\\` - 原始数据文件\r\n- \\`analysis/\\` - 分析结果\r\n- \\`reports/\\` - 生成的报告\r\n- \\`config/\\` - 配置文件\r\n\r\n## 使用方法\r\n\r\n1. 在VSCode中安装Logic Analyzer插件\r\n2. 打开命令面板 (Ctrl+Shift+P)\r\n3. 运行 \"Logic Analyzer: Open\"\r\n\r\n## 开始分析\r\n\r\n你可以从连接逻辑分析器设备开始，或者加载已有的采集数据。\r\n`;\r\n  }\r\n\r\n  private getProtocolAnalysisReadmeTemplate(): string {\r\n    return `# 协议分析项目\r\n\r\n专门用于协议分析的Logic Analyzer项目。\r\n\r\n## 特性\r\n\r\n- 支持多种标准协议（I2C, SPI, UART等）\r\n- 自定义协议解码器\r\n- 高级时序分析\r\n- 协议合规性检查\r\n\r\n## 目录说明\r\n\r\n- \\`protocols/\\` - 协议定义文件\r\n- \\`decoders/\\` - 自定义解码器\r\n- \\`sessions/\\` - 采集会话\r\n- \\`analysis/\\` - 分析结果\r\n\r\n## 使用指南\r\n\r\n1. 将协议定义放在 \\`protocols/\\` 目录\r\n2. 自定义解码器放在 \\`decoders/\\` 目录\r\n3. 开始分析前配置好协议参数\r\n`;\r\n  }\r\n\r\n  private getCollaborationReadmeTemplate(): string {\r\n    return `# 团队协作项目\r\n\r\n支持团队协作的Logic Analyzer项目。\r\n\r\n## 协作功能\r\n\r\n- 共享采集会话\r\n- 版本控制集成\r\n- 分析结果同步\r\n- 团队报告生成\r\n\r\n## 目录说明\r\n\r\n- \\`shared/\\` - 共享文件\r\n- \\`docs/\\` - 项目文档\r\n- \\`sessions/\\` - 采集会话\r\n- \\`reports/\\` - 团队报告\r\n\r\n## 协作指南\r\n\r\n请参阅 \\`docs/CONTRIBUTING.md\\` 了解如何贡献。\r\n`;\r\n  }\r\n\r\n  private getGitignoreTemplate(): string {\r\n    return `# Logic Analyzer项目忽略文件\r\n\r\n# 临时文件\r\ntemp/\r\n*.tmp\r\n*.temp\r\n\r\n# 大数据文件\r\n*.bigdata\r\ndata/*.raw\r\n\r\n# 系统文件\r\n.DS_Store\r\nThumbs.db\r\n\r\n# 编译输出\r\n*.compiled\r\nbuild/\r\n\r\n# 日志文件\r\n*.log\r\nlogs/\r\n\r\n# 缓存文件\r\n.cache/\r\n*.cache\r\n`;\r\n  }\r\n\r\n  /**\r\n   * 清理资源\r\n   */\r\n  async dispose(options?: ServiceDisposeOptions): Promise<boolean> {\r\n    this.stopFileWatchers();\r\n    this.stopAutoBackup();\r\n    this.removeAllListeners();\r\n    return true;\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const workspaceManager = new WorkspaceManager();\r\n"],"version":3}