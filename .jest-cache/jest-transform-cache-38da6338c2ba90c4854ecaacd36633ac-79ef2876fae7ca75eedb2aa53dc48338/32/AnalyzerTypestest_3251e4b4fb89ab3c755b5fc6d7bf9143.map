{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/AnalyzerTypes.test.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/AnalyzerTypes.test.ts"],"sourcesContent":["/**\r\n * AnalyzerTypes.ts 单元测试\r\n * 测试逻辑分析器类型定义、枚举值、常量和接口约束\r\n */\r\n\r\nimport {\r\n  AnalyzerDriverType,\r\n  CaptureMode,\r\n  CaptureError,\r\n  TriggerType,\r\n  TriggerCondition,\r\n  TriggerDelays,\r\n  CaptureLimits,\r\n  AnalyzerDeviceInfo,\r\n  DeviceInfo,\r\n  HardwareCapabilities,\r\n  NetworkCapability,\r\n  ConnectionParams,\r\n  ConnectionResult,\r\n  CaptureConfiguration,\r\n  CaptureResult,\r\n  CaptureSession,\r\n  AnalyzerChannel,\r\n  BurstInfo,\r\n  DeviceStatus,\r\n  CaptureEventArgs,\r\n  CaptureCompletedHandler\r\n} from '../../../src/models/AnalyzerTypes';\r\n\r\ndescribe('AnalyzerTypes', () => {\r\n  describe('枚举类型测试', () => {\r\n    describe('AnalyzerDriverType', () => {\r\n      it('应该包含所有预期的驱动类型', () => {\r\n        expect(AnalyzerDriverType.Serial).toBe('Serial');\r\n        expect(AnalyzerDriverType.Network).toBe('Network');\r\n        expect(AnalyzerDriverType.Multi).toBe('Multi');\r\n        expect(AnalyzerDriverType.Emulated).toBe('Emulated');\r\n        expect(AnalyzerDriverType.Single).toBe('Single');\r\n      });\r\n\r\n      it('应该能够枚举所有值', () => {\r\n        const values = Object.values(AnalyzerDriverType);\r\n        expect(values).toHaveLength(5);\r\n        expect(values).toContain('Serial');\r\n        expect(values).toContain('Network');\r\n        expect(values).toContain('Multi');\r\n        expect(values).toContain('Emulated');\r\n        expect(values).toContain('Single');\r\n      });\r\n    });\r\n\r\n    describe('CaptureMode', () => {\r\n      it('应该包含正确的通道数枚举', () => {\r\n        expect(CaptureMode.Channels_8).toBe(0);\r\n        expect(CaptureMode.Channels_16).toBe(1);\r\n        expect(CaptureMode.Channels_24).toBe(2);\r\n      });\r\n\r\n      it('枚举值应该是连续的数字', () => {\r\n        const values = Object.values(CaptureMode);\r\n        const numericValues = values.filter(v => typeof v === 'number') as number[];\r\n        expect(numericValues.sort()).toEqual([0, 1, 2]);\r\n      });\r\n    });\r\n\r\n    describe('CaptureError', () => {\r\n      it('应该包含所有预期的错误类型', () => {\r\n        expect(CaptureError.None).toBe('None');\r\n        expect(CaptureError.Busy).toBe('Busy');\r\n        expect(CaptureError.BadParams).toBe('BadParams');\r\n        expect(CaptureError.HardwareError).toBe('HardwareError');\r\n        expect(CaptureError.UnexpectedError).toBe('UnexpectedError');\r\n      });\r\n\r\n      it('错误类型应该是字符串', () => {\r\n        const values = Object.values(CaptureError);\r\n        values.forEach(value => {\r\n          expect(typeof value).toBe('string');\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('TriggerType', () => {\r\n      it('应该包含所有触发类型', () => {\r\n        expect(TriggerType.Edge).toBe(0);\r\n        expect(TriggerType.Complex).toBe(1);\r\n        expect(TriggerType.Fast).toBe(2);\r\n        expect(TriggerType.Blast).toBe(3);\r\n      });\r\n\r\n      it('触发类型值应该是连续递增的', () => {\r\n        expect(TriggerType.Complex).toBe(TriggerType.Edge + 1);\r\n        expect(TriggerType.Fast).toBe(TriggerType.Complex + 1);\r\n        expect(TriggerType.Blast).toBe(TriggerType.Fast + 1);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('类型别名测试', () => {\r\n    describe('TriggerCondition', () => {\r\n      it('应该接受所有有效的触发条件值', () => {\r\n        const validConditions: TriggerCondition[] = [\r\n          'rising', 'falling', 'high', 'low', 'any', 'none'\r\n        ];\r\n\r\n        validConditions.forEach(condition => {\r\n          // 应该能够赋值而不报错\r\n          const testCondition: TriggerCondition = condition;\r\n          expect(testCondition).toBe(condition);\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('CaptureCompletedHandler', () => {\r\n      it('应该是一个函数类型', () => {\r\n        const mockHandler: CaptureCompletedHandler = (args: CaptureEventArgs) => {\r\n          // Mock implementation\r\n        };\r\n\r\n        expect(typeof mockHandler).toBe('function');\r\n      });\r\n\r\n      it('函数应该接受CaptureEventArgs参数', () => {\r\n        const mockArgs: CaptureEventArgs = {\r\n          success: true,\r\n          session: {} as CaptureSession\r\n        };\r\n\r\n        const handler: CaptureCompletedHandler = (args) => {\r\n          expect(args).toBe(mockArgs);\r\n        };\r\n\r\n        handler(mockArgs);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('常量测试', () => {\r\n    describe('TriggerDelays', () => {\r\n      it('应该包含正确的触发延迟常量', () => {\r\n        expect(TriggerDelays.ComplexTriggerDelay).toBe(5);\r\n        expect(TriggerDelays.FastTriggerDelay).toBe(3);\r\n      });\r\n\r\n      it('常量应该是只读的', () => {\r\n        // TypeScript编译时检查只读性，运行时测试常量值不变\r\n        const originalComplex = TriggerDelays.ComplexTriggerDelay;\r\n        const originalFast = TriggerDelays.FastTriggerDelay;\r\n\r\n        expect(TriggerDelays.ComplexTriggerDelay).toBe(originalComplex);\r\n        expect(TriggerDelays.FastTriggerDelay).toBe(originalFast);\r\n      });\r\n\r\n      it('触发延迟值应该是正数', () => {\r\n        expect(TriggerDelays.ComplexTriggerDelay).toBeGreaterThan(0);\r\n        expect(TriggerDelays.FastTriggerDelay).toBeGreaterThan(0);\r\n      });\r\n\r\n      it('复杂触发延迟应该大于快速触发延迟', () => {\r\n        expect(TriggerDelays.ComplexTriggerDelay).toBeGreaterThan(TriggerDelays.FastTriggerDelay);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('接口实现测试', () => {\r\n    describe('CaptureLimits', () => {\r\n      it('应该能正确实现CaptureLimits接口', () => {\r\n        const limits: CaptureLimits = {\r\n          minPreSamples: 100,\r\n          maxPreSamples: 1000,\r\n          minPostSamples: 100,\r\n          maxPostSamples: 1000,\r\n          maxTotalSamples: 2000\r\n        };\r\n\r\n        expect(limits.minPreSamples).toBe(100);\r\n        expect(limits.maxPreSamples).toBe(1000);\r\n        expect(limits.minPostSamples).toBe(100);\r\n        expect(limits.maxPostSamples).toBe(1000);\r\n        expect(limits.maxTotalSamples).toBe(2000);\r\n      });\r\n\r\n      it('最大样本数应该大于或等于最小样本数', () => {\r\n        const limits: CaptureLimits = {\r\n          minPreSamples: 100,\r\n          maxPreSamples: 1000,\r\n          minPostSamples: 200,\r\n          maxPostSamples: 2000,\r\n          maxTotalSamples: 3000\r\n        };\r\n\r\n        expect(limits.maxPreSamples).toBeGreaterThanOrEqual(limits.minPreSamples);\r\n        expect(limits.maxPostSamples).toBeGreaterThanOrEqual(limits.minPostSamples);\r\n      });\r\n    });\r\n\r\n    describe('HardwareCapabilities', () => {\r\n      it('应该能正确实现HardwareCapabilities接口', () => {\r\n        const capabilities: HardwareCapabilities = {\r\n          channels: {\r\n            digital: 16,\r\n            analog: 4,\r\n            mixed: true,\r\n            maxVoltage: 5.0,\r\n            inputImpedance: 1000000\r\n          },\r\n          sampling: {\r\n            maxRate: 100000000,\r\n            minRate: 1000,\r\n            supportedRates: [1000, 10000, 100000, 1000000, 10000000, 100000000],\r\n            bufferSize: 1048576,\r\n            streamingSupport: true\r\n          },\r\n          triggers: {\r\n            types: [TriggerType.Edge, TriggerType.Complex, TriggerType.Fast],\r\n            maxChannels: 16,\r\n            patternWidth: 32,\r\n            sequentialSupport: true,\r\n            conditions: ['rising', 'falling', 'high', 'low']\r\n          },\r\n          connectivity: {\r\n            interfaces: ['usb', 'ethernet'],\r\n            protocols: ['custom', 'sigrok']\r\n          },\r\n          features: {\r\n            signalGeneration: true,\r\n            powerSupply: false,\r\n            i2cSniffer: true,\r\n            canSupport: false,\r\n            customDecoders: true,\r\n            voltageMonitoring: true\r\n          }\r\n        };\r\n\r\n        expect(capabilities.channels.digital).toBe(16);\r\n        expect(capabilities.sampling.maxRate).toBeGreaterThan(capabilities.sampling.minRate);\r\n        expect(capabilities.triggers.maxChannels).toBeGreaterThan(0);\r\n        expect(capabilities.connectivity.interfaces).toContain('usb');\r\n        expect(capabilities.features.signalGeneration).toBe(true);\r\n      });\r\n\r\n      it('采样率数组应该包含有效值', () => {\r\n        const capabilities: HardwareCapabilities = {\r\n          channels: {\r\n            digital: 8,\r\n            maxVoltage: 3.3,\r\n            inputImpedance: 1000000\r\n          },\r\n          sampling: {\r\n            maxRate: 1000000,\r\n            minRate: 1000,\r\n            supportedRates: [1000, 10000, 100000, 1000000],\r\n            bufferSize: 4096,\r\n            streamingSupport: false\r\n          },\r\n          triggers: {\r\n            types: [TriggerType.Edge],\r\n            maxChannels: 8,\r\n            patternWidth: 8,\r\n            sequentialSupport: false,\r\n            conditions: ['rising', 'falling']\r\n          },\r\n          connectivity: {\r\n            interfaces: ['usb'],\r\n            protocols: ['custom']\r\n          },\r\n          features: {}\r\n        };\r\n\r\n        expect(capabilities.sampling.supportedRates.length).toBeGreaterThan(0);\r\n        capabilities.sampling.supportedRates.forEach(rate => {\r\n          expect(rate).toBeGreaterThan(0);\r\n          expect(rate).toBeGreaterThanOrEqual(capabilities.sampling.minRate);\r\n          expect(rate).toBeLessThanOrEqual(capabilities.sampling.maxRate);\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('ConnectionParams', () => {\r\n      it('应该支持设备路径连接', () => {\r\n        const params: ConnectionParams = {\r\n          devicePath: '/dev/ttyUSB0',\r\n          autoDetect: false\r\n        };\r\n\r\n        expect(params.devicePath).toBe('/dev/ttyUSB0');\r\n        expect(params.autoDetect).toBe(false);\r\n      });\r\n\r\n      it('应该支持网络连接配置', () => {\r\n        const params: ConnectionParams = {\r\n          networkConfig: {\r\n            host: '192.168.1.100',\r\n            port: 8080,\r\n            timeout: 5000\r\n          },\r\n          autoDetect: false\r\n        };\r\n\r\n        expect(params.networkConfig).toBeDefined();\r\n        expect(params.networkConfig!.host).toBe('192.168.1.100');\r\n        expect(params.networkConfig!.port).toBe(8080);\r\n        expect(params.networkConfig!.timeout).toBe(5000);\r\n      });\r\n\r\n      it('应该支持串口连接配置', () => {\r\n        const params: ConnectionParams = {\r\n          serialConfig: {\r\n            baudRate: 115200,\r\n            dataBits: 8,\r\n            stopBits: 1,\r\n            parity: 'none'\r\n          }\r\n        };\r\n\r\n        expect(params.serialConfig).toBeDefined();\r\n        expect(params.serialConfig!.baudRate).toBe(115200);\r\n        expect(params.serialConfig!.dataBits).toBe(8);\r\n        expect(params.serialConfig!.stopBits).toBe(1);\r\n        expect(params.serialConfig!.parity).toBe('none');\r\n      });\r\n    });\r\n\r\n    describe('CaptureConfiguration', () => {\r\n      it('应该包含所有必需的配置参数', () => {\r\n        const config: CaptureConfiguration = {\r\n          frequency: 1000000,\r\n          preTriggerSamples: 1000,\r\n          postTriggerSamples: 9000,\r\n          triggerType: TriggerType.Edge,\r\n          triggerChannel: 0,\r\n          triggerInverted: false,\r\n          triggerPattern: 0x01,\r\n          triggerBitCount: 1,\r\n          loopCount: 1,\r\n          measureBursts: false,\r\n          captureChannels: [0, 1, 2, 3],\r\n          captureMode: CaptureMode.Channels_8\r\n        };\r\n\r\n        expect(config.frequency).toBe(1000000);\r\n        expect(config.preTriggerSamples).toBe(1000);\r\n        expect(config.postTriggerSamples).toBe(9000);\r\n        expect(config.triggerType).toBe(TriggerType.Edge);\r\n        expect(config.triggerChannel).toBe(0);\r\n        expect(config.triggerInverted).toBe(false);\r\n        expect(config.loopCount).toBe(1);\r\n        expect(config.measureBursts).toBe(false);\r\n        expect(config.captureChannels).toHaveLength(4);\r\n        expect(config.captureMode).toBe(CaptureMode.Channels_8);\r\n      });\r\n\r\n      it('频率应该是正数', () => {\r\n        const config: CaptureConfiguration = {\r\n          frequency: 1000000,\r\n          preTriggerSamples: 100,\r\n          postTriggerSamples: 900,\r\n          triggerType: TriggerType.Edge,\r\n          triggerChannel: 0,\r\n          triggerInverted: false,\r\n          loopCount: 1,\r\n          measureBursts: false,\r\n          captureChannels: [0]\r\n        };\r\n\r\n        expect(config.frequency).toBeGreaterThan(0);\r\n      });\r\n\r\n      it('样本数应该是非负数', () => {\r\n        const config: CaptureConfiguration = {\r\n          frequency: 1000000,\r\n          preTriggerSamples: 0,\r\n          postTriggerSamples: 1000,\r\n          triggerType: TriggerType.Edge,\r\n          triggerChannel: 0,\r\n          triggerInverted: false,\r\n          loopCount: 1,\r\n          measureBursts: false,\r\n          captureChannels: [0]\r\n        };\r\n\r\n        expect(config.preTriggerSamples).toBeGreaterThanOrEqual(0);\r\n        expect(config.postTriggerSamples).toBeGreaterThanOrEqual(0);\r\n      });\r\n    });\r\n\r\n    describe('DeviceInfo', () => {\r\n      it('应该包含设备基本信息', () => {\r\n        const deviceInfo: DeviceInfo = {\r\n          name: 'Test Logic Analyzer',\r\n          version: '1.0.0',\r\n          type: AnalyzerDriverType.Serial,\r\n          connectionPath: '/dev/ttyUSB0',\r\n          isNetwork: false,\r\n          capabilities: {\r\n            channels: {\r\n              digital: 8,\r\n              maxVoltage: 3.3,\r\n              inputImpedance: 1000000\r\n            },\r\n            sampling: {\r\n              maxRate: 24000000,\r\n              minRate: 1000,\r\n              supportedRates: [1000, 10000, 100000, 1000000, 10000000, 24000000],\r\n              bufferSize: 8192,\r\n              streamingSupport: false\r\n            },\r\n            triggers: {\r\n              types: [TriggerType.Edge, TriggerType.Complex],\r\n              maxChannels: 8,\r\n              patternWidth: 8,\r\n              sequentialSupport: false,\r\n              conditions: ['rising', 'falling', 'high', 'low']\r\n            },\r\n            connectivity: {\r\n              interfaces: ['usb'],\r\n              protocols: ['custom']\r\n            },\r\n            features: {}\r\n          }\r\n        };\r\n\r\n        expect(deviceInfo.name).toBe('Test Logic Analyzer');\r\n        expect(deviceInfo.version).toBe('1.0.0');\r\n        expect(deviceInfo.type).toBe(AnalyzerDriverType.Serial);\r\n        expect(deviceInfo.isNetwork).toBe(false);\r\n        expect(deviceInfo.capabilities).toBeDefined();\r\n      });\r\n\r\n      it('网络设备应该正确标识', () => {\r\n        const networkDevice: DeviceInfo = {\r\n          name: 'Network Logic Analyzer',\r\n          type: AnalyzerDriverType.Network,\r\n          isNetwork: true,\r\n          capabilities: {\r\n            channels: { digital: 16, maxVoltage: 5.0, inputImpedance: 1000000 },\r\n            sampling: { maxRate: 100000000, minRate: 1000, supportedRates: [1000000], bufferSize: 1024, streamingSupport: true },\r\n            triggers: { types: [TriggerType.Edge], maxChannels: 16, patternWidth: 16, sequentialSupport: false, conditions: ['rising'] },\r\n            connectivity: { interfaces: ['ethernet'], protocols: ['scpi'] },\r\n            features: {}\r\n          }\r\n        };\r\n\r\n        expect(networkDevice.type).toBe(AnalyzerDriverType.Network);\r\n        expect(networkDevice.isNetwork).toBe(true);\r\n      });\r\n    });\r\n\r\n    describe('ConnectionResult', () => {\r\n      it('成功连接应该包含设备信息', () => {\r\n        const result: ConnectionResult = {\r\n          success: true,\r\n          deviceInfo: {\r\n            name: 'Connected Device',\r\n            type: AnalyzerDriverType.Serial,\r\n            isNetwork: false,\r\n            capabilities: {\r\n              channels: { digital: 8, maxVoltage: 3.3, inputImpedance: 1000000 },\r\n              sampling: { maxRate: 1000000, minRate: 1000, supportedRates: [1000000], bufferSize: 1024, streamingSupport: false },\r\n              triggers: { types: [TriggerType.Edge], maxChannels: 8, patternWidth: 8, sequentialSupport: false, conditions: ['rising'] },\r\n              connectivity: { interfaces: ['usb'], protocols: ['custom'] },\r\n              features: {}\r\n            }\r\n          }\r\n        };\r\n\r\n        expect(result.success).toBe(true);\r\n        expect(result.deviceInfo).toBeDefined();\r\n        expect(result.deviceInfo!.name).toBe('Connected Device');\r\n        expect(result.error).toBeUndefined();\r\n      });\r\n\r\n      it('失败连接应该包含错误信息', () => {\r\n        const result: ConnectionResult = {\r\n          success: false,\r\n          error: 'Device not found'\r\n        };\r\n\r\n        expect(result.success).toBe(false);\r\n        expect(result.error).toBe('Device not found');\r\n        expect(result.deviceInfo).toBeUndefined();\r\n      });\r\n    });\r\n\r\n    describe('CaptureResult', () => {\r\n      it('成功采集应该包含会话信息', () => {\r\n        const result: CaptureResult = {\r\n          success: true,\r\n          session: {\r\n            frequency: 1000000,\r\n            preTriggerSamples: 1000,\r\n            postTriggerSamples: 9000,\r\n            get totalSamples() { return this.preTriggerSamples + this.postTriggerSamples; },\r\n            triggerType: TriggerType.Edge,\r\n            triggerChannel: 0,\r\n            triggerInverted: false,\r\n            loopCount: 1,\r\n            measureBursts: false,\r\n            captureChannels: [],\r\n            clone: function() { return this; },\r\n            cloneSettings: function() { return this; }\r\n          }\r\n        };\r\n\r\n        expect(result.success).toBe(true);\r\n        expect(result.session).toBeDefined();\r\n        expect(result.session!.totalSamples).toBe(10000);\r\n        expect(result.error).toBeUndefined();\r\n      });\r\n\r\n      it('失败采集应该包含错误信息', () => {\r\n        const result: CaptureResult = {\r\n          success: false,\r\n          error: CaptureError.HardwareError\r\n        };\r\n\r\n        expect(result.success).toBe(false);\r\n        expect(result.error).toBe(CaptureError.HardwareError);\r\n        expect(result.session).toBeUndefined();\r\n      });\r\n    });\r\n\r\n    describe('DeviceStatus', () => {\r\n      it('应该正确表示设备状态', () => {\r\n        const status: DeviceStatus = {\r\n          isConnected: true,\r\n          isCapturing: false,\r\n          batteryVoltage: '3.7V',\r\n          temperature: 25.5,\r\n          errorStatus: undefined\r\n        };\r\n\r\n        expect(status.isConnected).toBe(true);\r\n        expect(status.isCapturing).toBe(false);\r\n        expect(status.batteryVoltage).toBe('3.7V');\r\n        expect(status.temperature).toBe(25.5);\r\n        expect(status.errorStatus).toBeUndefined();\r\n      });\r\n\r\n      it('应该能表示错误状态', () => {\r\n        const errorStatus: DeviceStatus = {\r\n          isConnected: false,\r\n          isCapturing: false,\r\n          errorStatus: 'Connection timeout'\r\n        };\r\n\r\n        expect(errorStatus.isConnected).toBe(false);\r\n        expect(errorStatus.errorStatus).toBe('Connection timeout');\r\n      });\r\n    });\r\n\r\n    describe('CaptureEventArgs', () => {\r\n      it('应该包含采集结果和会话信息', () => {\r\n        const mockSession: CaptureSession = {\r\n          frequency: 1000000,\r\n          preTriggerSamples: 100,\r\n          postTriggerSamples: 900,\r\n          get totalSamples() { return this.preTriggerSamples + this.postTriggerSamples; },\r\n          triggerType: TriggerType.Edge,\r\n          triggerChannel: 0,\r\n          triggerInverted: false,\r\n          loopCount: 1,\r\n          measureBursts: false,\r\n          captureChannels: [],\r\n          clone: function() { return this; },\r\n          cloneSettings: function() { return this; }\r\n        };\r\n\r\n        const eventArgs: CaptureEventArgs = {\r\n          success: true,\r\n          session: mockSession\r\n        };\r\n\r\n        expect(eventArgs.success).toBe(true);\r\n        expect(eventArgs.session).toBe(mockSession);\r\n        expect(eventArgs.session.totalSamples).toBe(1000);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('接口继承和扩展测试', () => {\r\n    it('应该能扩展基础接口', () => {\r\n      interface ExtendedDeviceInfo extends DeviceInfo {\r\n        serialNumber: string;\r\n        firmwareVersion: string;\r\n      }\r\n\r\n      const extendedInfo: ExtendedDeviceInfo = {\r\n        name: 'Extended Device',\r\n        type: AnalyzerDriverType.Serial,\r\n        isNetwork: false,\r\n        serialNumber: 'SN123456',\r\n        firmwareVersion: '2.1.0',\r\n        capabilities: {\r\n          channels: { digital: 8, maxVoltage: 3.3, inputImpedance: 1000000 },\r\n          sampling: { maxRate: 1000000, minRate: 1000, supportedRates: [1000000], bufferSize: 1024, streamingSupport: false },\r\n          triggers: { types: [TriggerType.Edge], maxChannels: 8, patternWidth: 8, sequentialSupport: false, conditions: ['rising'] },\r\n          connectivity: { interfaces: ['usb'], protocols: ['custom'] },\r\n          features: {}\r\n        }\r\n      };\r\n\r\n      expect(extendedInfo.name).toBe('Extended Device');\r\n      expect(extendedInfo.serialNumber).toBe('SN123456');\r\n      expect(extendedInfo.firmwareVersion).toBe('2.1.0');\r\n    });\r\n  });\r\n\r\n  describe('类型兼容性测试', () => {\r\n    it('枚举值应该与数字兼容', () => {\r\n      const triggerValue: number = TriggerType.Complex;\r\n      expect(triggerValue).toBe(1);\r\n\r\n      const modeValue: number = CaptureMode.Channels_16;\r\n      expect(modeValue).toBe(1);\r\n    });\r\n\r\n    it('字符串枚举应该与字符串兼容', () => {\r\n      const driverType: string = AnalyzerDriverType.Network;\r\n      expect(driverType).toBe('Network');\r\n\r\n      const errorType: string = CaptureError.BadParams;\r\n      expect(errorType).toBe('BadParams');\r\n    });\r\n\r\n    it('联合类型应该接受所有有效值', () => {\r\n      const conditions: TriggerCondition[] = [\r\n        'rising', 'falling', 'high', 'low', 'any', 'none'\r\n      ];\r\n\r\n      conditions.forEach(condition => {\r\n        const testCondition: TriggerCondition = condition;\r\n        expect(['rising', 'falling', 'high', 'low', 'any', 'none']).toContain(testCondition);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('边界条件测试', () => {\r\n    it('应该处理空数组和可选属性', () => {\r\n      const minimalCapabilities: HardwareCapabilities = {\r\n        channels: {\r\n          digital: 1,\r\n          maxVoltage: 3.3,\r\n          inputImpedance: 1000000\r\n        },\r\n        sampling: {\r\n          maxRate: 1000,\r\n          minRate: 1000,\r\n          supportedRates: [],\r\n          bufferSize: 128,\r\n          streamingSupport: false\r\n        },\r\n        triggers: {\r\n          types: [],\r\n          maxChannels: 0,\r\n          patternWidth: 0,\r\n          sequentialSupport: false,\r\n          conditions: []\r\n        },\r\n        connectivity: {\r\n          interfaces: [],\r\n          protocols: []\r\n        },\r\n        features: {}\r\n      };\r\n\r\n      expect(minimalCapabilities.channels.digital).toBe(1);\r\n      expect(minimalCapabilities.sampling.supportedRates).toHaveLength(0);\r\n      expect(minimalCapabilities.triggers.types).toHaveLength(0);\r\n      expect(minimalCapabilities.connectivity.interfaces).toHaveLength(0);\r\n    });\r\n\r\n    it('应该处理可选字段', () => {\r\n      const minimalDeviceInfo: DeviceInfo = {\r\n        name: 'Minimal Device',\r\n        type: AnalyzerDriverType.Single,\r\n        isNetwork: false,\r\n        capabilities: {\r\n          channels: { digital: 1, maxVoltage: 3.3, inputImpedance: 1000000 },\r\n          sampling: { maxRate: 1000, minRate: 1000, supportedRates: [1000], bufferSize: 128, streamingSupport: false },\r\n          triggers: { types: [TriggerType.Edge], maxChannels: 1, patternWidth: 1, sequentialSupport: false, conditions: ['rising'] },\r\n          connectivity: { interfaces: ['usb'], protocols: ['custom'] },\r\n          features: {}\r\n        }\r\n      };\r\n\r\n      expect(minimalDeviceInfo.version).toBeUndefined();\r\n      expect(minimalDeviceInfo.connectionPath).toBeUndefined();\r\n    });\r\n  });\r\n});"],"version":3}