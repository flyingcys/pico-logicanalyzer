{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/CaptureModels.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/CaptureModels.ts"],"sourcesContent":["/**\r\n * 数据采集核心模型实现\r\n * 基于原版 C# SharedDriver 模块的精确移植\r\n * 严格遵循原版的数据结构和逻辑\r\n */\r\n\r\nimport {\r\n  TriggerType,\r\n  CaptureMode,\r\n  CaptureError,\r\n  CaptureLimits,\r\n  AnalyzerDeviceInfo,\r\n  TriggerDelays\r\n} from './AnalyzerTypes';\r\n\r\n/**\r\n * 采集会话类 - 基于C# CaptureSession的精确实现\r\n */\r\nexport class CaptureSession {\r\n  // 基础采集参数\r\n  public frequency: number = 1000000; // 采样频率 (Hz)\r\n  public preTriggerSamples: number = 0; // 触发前样本数\r\n  public postTriggerSamples: number = 1000; // 触发后样本数\r\n\r\n  // 突发采集系统\r\n  public loopCount: number = 0; // 突发采集次数 (0-255)\r\n  public measureBursts: boolean = false; // 是否测量突发间隔\r\n\r\n  // 通道配置\r\n  public captureChannels: AnalyzerChannel[] = [];\r\n\r\n  // 突发信息数组 (采集完成后填充)\r\n  public bursts?: BurstInfo[];\r\n\r\n  // 触发系统配置\r\n  public triggerType: TriggerType = TriggerType.Edge;\r\n  public triggerChannel: number = 0; // 触发通道 (0-23)\r\n  public triggerInverted: boolean = false; // 触发极性反转\r\n  public triggerBitCount: number = 1; // 触发位宽\r\n  public triggerPattern: number = 0; // 复杂触发模式 (16位)\r\n\r\n  /**\r\n   * 总样本数计算 - 对应C#的只读属性\r\n   */\r\n  public get totalSamples(): number {\r\n    return this.postTriggerSamples * (this.loopCount + 1) + this.preTriggerSamples;\r\n  }\r\n\r\n  /**\r\n   * 深拷贝包含样本数据 - 对应C#的Clone()方法\r\n   */\r\n  public clone(): CaptureSession {\r\n    const newInst = new CaptureSession();\r\n\r\n    // 复制基础属性\r\n    newInst.frequency = this.frequency;\r\n    newInst.preTriggerSamples = this.preTriggerSamples;\r\n    newInst.postTriggerSamples = this.postTriggerSamples;\r\n    newInst.loopCount = this.loopCount;\r\n    newInst.measureBursts = this.measureBursts;\r\n    newInst.triggerType = this.triggerType;\r\n    newInst.triggerChannel = this.triggerChannel;\r\n    newInst.triggerInverted = this.triggerInverted;\r\n    newInst.triggerBitCount = this.triggerBitCount;\r\n    newInst.triggerPattern = this.triggerPattern;\r\n\r\n    // 深拷贝通道数组\r\n    newInst.captureChannels = this.captureChannels.map(ch => ch.clone());\r\n\r\n    // 深拷贝突发信息\r\n    if (this.bursts) {\r\n      newInst.bursts = this.bursts.map(burst => {\r\n        const newBurst = new BurstInfo();\r\n        newBurst.burstSampleStart = burst.burstSampleStart;\r\n        newBurst.burstSampleEnd = burst.burstSampleEnd;\r\n        newBurst.burstSampleGap = burst.burstSampleGap;\r\n        newBurst.burstTimeGap = burst.burstTimeGap;\r\n        return newBurst;\r\n      });\r\n    }\r\n\r\n    return newInst;\r\n  }\r\n\r\n  /**\r\n   * 只拷贝设置，不含样本数据 - 对应C#的CloneSettings()方法\r\n   */\r\n  public cloneSettings(): CaptureSession {\r\n    const newInst = new CaptureSession();\r\n\r\n    // 复制基础属性\r\n    newInst.frequency = this.frequency;\r\n    newInst.preTriggerSamples = this.preTriggerSamples;\r\n    newInst.postTriggerSamples = this.postTriggerSamples;\r\n    newInst.loopCount = this.loopCount;\r\n    newInst.measureBursts = this.measureBursts;\r\n    newInst.triggerType = this.triggerType;\r\n    newInst.triggerChannel = this.triggerChannel;\r\n    newInst.triggerInverted = this.triggerInverted;\r\n    newInst.triggerBitCount = this.triggerBitCount;\r\n    newInst.triggerPattern = this.triggerPattern;\r\n\r\n    // 复制通道设置，但清空样本数据\r\n    newInst.captureChannels = this.captureChannels.map(ch => {\r\n      const clonedChannel = ch.clone();\r\n      clonedChannel.samples = undefined; // 清空样本数据\r\n      return clonedChannel;\r\n    });\r\n\r\n    return newInst;\r\n  }\r\n}\r\n\r\n/**\r\n * 分析器通道类 - 基于C# AnalyzerChannel的精确实现\r\n */\r\nexport class AnalyzerChannel {\r\n  public channelNumber: number = 0;\r\n  public channelName: string = '';\r\n  public channelColor?: number; // uint? 对应TypeScript的number | undefined\r\n  public hidden: boolean = false;\r\n  public minimized?: boolean = false; // 最小化显示状态\r\n  public samples?: Uint8Array; // byte[] 对应TypeScript的Uint8Array\r\n\r\n  constructor(channelNumber: number = 0, channelName: string = '') {\r\n    this.channelNumber = channelNumber;\r\n    this.channelName = channelName || this.textualChannelNumber;\r\n  }\r\n\r\n  /**\r\n   * 文本化通道号 - 对应C#的TextualChannelNumber getter\r\n   */\r\n  public get textualChannelNumber(): string {\r\n    return `Channel ${this.channelNumber + 1}`;\r\n  }\r\n\r\n  /**\r\n   * ToString方法 - 对应C#的ToString()重写\r\n   */\r\n  public toString(): string {\r\n    return this.channelName || this.textualChannelNumber;\r\n  }\r\n\r\n  /**\r\n   * 克隆方法 - 对应C#的Clone()方法，包含深拷贝支持\r\n   */\r\n  public clone(): AnalyzerChannel {\r\n    const newInst = new AnalyzerChannel();\r\n    newInst.channelNumber = this.channelNumber;\r\n    newInst.channelName = this.channelName;\r\n    newInst.channelColor = this.channelColor;\r\n    newInst.hidden = this.hidden;\r\n\r\n    // 深拷贝样本数据\r\n    if (this.samples) {\r\n      newInst.samples = new Uint8Array(this.samples);\r\n    }\r\n\r\n    return newInst;\r\n  }\r\n}\r\n\r\n/**\r\n * 突发信息类 - 基于C# BurstInfo的精确实现\r\n */\r\nexport class BurstInfo {\r\n  public burstSampleStart: number = 0; // 突发开始样本位置\r\n  public burstSampleEnd: number = 0; // 突发结束样本位置\r\n  public burstSampleGap: number = 0; // 样本间隔数量 (ulong)\r\n  public burstTimeGap: number = 0; // 时间间隔 (纳秒, ulong)\r\n\r\n  /**\r\n   * 时间格式化方法 - 对应C#的GetTime()方法\r\n   */\r\n  public getTime(): string {\r\n    const nanoInMicro = 1000.0;\r\n    const nanoInMilli = 1000000.0;\r\n    const nanoInSecond = 1000000000.0;\r\n\r\n    if (this.burstTimeGap < nanoInMicro) {\r\n      return `${this.burstTimeGap} ns`;\r\n    } else if (this.burstTimeGap < nanoInMilli) {\r\n      const microseconds = this.burstTimeGap / nanoInMicro;\r\n      return `${microseconds.toFixed(3)} µs`;\r\n    } else if (this.burstTimeGap < nanoInSecond) {\r\n      const milliseconds = this.burstTimeGap / nanoInMilli;\r\n      return `${milliseconds.toFixed(3)} ms`;\r\n    } else {\r\n      const seconds = this.burstTimeGap / nanoInSecond;\r\n      return `${seconds.toFixed(3)} s`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ToString方法 - 对应C#的ToString()重写\r\n   */\r\n  public toString(): string {\r\n    return `Burst: ${this.burstSampleStart} to ${this.burstSampleEnd}\\nGap: ${this.getTime()} (${this.burstSampleGap} samples)`;\r\n  }\r\n}\r\n\r\n/**\r\n * 采集限制类 - 基于C# CaptureLimits的实现，添加了计算属性\r\n */\r\nexport class CaptureLimitsImpl implements CaptureLimits {\r\n  public minPreSamples: number = 2;\r\n  public maxPreSamples: number = 1000;\r\n  public minPostSamples: number = 2;\r\n  public maxPostSamples: number = 10000;\r\n\r\n  /**\r\n   * 最大总样本数 - 对应C#的MaxTotalSamples getter\r\n   * 应该是maxPreSamples + maxPostSamples\r\n   */\r\n  public get maxTotalSamples(): number {\r\n    return this.maxPreSamples + this.maxPostSamples;\r\n  }\r\n}\r\n\r\n/**\r\n * 输出数据包类 - 基于C# OutputPacket的精确实现\r\n * 🚀 关键的通信协议实现，包含转义机制\r\n */\r\nexport class OutputPacket {\r\n  private dataBuffer: number[] = [];\r\n\r\n  /**\r\n   * 添加单个字节\r\n   */\r\n  public addByte(newByte: number): void {\r\n    this.dataBuffer.push(newByte & 0xFF);\r\n  }\r\n\r\n  /**\r\n   * 添加字节数组\r\n   */\r\n  public addBytes(newBytes: Uint8Array | number[]): void {\r\n    if (newBytes instanceof Uint8Array) {\r\n      for (let i = 0; i < newBytes.length; i++) {\r\n        this.dataBuffer.push(newBytes[i]);\r\n      }\r\n    } else {\r\n      this.dataBuffer.push(...newBytes.map(b => b & 0xFF));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加ASCII字符串\r\n   */\r\n  public addString(newString: string): void {\r\n    const encoder = new TextEncoder();\r\n    const bytes = encoder.encode(newString);\r\n    this.addBytes(bytes);\r\n  }\r\n\r\n  /**\r\n   * 添加结构体 - TypeScript版本使用ArrayBuffer\r\n   */\r\n  public addStruct(structData: ArrayBuffer | Uint8Array): void {\r\n    if (structData instanceof ArrayBuffer) {\r\n      this.addBytes(new Uint8Array(structData));\r\n    } else {\r\n      this.addBytes(structData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空缓冲区\r\n   */\r\n  public clear(): void {\r\n    this.dataBuffer = [];\r\n  }\r\n\r\n  /**\r\n   * 序列化数据包 - 对应C#的关键协议实现\r\n   * 协议格式: 0x55 0xAA [转义后的数据] 0xAA 0x55\r\n   * 转义规则: 0xAA/0x55/0xF0 -> 0xF0 + (原值 ^ 0xF0)\r\n   */\r\n  public serialize(): Uint8Array {\r\n    const finalData: number[] = [];\r\n\r\n    // 添加起始标记\r\n    finalData.push(0x55);\r\n    finalData.push(0xAA);\r\n\r\n    // 对数据进行转义处理\r\n    for (const byte of this.dataBuffer) {\r\n      if (byte === 0xAA || byte === 0x55 || byte === 0xF0) {\r\n        finalData.push(0xF0);\r\n        finalData.push(byte ^ 0xF0);\r\n      } else {\r\n        finalData.push(byte);\r\n      }\r\n    }\r\n\r\n    // 添加结束标记\r\n    finalData.push(0xAA);\r\n    finalData.push(0x55);\r\n\r\n    return new Uint8Array(finalData);\r\n  }\r\n}\r\n\r\n/**\r\n * 采集请求结构 - 基于C# CaptureRequest的精确内存布局\r\n */\r\nexport interface CaptureRequestStruct {\r\n  triggerType: number; // byte\r\n  trigger: number; // byte\r\n  invertedOrCount: number; // byte\r\n  triggerValue: number; // ushort (16位)\r\n  channels: Uint8Array; // byte[24]\r\n  channelCount: number; // byte\r\n  frequency: number; // uint32 (32位)\r\n  preSamples: number; // uint32 (32位)\r\n  postSamples: number; // uint32 (32位)\r\n  loopCount: number; // byte\r\n  measure: number; // byte (0/1)\r\n  captureMode: number; // byte\r\n}\r\n\r\n/**\r\n * 网络配置结构 - 基于C# NetConfig的固定大小缓冲区\r\n */\r\nexport interface NetConfigStruct {\r\n  accessPointName: string; // 33字节固定长度\r\n  password: string; // 64字节固定长度\r\n  ipAddress: string; // 16字节固定长度\r\n  port: number; // ushort (16位)\r\n}\r\n\r\n/**\r\n * 采集请求构建器 - 用于构建符合C#结构体布局的二进制数据\r\n */\r\nexport class CaptureRequestBuilder {\r\n  /**\r\n   * 构建采集请求的二进制数据\r\n   */\r\n  public static buildCaptureRequest(session: CaptureSession): Uint8Array {\r\n    const buffer = new ArrayBuffer(64); // 预分配足够的空间\r\n    const view = new DataView(buffer);\r\n    let offset = 0;\r\n\r\n    // 按照C#结构体的精确布局写入数据\r\n    view.setUint8(offset++, session.triggerType); // triggerType: byte\r\n    view.setUint8(offset++, session.triggerChannel); // trigger: byte\r\n    view.setUint8(offset++, session.triggerInverted ? 1 : 0); // invertedOrCount: byte\r\n    view.setUint16(offset, session.triggerPattern, true); // triggerValue: ushort, little endian\r\n    offset += 2;\r\n\r\n    // channels: byte[24] - 通道配置数组\r\n    const channelArray = new Uint8Array(24);\r\n    session.captureChannels.forEach(ch => {\r\n      if (ch.channelNumber >= 0 && ch.channelNumber < 24) {\r\n        channelArray[ch.channelNumber] = 1;\r\n      }\r\n    });\r\n    for (let i = 0; i < 24; i++) {\r\n      view.setUint8(offset++, channelArray[i]);\r\n    }\r\n\r\n    view.setUint8(offset++, session.captureChannels.length); // channelCount: byte\r\n    view.setUint32(offset, session.frequency, true); // frequency: uint32, little endian\r\n    offset += 4;\r\n    view.setUint32(offset, session.preTriggerSamples, true); // preSamples: uint32, little endian\r\n    offset += 4;\r\n    view.setUint32(offset, session.postTriggerSamples, true); // postSamples: uint32, little endian\r\n    offset += 4;\r\n    view.setUint8(offset++, session.loopCount); // loopCount: byte\r\n    view.setUint8(offset++, session.measureBursts ? 1 : 0); // measure: byte\r\n\r\n    // 计算采集模式\r\n    const maxChannel = Math.max(...session.captureChannels.map(ch => ch.channelNumber));\r\n    const captureMode = maxChannel < 8 ? CaptureMode.Channels_8 :\r\n                       (maxChannel < 16 ? CaptureMode.Channels_16 : CaptureMode.Channels_24);\r\n    view.setUint8(offset++, captureMode); // captureMode: byte\r\n\r\n    return new Uint8Array(buffer, 0, offset);\r\n  }\r\n\r\n  /**\r\n   * 构建网络配置的二进制数据\r\n   */\r\n  public static buildNetConfig(config: NetConfigStruct): Uint8Array {\r\n    const buffer = new ArrayBuffer(115); // 33 + 64 + 16 + 2 = 115字节\r\n    const view = new DataView(buffer);\r\n    let offset = 0;\r\n\r\n    // AccessPointName: 33字节固定长度\r\n    const apNameBytes = new TextEncoder().encode(config.accessPointName.slice(0, 32));\r\n    for (let i = 0; i < 33; i++) {\r\n      view.setUint8(offset++, i < apNameBytes.length ? apNameBytes[i] : 0);\r\n    }\r\n\r\n    // Password: 64字节固定长度\r\n    const passwordBytes = new TextEncoder().encode(config.password.slice(0, 63));\r\n    for (let i = 0; i < 64; i++) {\r\n      view.setUint8(offset++, i < passwordBytes.length ? passwordBytes[i] : 0);\r\n    }\r\n\r\n    // IPAddress: 16字节固定长度\r\n    const ipBytes = new TextEncoder().encode(config.ipAddress.slice(0, 15));\r\n    for (let i = 0; i < 16; i++) {\r\n      view.setUint8(offset++, i < ipBytes.length ? ipBytes[i] : 0);\r\n    }\r\n\r\n    // Port: ushort (16位)\r\n    view.setUint16(offset, config.port, true); // little endian\r\n\r\n    return new Uint8Array(buffer);\r\n  }\r\n}\r\n\r\n/**\r\n * 数据采集事件参数\r\n */\r\nexport class CaptureEventArgs {\r\n  public success: boolean = false;\r\n  public session: CaptureSession;\r\n\r\n  constructor(success: boolean, session: CaptureSession) {\r\n    this.success = success;\r\n    this.session = session;\r\n  }\r\n}\r\n\r\n/**\r\n * 采集完成处理器类型\r\n */\r\nexport type CaptureCompletedHandler = (args: CaptureEventArgs) => void;\r\n\r\n/**\r\n * 样本区域定义 - 用于数据导出和分析\r\n */\r\nexport interface SampleRegion {\r\n  /** 起始样本索引 */\r\n  startSample: number;\r\n  /** 结束样本索引 */\r\n  endSample: number;\r\n  /** 区域名称 */\r\n  name?: string;\r\n  /** 区域描述 */\r\n  description?: string;\r\n}\r\n"],"version":3}