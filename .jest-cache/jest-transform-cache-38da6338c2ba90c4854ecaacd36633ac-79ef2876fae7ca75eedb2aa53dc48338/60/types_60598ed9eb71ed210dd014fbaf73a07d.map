{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/decoders/types.ts","mappings":";AAAA;;;GAGG;;;AAwGH;;;GAGG;AACH,IAAY,iBAMX;AAND,WAAY,iBAAiB;IAC3B,qEAAc,CAAA;IACd,6DAAU,CAAA;IACV,6DAAU,CAAA;IACV,2DAAS,CAAA;IACT,yDAAQ,CAAA,CAAC,cAAc;AACzB,CAAC,EANW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAM5B","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/decoders/types.ts"],"sourcesContent":["/**\n * 解码器类型定义\n * 基于 @logicanalyzer/Software 的 SigrokDecoderBridge 架构设计\n */\n\n/**\n * 解码器通道定义\n * 对应原软件的 SigrokChannel\n */\nexport interface DecoderChannel {\n  /** 通道标识符 */\n  id: string;\n  /** 通道名称 */\n  name: string;\n  /** 通道描述 */\n  desc: string;\n  /** 是否为必需通道 */\n  required?: boolean;\n  /** 通道索引 */\n  index?: number;\n}\n\n/**\n * 解码器选项定义\n * 对应原软件的 SigrokOption\n */\nexport interface DecoderOption {\n  /** 选项标识符 */\n  id: string;\n  /** 选项描述 */\n  desc: string;\n  /** 默认值 */\n  default?: any;\n  /** 可选值列表 */\n  values?: string[];\n  /** 选项类型 */\n  type?: 'string' | 'int' | 'float' | 'bool' | 'list';\n}\n\n/**\n * 解码器选项值\n * 对应原软件的 SigrokOptionValue\n */\nexport interface DecoderOptionValue {\n  /** 选项索引 */\n  optionIndex: number;\n  /** 选项值 */\n  value: any;\n}\n\n/**\n * 解码器通道选择\n * 对应原软件的 SigrokSelectedChannel\n */\nexport interface DecoderSelectedChannel {\n  /** 采集通道索引 */\n  captureIndex: number;\n  /** 解码器通道索引 */\n  decoderIndex: number;\n  /** 通道名称 - 兼容字段 */\n  name?: string;\n  /** 通道编号 - 兼容字段 */\n  channel?: number;\n}\n\n/**\n * 等待条件类型\n * 对应原软件的 WaitConditionType\n */\nexport type WaitConditionType =\n  | 'skip' // 跳过样本\n  | 'low' // 低电平 'l'\n  | 'high' // 高电平 'h'\n  | 'rising' // 上升沿 'r'\n  | 'falling' // 下降沿 'f'\n  | 'edge' // 任意边沿 'e'\n  | 'stable'; // 稳定电平 's'\n\n/**\n * 等待条件定义\n * 基于原软件的 wait() 方法参数\n */\nexport interface WaitCondition {\n  [channelIndex: number]: WaitConditionType;\n}\n\n/**\n * 多条件等待数组\n * 对应原软件的 wait([condition1, condition2, ...]) 用法\n */\nexport type WaitConditions = WaitCondition | WaitCondition[];\n\n/**\n * 等待结果\n * 对应原软件的 wait() 方法返回值\n */\nexport interface WaitResult {\n  /** 匹配的引脚状态数组 */\n  pins: number[];\n  /** 样本编号 */\n  sampleNumber: number;\n  /** 匹配的条件数组 (对应原版的 self.matched) */\n  matched?: boolean[];\n  /** 匹配的条件索引 (哪一个条件匹配了) */\n  matchedIndex?: number;\n}\n\n/**\n * 解码器输出类型\n * 对应原软件的 AnnotationOutputType\n */\nexport enum DecoderOutputType {\n  ANNOTATION = 0, // OUTPUT_ANN\n  PYTHON = 1, // OUTPUT_PYTHON\n  BINARY = 2, // OUTPUT_BINARY\n  LOGIC = 3, // OUTPUT_LOGIC\n  META = 4 // OUTPUT_META\n}\n\n/**\n * 解码器输出数据\n * 对应原软件的 put() 方法参数\n */\nexport interface DecoderOutput {\n  /** 输出类型 */\n  type: DecoderOutputType;\n  /** 注释类型ID */\n  annotationType?: number;\n  /** 输出值数组 */\n  values: string[];\n  /** 原始数据 */\n  rawData?: any;\n}\n\n/**\n * 解码器结果\n * 对应原软件的 SigrokAnnotationSegment\n */\nexport interface DecoderResult {\n  /** 开始样本 */\n  startSample: number;\n  /** 结束样本 */\n  endSample: number;\n  /** 注释类型 */\n  annotationType: number;\n  /** 显示值数组（从详细到简化） */\n  values: string[];\n  /** 原始数据 */\n  rawData?: any;\n  /** 形状类型 */\n  shape?: 'hexagon' | 'rectangle' | 'diamond';\n}\n\n/**\n * 解码器注释定义\n * 对应原软件的 SigrokAnnotation\n */\nexport interface DecoderAnnotation {\n  /** 注释名称 */\n  name: string;\n  /** 结果段数组 */\n  segments: DecoderResult[];\n}\n\n/**\n * 解码器信息\n * 用于解码器管理和显示\n */\nexport interface DecoderInfo {\n  /** 解码器标识符 */\n  id: string;\n  /** 解码器名称 */\n  name: string;\n  /** 完整名称 */\n  longname: string;\n  /** 描述 */\n  description: string;\n  /** 许可证 */\n  license: string;\n  /** 输入类型 */\n  inputs: string[];\n  /** 输出类型 */\n  outputs: string[];\n  /** 标签 */\n  tags: string[];\n  /** 通道定义 */\n  channels: DecoderChannel[];\n  /** 配置选项 */\n  options: DecoderOption[];\n  /** 注释类型定义 */\n  annotations: Array<[string, string, string?]>;\n  /** 注释行定义 */\n  annotationRows?: Array<[string, string, number[]]>;\n}\n\n/**\n * 通道数据接口\n * 对应原软件的 AnalyzerChannel\n */\nexport interface ChannelData {\n  /** 通道编号 */\n  channelNumber: number;\n  /** 通道名称 */\n  channelName: string;\n  /** 样本数据 */\n  samples: Uint8Array;\n  /** 是否隐藏 */\n  hidden?: boolean;\n}\n"],"version":3}