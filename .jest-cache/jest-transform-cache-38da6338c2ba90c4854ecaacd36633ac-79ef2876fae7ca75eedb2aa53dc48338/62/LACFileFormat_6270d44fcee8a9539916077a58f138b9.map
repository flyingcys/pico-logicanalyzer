{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/LACFileFormat.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/LACFileFormat.ts"],"sourcesContent":["/**\r\n * .lac 文件格式读写处理器\r\n * 基于原版 C# ExportedCapture 的精确实现\r\n * 与原软件 100% 兼容\r\n */\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport {\r\n  TriggerType,\r\n  DeviceInfo\r\n} from './AnalyzerTypes';\r\nimport {\r\n  CaptureSession,\r\n  AnalyzerChannel,\r\n  BurstInfo\r\n} from './CaptureModels';\r\n\r\n/**\r\n * 样本区域信息 - 对应C# SampleRegion\r\n */\r\nexport interface SampleRegion {\r\n  FirstSample: number;\r\n  LastSample: number;\r\n  RegionName: string;\r\n  R: number;\r\n  G: number;\r\n  B: number;\r\n  A: number;\r\n}\r\n\r\n/**\r\n * 导出的采集数据 - 精确对应C# ExportedCapture\r\n */\r\nexport interface ExportedCapture {\r\n  Settings: CaptureSession; // 对应C# ExportedCapture.Settings\r\n  Samples?: string[]; // 对应C# ExportedCapture.Samples (UInt128[]) - 存储为十六进制字符串\r\n  SelectedRegions?: SampleRegion[]; // 对应C# ExportedCapture.SelectedRegions\r\n}\r\n\r\n/**\r\n * .lac 文件操作结果\r\n */\r\nexport interface LACFileResult {\r\n  success: boolean;\r\n  filePath?: string;\r\n  data?: ExportedCapture;\r\n  error?: string;\r\n  fileSize?: number;\r\n}\r\n\r\n/**\r\n * .lac 文件格式处理器 - 简化版，与C#原版兼容\r\n */\r\nexport class LACFileFormat {\r\n  /**\r\n   * 保存.lac文件 - 对应C# MainWindow中的保存逻辑\r\n   */\r\n  public static async save(\r\n    filePath: string,\r\n    captureSession: CaptureSession,\r\n    selectedRegions?: Array<{\r\n      firstSample: number;\r\n      lastSample: number;\r\n      regionName: string;\r\n      color: { r: number; g: number; b: number; a: number };\r\n    }>,\r\n    includeRawSamples: boolean = false\r\n  ): Promise<LACFileResult> {\r\n    try {\r\n      // 构建ExportedCapture对象，与C#版本完全对应\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: captureSession\r\n      };\r\n\r\n      // 添加原始样本数据（如果需要）- 对应C# ExportedCapture.Samples\r\n      if (includeRawSamples && captureSession.captureChannels.length > 0) {\r\n        exportedCapture.Samples = this.packChannelSamplesToUInt128Array(captureSession.captureChannels);\r\n      }\r\n\r\n      // 添加选择区域（如果有）\r\n      if (selectedRegions && selectedRegions.length > 0) {\r\n        exportedCapture.SelectedRegions = selectedRegions.map(region => ({\r\n          FirstSample: region.firstSample,\r\n          LastSample: region.lastSample,\r\n          RegionName: region.regionName,\r\n          R: region.color.r,\r\n          G: region.color.g,\r\n          B: region.color.b,\r\n          A: region.color.a\r\n        }));\r\n      }\r\n\r\n      // 序列化为JSON - 使用与C#版本相同的方式\r\n      const jsonContent = JSON.stringify(exportedCapture, this.sampleRegionReplacer, 2);\r\n\r\n      // 确保目录存在\r\n      const dir = path.dirname(filePath);\r\n      if (!fs.existsSync(dir)) {\r\n        await fs.promises.mkdir(dir, { recursive: true });\r\n      }\r\n\r\n      // 写入文件\r\n      await fs.promises.writeFile(filePath, jsonContent, 'utf-8');\r\n      const fileSize = Buffer.byteLength(jsonContent, 'utf-8');\r\n\r\n      return {\r\n        success: true,\r\n        filePath,\r\n        data: exportedCapture,\r\n        fileSize\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: `Failed to save file: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载.lac文件 - 对应C# MainWindow中的加载逻辑\r\n   */\r\n  public static async load(filePath: string): Promise<LACFileResult> {\r\n    try {\r\n      // 检查文件是否存在\r\n      if (!fs.existsSync(filePath)) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`\r\n        };\r\n      }\r\n\r\n      // 读取文件内容\r\n      const fileContent = await fs.promises.readFile(filePath, 'utf-8');\r\n      const fileSize = Buffer.byteLength(fileContent, 'utf-8');\r\n\r\n      // 解析JSON - 使用与C#版本相同的方式\r\n      let exportedCapture: ExportedCapture;\r\n      try {\r\n        exportedCapture = JSON.parse(fileContent);\r\n\r\n        // 手动处理SampleRegion如果需要\r\n        if (exportedCapture.SelectedRegions) {\r\n          exportedCapture.SelectedRegions = this.sampleRegionReviver('SelectedRegions', exportedCapture.SelectedRegions) as SampleRegion[];\r\n        }\r\n      } catch (parseError) {\r\n        return {\r\n          success: false,\r\n          error: `Invalid JSON format: ${parseError instanceof Error ? parseError.message : 'Unknown parse error'}`\r\n        };\r\n      }\r\n\r\n      // 基本验证\r\n      if (!exportedCapture.Settings) {\r\n        return {\r\n          success: false,\r\n          error: 'Invalid .lac file: missing Settings'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        filePath,\r\n        data: exportedCapture,\r\n        fileSize\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: `Failed to load file: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * JSON序列化时的自定义处理器 - 对应C# SampleRegionConverter.WriteJson\r\n   */\r\n  private static sampleRegionReplacer(key: string, value: any): any {\r\n    // 处理SampleRegion的颜色序列化 - 对应C#的颜色处理\r\n    if (key === 'SelectedRegions' && Array.isArray(value)) {\r\n      return value.map((region: any) => {\r\n        if (region && typeof region === 'object') {\r\n          // 确保颜色字段以正确的格式序列化\r\n          return {\r\n            FirstSample: region.FirstSample,\r\n            LastSample: region.LastSample,\r\n            RegionName: region.RegionName,\r\n            R: region.R,\r\n            G: region.G,\r\n            B: region.B,\r\n            A: region.A\r\n          };\r\n        }\r\n        return region;\r\n      });\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * JSON反序列化时的自定义处理器 - 对应C# SampleRegionConverter.ReadJson\r\n   */\r\n  private static sampleRegionReviver(key: string, value: any): any {\r\n    // 处理SampleRegion的颜色反序列化\r\n    if (key === 'SelectedRegions' && Array.isArray(value)) {\r\n      return value.map((region: any) => {\r\n        if (region && typeof region === 'object' &&\r\n            'R' in region && 'G' in region && 'B' in region && 'A' in region) {\r\n          // 恢复颜色对象结构\r\n          return {\r\n            FirstSample: region.FirstSample,\r\n            LastSample: region.LastSample,\r\n            RegionName: region.RegionName,\r\n            R: region.R,\r\n            G: region.G,\r\n            B: region.B,\r\n            A: region.A\r\n          };\r\n        }\r\n        return region;\r\n      });\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 转换ExportedCapture为CaptureSession - 包含样本数据提取\r\n   */\r\n  public static convertToCaptureSession(exportedCapture: ExportedCapture): CaptureSession {\r\n    if (!exportedCapture) {\r\n      throw new Error('ExportedCapture cannot be null or undefined');\r\n    }\r\n\r\n    const captureSession = exportedCapture.Settings;\r\n\r\n    // 如果有原始样本数据，提取到各个通道 - 对应C# ExtractSamples方法\r\n    if (exportedCapture.Samples && exportedCapture.Samples.length > 0) {\r\n      this.extractSamplesFromUInt128Array(captureSession.captureChannels, exportedCapture.Samples);\r\n    }\r\n\r\n    return captureSession;\r\n  }\r\n\r\n  /**\r\n   * 从CaptureSession创建ExportedCapture\r\n   */\r\n  public static createFromCaptureSession(\r\n    captureSession: CaptureSession,\r\n    selectedRegions?: Array<{\r\n      firstSample: number;\r\n      lastSample: number;\r\n      regionName: string;\r\n      color: { r: number; g: number; b: number; a: number };\r\n    }>,\r\n    includeRawSamples: boolean = false\r\n  ): ExportedCapture {\r\n    if (!captureSession) {\r\n      throw new Error('CaptureSession cannot be null or undefined');\r\n    }\r\n\r\n    const exportedCapture: ExportedCapture = {\r\n      Settings: captureSession\r\n    };\r\n\r\n    // 添加原始样本数据（如果需要）\r\n    if (includeRawSamples && captureSession.captureChannels.length > 0) {\r\n      exportedCapture.Samples = this.packChannelSamplesToUInt128Array(captureSession.captureChannels);\r\n    }\r\n\r\n    if (selectedRegions && selectedRegions.length > 0) {\r\n      exportedCapture.SelectedRegions = selectedRegions.map(region => ({\r\n        FirstSample: region.firstSample,\r\n        LastSample: region.lastSample,\r\n        RegionName: region.regionName,\r\n        R: region.color.r,\r\n        G: region.color.g,\r\n        B: region.color.b,\r\n        A: region.color.a\r\n      }));\r\n    }\r\n\r\n    return exportedCapture;\r\n  }\r\n\r\n  /**\r\n   * 将通道样本数据打包为UInt128数组 - 对应C#的相反操作\r\n   */\r\n  private static packChannelSamplesToUInt128Array(channels: AnalyzerChannel[]): string[] {\r\n    if (channels.length === 0 || !channels[0].samples) {\r\n      return [];\r\n    }\r\n\r\n    const sampleCount = channels[0].samples.length;\r\n    const uint128Array: string[] = [];\r\n\r\n    for (let sampleIndex = 0; sampleIndex < sampleCount; sampleIndex++) {\r\n      // 创建128位值 - 使用BigInt处理大整数\r\n      let uint128Value = BigInt(0);\r\n\r\n      for (let channelIndex = 0; channelIndex < Math.min(channels.length, 128); channelIndex++) {\r\n        const channel = channels[channelIndex];\r\n        if (channel.samples && channel.samples[sampleIndex]) {\r\n          // 设置对应的位 - (1 << channelIndex)\r\n          uint128Value |= BigInt(1) << BigInt(channelIndex);\r\n        }\r\n      }\r\n\r\n      // 转换为十六进制字符串存储\r\n      uint128Array.push(uint128Value.toString(16).padStart(32, '0'));\r\n    }\r\n\r\n    return uint128Array;\r\n  }\r\n\r\n  /**\r\n   * 从UInt128数组提取通道样本数据 - 对应C# ExtractSamples方法\r\n   */\r\n  private static extractSamplesFromUInt128Array(channels: AnalyzerChannel[], uint128Array: string[]): void {\r\n    for (let channelIndex = 0; channelIndex < channels.length; channelIndex++) {\r\n      const channel = channels[channelIndex];\r\n      if (!channel) continue;\r\n\r\n      // 创建位掩码 - 对应C# UInt128 mask = (UInt128)1 << ChannelIndex\r\n      const mask = BigInt(1) << BigInt(channelIndex);\r\n\r\n      // 提取样本数据\r\n      const samples = new Uint8Array(uint128Array.length);\r\n\r\n      for (let sampleIndex = 0; sampleIndex < uint128Array.length; sampleIndex++) {\r\n        try {\r\n          // 从十六进制字符串还原BigInt\r\n          const uint128Value = BigInt(`0x${uint128Array[sampleIndex]}`);\r\n\r\n          // 检查对应位是否为1 - 对应C# (s & mask) != 0 ? (byte)1 : (byte)0\r\n          samples[sampleIndex] = (uint128Value & mask) !== BigInt(0) ? 1 : 0;\r\n        } catch (error) {\r\n          // 处理无效的十六进制字符串，设置为0\r\n          samples[sampleIndex] = 0;\r\n        }\r\n      }\r\n\r\n      channel.samples = samples;\r\n    }\r\n  }\r\n}\r\n"],"version":3}