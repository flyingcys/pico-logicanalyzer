1f41c41f746943db717aa5c34446a032
"use strict";
/**
 * TypeScript解码器基类
 * 基于 @logicanalyzer/Software 的 SigrokDecoderBase 架构
 * 实现纯TypeScript零依赖的协议解码功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecoderBase = void 0;
const types_1 = require("./types");
/**
 * 解码器抽象基类
 * 所有协议解码器必须继承此基类
 */
class DecoderBase {
    constructor() {
        // 解码状态管理
        this.sampleIndex = 0;
        this.sampleRate = 0;
        this.channelData = [];
        this.results = [];
        this.registeredOutputs = new Map();
        this.currentState = new Map();
        this.lastState = new Map();
    }
    /**
     * 初始化解码器
     * 对应原软件的 start() 方法
     */
    start() {
        // 注册默认输出类型
        this.register(types_1.DecoderOutputType.ANNOTATION);
        this.register(types_1.DecoderOutputType.PYTHON);
        // 重置状态
        this.reset();
    }
    /**
     * 重置解码器状态
     * 对应原软件的 reset() 方法
     */
    reset() {
        this.sampleIndex = 0;
        this.results = [];
        this.currentState.clear();
        this.lastState.clear();
    }
    /**
     * 注册输出类型
     * 对应原软件的 register() 方法
     * @param outputType 输出类型
     * @returns 输出ID
     */
    register(outputType) {
        const outputId = this.registeredOutputs.size;
        this.registeredOutputs.set(outputType, outputId);
        return outputId;
    }
    /**
     * 等待指定的通道条件 - 核心API
     * 对应原软件的 Wait() 方法
     * @param conditions 等待条件（单个条件或条件数组）
     * @returns 等待结果
     */
    wait(conditions) {
        if (this.channelData.length === 0) {
            throw new Error('No channel data available');
        }
        const maxSamples = this.channelData[0].length;
        // 保存上一个状态
        this.saveCurrentState();
        // 转换为条件数组格式
        const conditionsArray = Array.isArray(conditions) ? conditions : [conditions];
        // 如果是单个跳过条件，直接返回当前状态
        if (conditionsArray.length === 1 && this.isSkipCondition(conditionsArray[0])) {
            return {
                pins: this.getCurrentPins(),
                sampleNumber: this.sampleIndex
            };
        }
        // 主搜索循环
        while (this.sampleIndex < maxSamples) {
            // 更新当前状态
            this.updateCurrentState();
            // 检查每个条件是否匹配
            for (let i = 0; i < conditionsArray.length; i++) {
                const matched = this.checkConditions(conditionsArray[i]);
                if (matched.every(m => m)) {
                    // 创建 matched 数组，对应原版的 self.matched
                    const matchedArray = new Array(conditionsArray.length).fill(false);
                    matchedArray[i] = true;
                    return {
                        pins: this.getCurrentPins(),
                        sampleNumber: this.sampleIndex,
                        matched: matchedArray,
                        matchedIndex: i
                    };
                }
            }
            // 移动到下一个样本
            this.sampleIndex++;
        }
        // 到达样本末尾
        throw new Error('End of samples reached');
    }
    /**
     * 输出解码结果 - 核心API
     * 对应原软件的 Put() 方法
     * @param startSample 开始样本
     * @param endSample 结束样本
     * @param data 输出数据
     */
    put(startSample, endSample, data) {
        const result = {
            startSample,
            endSample,
            annotationType: data.annotationType || 0,
            values: data.values,
            rawData: data.rawData,
            shape: 'hexagon' // 默认形状
        };
        this.results.push(result);
    }
    /**
     * 检查是否还有更多样本
     * @returns 是否有更多样本
     */
    hasMoreSamples() {
        return this.sampleIndex < (this.channelData[0]?.length || 0);
    }
    /**
     * 获取当前所有通道的引脚状态
     * @returns 引脚状态数组
     */
    getCurrentPins() {
        return this.channelData.map(channel => this.sampleIndex < channel.length ? channel[this.sampleIndex] : 0);
    }
    /**
     * 检查条件是否匹配
     * @param conditions 等待条件
     * @returns 匹配结果数组
     */
    checkConditions(conditions) {
        const results = [];
        for (const [channelIndex, conditionType] of Object.entries(conditions)) {
            const chIndex = parseInt(channelIndex);
            const matched = this.checkSingleCondition(chIndex, conditionType);
            results.push(matched);
        }
        return results;
    }
    /**
     * 检查单个通道条件
     * @param channelIndex 通道索引
     * @param conditionType 条件类型
     * @returns 是否匹配
     */
    checkSingleCondition(channelIndex, conditionType) {
        if (channelIndex >= this.channelData.length) {
            return false;
        }
        const currentValue = this.currentState.get(channelIndex) || 0;
        // 对于第一个样本，如果lastState中没有值，我们假设之前的值是0
        const lastValue = this.lastState.has(channelIndex) ? this.lastState.get(channelIndex) : 0;
        switch (conditionType) {
            case 'low':
                return currentValue === 0;
            case 'high':
                return currentValue === 1;
            case 'rising':
                return lastValue === 0 && currentValue === 1;
            case 'falling':
                return lastValue === 1 && currentValue === 0;
            case 'edge':
                return lastValue !== currentValue;
            case 'stable':
                return lastValue === currentValue;
            case 'skip':
                return true;
            default:
                return false;
        }
    }
    /**
     * 保存当前状态为上一状态
     */
    saveCurrentState() {
        this.lastState.clear();
        for (const [key, value] of this.currentState) {
            this.lastState.set(key, value);
        }
    }
    /**
     * 更新当前状态
     */
    updateCurrentState() {
        this.saveCurrentState();
        this.currentState.clear();
        for (let i = 0; i < this.channelData.length; i++) {
            const value = this.sampleIndex < this.channelData[i].length ? this.channelData[i][this.sampleIndex] : 0;
            this.currentState.set(i, value);
        }
    }
    /**
     * 检查是否为跳过条件
     * @param conditions 条件
     * @returns 是否为跳过条件
     */
    isSkipCondition(conditions) {
        const entries = Object.entries(conditions);
        return entries.length === 1 && entries[0][0] === '0' && entries[0][1] === 'skip';
    }
    /**
     * 检查引脚状态是否匹配条件
     * @param pins 当前引脚状态
     * @param conditions 条件
     * @returns 是否匹配
     */
    matchesCondition(pins, conditions) {
        for (const [channelIndexStr, conditionType] of Object.entries(conditions)) {
            const channelIndex = parseInt(channelIndexStr);
            if (channelIndex >= pins.length) {
                return false;
            }
            const currentValue = pins[channelIndex];
            const lastValue = this.lastState.get(channelIndex) || 0;
            let matched = false;
            switch (conditionType) {
                case 'low':
                    matched = currentValue === 0;
                    break;
                case 'high':
                    matched = currentValue === 1;
                    break;
                case 'rising':
                    matched = lastValue === 0 && currentValue === 1;
                    break;
                case 'falling':
                    matched = lastValue === 1 && currentValue === 0;
                    break;
                case 'edge':
                    matched = lastValue !== currentValue;
                    break;
                case 'stable':
                    matched = lastValue === currentValue;
                    break;
                case 'skip':
                    matched = true;
                    break;
                default:
                    matched = false;
            }
            if (!matched) {
                return false;
            }
        }
        return true;
    }
    /**
     * 准备通道数据
     * @param channels 通道数据
     * @param channelMapping 通道映射
     */
    prepareChannelData(channels, channelMapping) {
        this.channelData = [];
        // 确定最大解码器索引以初始化数组大小
        const maxDecoderIndex = channelMapping.reduce((max, mapping) => Math.max(max, mapping.decoderIndex), -1);
        // 初始化所有通道数据为空数组
        for (let i = 0; i <= maxDecoderIndex; i++) {
            this.channelData[i] = new Uint8Array(channels[0]?.samples?.length || 0);
        }
        // 填充实际的通道数据
        for (const mapping of channelMapping) {
            if (mapping.captureIndex < channels.length && channels[mapping.captureIndex].samples) {
                this.channelData[mapping.decoderIndex] = channels[mapping.captureIndex].samples;
            }
        }
    }
    /**
     * 获取解码器信息
     * @returns 解码器信息
     */
    getInfo() {
        return {
            id: this.id,
            name: this.name,
            longname: this.longname,
            description: this.desc,
            license: this.license,
            inputs: this.inputs,
            outputs: this.outputs,
            tags: this.tags,
            channels: this.channels,
            options: this.options,
            annotations: this.annotations,
            annotationRows: this.annotationRows
        };
    }
    /**
     * 验证选项配置
     * @param options 选项值
     * @param selectedChannels 选中通道
     * @param channels 通道数据
     * @returns 是否有效
     */
    validateOptions(options, selectedChannels, _channels) {
        // 验证必需通道是否都已选择
        const requiredChannels = this.channels.filter(ch => ch.required);
        for (const reqChannel of requiredChannels) {
            const hasChannel = selectedChannels.some(sel => sel.decoderIndex === (reqChannel.index || 0));
            if (!hasChannel) {
                return false;
            }
        }
        // 验证选项值
        for (const option of options) {
            if (option.optionIndex >= this.options.length) {
                return false;
            }
            // 可以添加更多选项验证逻辑
        }
        return true;
    }
}
exports.DecoderBase = DecoderBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,