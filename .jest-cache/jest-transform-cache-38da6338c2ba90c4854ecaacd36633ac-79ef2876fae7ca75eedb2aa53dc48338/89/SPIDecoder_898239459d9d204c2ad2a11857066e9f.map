{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/decoders/protocols/SPIDecoder.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/decoders/protocols/SPIDecoder.ts"],"sourcesContent":["/**\r\n * SPI协议解码器\r\n * 基于 @logicanalyzer/Software 的 spi/pd.py 精确移植\r\n * 实现完整的SPI协议解码功能\r\n */\r\n\r\nimport { DecoderBase } from '../DecoderBase';\r\nimport {\r\n  DecoderChannel,\r\n  DecoderOption,\r\n  DecoderOptionValue,\r\n  DecoderResult,\r\n  DecoderOutputType,\r\n  ChannelData,\r\n  WaitConditions,\r\n  WaitCondition\r\n} from '../types';\r\n\r\n/**\r\n * SPI模式定义\r\n * 基于CPOL和CPHA组合\r\n */\r\nconst _SPI_MODES = {\r\n  '0,0': 0, // Mode 0: CPOL=0, CPHA=0\r\n  '0,1': 1, // Mode 1: CPOL=0, CPHA=1\r\n  '1,0': 2, // Mode 2: CPOL=1, CPHA=0\r\n  '1,1': 3  // Mode 3: CPOL=1, CPHA=1\r\n} as const;\r\n\r\n/**\r\n * 数据传输信息\r\n * 对应原解码器的 Data namedtuple\r\n */\r\ninterface SPIDataTransfer {\r\n  startSample: number;\r\n  endSample: number;\r\n  value: number;\r\n}\r\n\r\n/**\r\n * 位信息结构\r\n * 对应原解码器的位数组\r\n */\r\ninterface SPIBitInfo {\r\n  value: number;\r\n  startSample: number;\r\n  endSample: number;\r\n}\r\n\r\n/**\r\n * SPI协议解码器实现\r\n * 对应原软件的 spi Decoder 类\r\n */\r\nexport class SPIDecoder extends DecoderBase {\r\n  // 解码器元数据 - 完全匹配原Python解码器\r\n  readonly id = 'spi';\r\n  readonly name = 'SPI';\r\n  readonly longname = 'Serial Peripheral Interface';\r\n  readonly desc = 'Full-duplex, synchronous, serial bus.';\r\n  readonly license = 'gplv2+';\r\n  readonly inputs = ['logic'];\r\n  readonly outputs = ['spi'];\r\n  readonly tags = ['Embedded/industrial'];\r\n\r\n  // 通道定义 - 匹配原解码器\r\n  readonly channels: DecoderChannel[] = [\r\n    { id: 'clk', name: 'CLK', desc: 'Clock', required: true, index: 0 },\r\n    { id: 'miso', name: 'MISO', desc: 'Master in, slave out', required: false, index: 1 },\r\n    { id: 'mosi', name: 'MOSI', desc: 'Master out, slave in', required: false, index: 2 },\r\n    { id: 'cs', name: 'CS#', desc: 'Chip-select', required: false, index: 3 }\r\n  ];\r\n\r\n  // 配置选项 - 匹配原解码器\r\n  readonly options: DecoderOption[] = [\r\n    {\r\n      id: 'cs_polarity',\r\n      desc: 'CS# polarity',\r\n      default: 'active-low',\r\n      values: ['active-low', 'active-high'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'cpol',\r\n      desc: 'Clock polarity',\r\n      default: 0,\r\n      values: ['0', '1'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'cpha',\r\n      desc: 'Clock phase',\r\n      default: 0,\r\n      values: ['0', '1'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'bitorder',\r\n      desc: 'Bit order',\r\n      default: 'msb-first',\r\n      values: ['msb-first', 'lsb-first'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'wordsize',\r\n      desc: 'Word size',\r\n      default: 8,\r\n      type: 'int'\r\n    }\r\n  ];\r\n\r\n  // 注释类型定义 - 匹配原解码器的annotations\r\n  readonly annotations: Array<[string, string, string?]> = [\r\n    ['miso-data', 'MISO data'],\r\n    ['mosi-data', 'MOSI data'],\r\n    ['miso-bit', 'MISO bit'],\r\n    ['mosi-bit', 'MOSI bit'],\r\n    ['warning', 'Warning'],\r\n    ['miso-transfer', 'MISO transfer'],\r\n    ['mosi-transfer', 'MOSI transfer']\r\n  ];\r\n\r\n  // 注释行定义 - 匹配原解码器的annotation_rows\r\n  readonly annotationRows: Array<[string, string, number[]]> = [\r\n    ['miso-bits', 'MISO bits', [2]],\r\n    ['miso-data-vals', 'MISO data', [0]],\r\n    ['miso-transfers', 'MISO transfers', [5]],\r\n    ['mosi-bits', 'MOSI bits', [3]],\r\n    ['mosi-data-vals', 'MOSI data', [1]],\r\n    ['mosi-transfers', 'MOSI transfers', [6]],\r\n    ['other', 'Other', [4]]\r\n  ];\r\n\r\n  // 解码器状态变量\r\n  private bitCount = 0;\r\n  private misoData = 0;\r\n  private mosiData = 0;\r\n\r\n  private misoBits: SPIBitInfo[] = [];\r\n  private mosiBits: SPIBitInfo[] = [];\r\n  private misoBytes: SPIDataTransfer[] = [];\r\n  private mosiBytes: SPIDataTransfer[] = [];\r\n\r\n  private ssBlock = -1;\r\n  private ssTransfer = -1;\r\n  private csWasDeasserted = false;\r\n  private lastCS = -1; // 跟踪上一次CS值\r\n\r\n  // 通道可用性标志\r\n  private haveMiso = false;\r\n  private haveMosi = false;\r\n  private haveCS = false;\r\n\r\n  // 选项值\r\n  private csPolarity = 'active-low';\r\n  private cpol = 0;\r\n  private cpha = 0;\r\n  private bitOrder = 'msb-first';\r\n  private wordSize = 8;\r\n  private byteWidth = 1; // (wordSize + 7) // 8\r\n\r\n  /**\r\n   * 主解码方法\r\n   * 对应原解码器的 decode() 方法\r\n   */\r\n  decode(\r\n    sampleRate: number,\r\n    channels: ChannelData[],\r\n    options: DecoderOptionValue[]\r\n  ): DecoderResult[] {\r\n    // 初始化\r\n    this.sampleRate = sampleRate;\r\n\r\n    // 检查CLK是否可用（必需）\r\n    if (channels.length === 0 || !channels[0].samples || channels[0].samples.length === 0) {\r\n      return []; // 没有数据时返回空结果，不抛出错误\r\n    }\r\n\r\n    // 检查通道可用性（对应原版 lines 322-326）\r\n    this.haveMiso = channels.length > 1 && channels[1].samples && channels[1].samples.length > 0;\r\n    this.haveMosi = channels.length > 2 && channels[2].samples && channels[2].samples.length > 0;\r\n    this.haveCS = channels.length > 3 && channels[3].samples && channels[3].samples.length > 0;\r\n\r\n    // 验证至少有MISO或MOSI（对应原版 lines 324-325）\r\n    if (!this.haveMiso && !this.haveMosi) {\r\n      throw new Error('Either MISO or MOSI (or both) pins required.');\r\n    }\r\n\r\n    // 准备通道数据映射\r\n    const channelMapping = [\r\n      { captureIndex: 0, decoderIndex: 0 } // CLK - 必需\r\n    ];\r\n\r\n    if (this.haveMiso) {\r\n      channelMapping.push({ captureIndex: 1, decoderIndex: 1 }); // MISO\r\n    }\r\n    if (this.haveMosi) {\r\n      channelMapping.push({ captureIndex: 2, decoderIndex: 2 }); // MOSI\r\n    }\r\n    if (this.haveCS) {\r\n      channelMapping.push({ captureIndex: 3, decoderIndex: 3 }); // CS\r\n    }\r\n\r\n    this.prepareChannelData(channels, channelMapping);\r\n\r\n    // 处理选项\r\n    this.processOptions(options);\r\n\r\n    // 开始解码\r\n    this.start();\r\n    this.reset();\r\n\r\n    // 如果没有CS信号，发送初始CS状态（对应原版 lines 327-328）\r\n    if (!this.haveCS) {\r\n      this.putCSChange(null, null);\r\n    }\r\n\r\n    // 构造等待条件（对应原版 lines 333-336）\r\n    // 我们想要所有CLK变化，如果使用CS的话还要所有CS变化\r\n    const waitConditions: WaitCondition[] = [\r\n      { 0: 'edge' } // 时钟的所有边沿\r\n    ];\r\n\r\n    let csConditionIndex = -1;\r\n    if (this.haveCS) {\r\n      csConditionIndex = waitConditions.length;\r\n      waitConditions.push({ 3: 'edge' }); // CS的所有边沿\r\n    }\r\n\r\n    // \"像素兼容性\"获取第一个样本（对应原版 lines 338-343）\r\n    if (this.hasMoreSamples()) {\r\n      const pins = this.getCurrentPins();\r\n      const clk = pins[0] || 0;\r\n      const miso = pins[1] || 0;\r\n      const mosi = pins[2] || 0;\r\n      const cs = pins[3] || 0;\r\n\r\n      this.findClockEdge(miso, mosi, clk, cs, true, null);\r\n    }\r\n\r\n    // 主解码循环（对应原版 lines 345-347）\r\n    while (this.hasMoreSamples()) {\r\n      try {\r\n        const waitResult = this.wait(waitConditions);\r\n        const matched = waitResult.matched!;\r\n\r\n        const clk = waitResult.pins[0] || 0;\r\n        const miso = waitResult.pins[1] || 0;\r\n        const mosi = waitResult.pins[2] || 0;\r\n        const cs = waitResult.pins[3] || 0;\r\n\r\n        this.findClockEdge(miso, mosi, clk, cs, false, matched);\r\n      } catch (error) {\r\n        if ((error as Error).message === 'End of samples reached') {\r\n          break;\r\n        }\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    return this.results;\r\n  }\r\n\r\n  /**\r\n   * 处理配置选项\r\n   */\r\n  private processOptions(options: DecoderOptionValue[]): void {\r\n    for (const option of options) {\r\n      switch (option.optionIndex) {\r\n        case 0: // cs_polarity\r\n          this.csPolarity = option.value as string;\r\n          break;\r\n        case 1: // cpol\r\n          this.cpol = parseInt(option.value as string);\r\n          break;\r\n        case 2: // cpha\r\n          this.cpha = parseInt(option.value as string);\r\n          break;\r\n        case 3: // bitorder\r\n          this.bitOrder = option.value as string;\r\n          break;\r\n        case 4: // wordsize\r\n          this.wordSize = option.value as number;\r\n          this.byteWidth = Math.floor((this.wordSize + 7) / 8);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查CS是否被断言\r\n   * 对应原解码器的 cs_asserted()\r\n   */\r\n  private csAsserted(cs: number): boolean {\r\n    const activeLow = this.csPolarity === 'active-low';\r\n    return activeLow ? (cs === 0) : (cs === 1);\r\n  }\r\n\r\n  /**\r\n   * 处理单个位\r\n   * 对应原解码器的 handle_bit()\r\n   */\r\n  private handleBit(miso: number, mosi: number, clk: number, cs: number): void {\r\n    // 如果是数据字的第一位，保存其样本编号\r\n    if (this.bitCount === 0) {\r\n      this.ssBlock = this.sampleIndex;\r\n      this.csWasDeasserted = this.haveCS ? !this.csAsserted(cs) : false;\r\n    }\r\n\r\n    // 接收MISO位到移位寄存器\r\n    if (this.haveMiso) {\r\n      if (this.bitOrder === 'msb-first') {\r\n        this.misoData |= miso << (this.wordSize - 1 - this.bitCount);\r\n      } else {\r\n        this.misoData |= miso << this.bitCount;\r\n      }\r\n    }\r\n\r\n    // 接收MOSI位到移位寄存器\r\n    if (this.haveMosi) {\r\n      if (this.bitOrder === 'msb-first') {\r\n        this.mosiData |= mosi << (this.wordSize - 1 - this.bitCount);\r\n      } else {\r\n        this.mosiData |= mosi << this.bitCount;\r\n      }\r\n    }\r\n\r\n    // 估算此位的结束样本\r\n    let es = this.sampleIndex;\r\n    if (this.bitCount > 0) {\r\n      if (this.haveMiso && this.misoBits.length > 0) {\r\n        es += this.sampleIndex - this.misoBits[0].startSample;\r\n      } else if (this.haveMosi && this.mosiBits.length > 0) {\r\n        es += this.sampleIndex - this.mosiBits[0].startSample;\r\n      }\r\n    }\r\n\r\n    // 保存位信息\r\n    if (this.haveMiso) {\r\n      this.misoBits.unshift({ value: miso, startSample: this.sampleIndex, endSample: es });\r\n    }\r\n    if (this.haveMosi) {\r\n      this.mosiBits.unshift({ value: mosi, startSample: this.sampleIndex, endSample: es });\r\n    }\r\n\r\n    // 更新前一位的结束样本\r\n    if (this.bitCount > 0) {\r\n      if (this.haveMiso && this.misoBits.length > 1) {\r\n        this.misoBits[1].endSample = this.sampleIndex;\r\n      }\r\n      if (this.haveMosi && this.mosiBits.length > 1) {\r\n        this.mosiBits[1].endSample = this.sampleIndex;\r\n      }\r\n    }\r\n\r\n    this.bitCount++;\r\n\r\n    // 如果还没有收集到足够的位，继续接收\r\n    if (this.bitCount !== this.wordSize) {\r\n      return;\r\n    }\r\n\r\n    // 输出数据\r\n    this.putData();\r\n\r\n    // 计算比特率元数据\r\n    if (this.sampleRate) {\r\n      const elapsed = (this.sampleIndex - this.ssBlock + 1) / this.sampleRate;\r\n      const _bitrate = Math.floor(this.wordSize / elapsed);\r\n      // 可以在这里输出比特率信息或记录到日志\r\n    }\r\n\r\n    // 检查CS状态警告\r\n    if (this.haveCS && this.csWasDeasserted) {\r\n      this.put(this.ssBlock, this.sampleIndex, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: 4, // warning\r\n        values: ['CS# was deasserted during this data word!']\r\n      });\r\n    }\r\n\r\n    // 重置解码器状态\r\n    this.resetDecoderState();\r\n  }\r\n\r\n  /**\r\n   * 输出数据\r\n   * 对应原解码器的 putdata() (lines 159-196)\r\n   */\r\n  private putData(): void {\r\n    // 传递MISO和MOSI位以及数据到堆栈上的下一个PD（对应原版 lines 160-164）\r\n    const so = this.haveMiso ? this.misoData : null;\r\n    const si = this.haveMosi ? this.mosiData : null;\r\n    const soBits = this.haveMiso ? this.misoBits : null;\r\n    const siBits = this.haveMosi ? this.mosiBits : null;\r\n\r\n    // 计算时间范围（对应原版 lines 167-171）\r\n    let ss: number, es: number;\r\n\r\n    if (this.haveMiso && this.misoBits.length > 0) {\r\n      ss = this.misoBits[this.misoBits.length - 1].startSample;\r\n      es = this.misoBits[0].endSample;\r\n    } else if (this.haveMosi && this.mosiBits.length > 0) {\r\n      ss = this.mosiBits[this.mosiBits.length - 1].startSample;\r\n      es = this.mosiBits[0].endSample;\r\n    } else {\r\n      return; // 没有数据\r\n    }\r\n\r\n    // 保存字节数据用于传输注释（对应原版 lines 178-181）\r\n    if (this.haveMiso) {\r\n      this.misoBytes.push({ startSample: ss, endSample: es, value: this.misoData });\r\n    }\r\n    if (this.haveMosi) {\r\n      this.mosiBytes.push({ startSample: ss, endSample: es, value: this.mosiData });\r\n    }\r\n\r\n    // 位注释（对应原版 lines 183-189）\r\n    if (this.haveMiso && this.misoBits.length > 0) {\r\n      for (const bit of this.misoBits) {\r\n        this.put(bit.startSample, bit.endSample, {\r\n          type: DecoderOutputType.ANNOTATION,\r\n          annotationType: 2, // miso-bit\r\n          values: [bit.value.toString()]\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.haveMosi && this.mosiBits.length > 0) {\r\n      for (const bit of this.mosiBits) {\r\n        this.put(bit.startSample, bit.endSample, {\r\n          type: DecoderOutputType.ANNOTATION,\r\n          annotationType: 3, // mosi-bit\r\n          values: [bit.value.toString()]\r\n        });\r\n      }\r\n    }\r\n\r\n    // 数据字注释（对应原版 lines 191-195）\r\n    if (this.haveMiso) {\r\n      this.put(ss, es, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: 0, // miso-data\r\n        values: [this.misoData.toString(16).toUpperCase().padStart(2, '0')],\r\n        rawData: this.misoData\r\n      });\r\n    }\r\n\r\n    if (this.haveMosi) {\r\n      this.put(ss, es, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: 1, // mosi-data\r\n        values: [this.mosiData.toString(16).toUpperCase().padStart(2, '0')],\r\n        rawData: this.mosiData\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重置解码器状态\r\n   * 对应原解码器的 reset_decoder_state()\r\n   */\r\n  private resetDecoderState(): void {\r\n    this.misoData = this.haveMiso ? 0 : 0;\r\n    this.mosiData = this.haveMosi ? 0 : 0;\r\n    this.misoBits = [];\r\n    this.mosiBits = [];\r\n    this.bitCount = 0;\r\n  }\r\n\r\n  /**\r\n   * 查找时钟边沿\r\n   * 对应原解码器的 find_clk_edge() (lines 270-314)\r\n   */\r\n  private findClockEdge(miso: number, mosi: number, clk: number, cs: number, first: boolean, matched: boolean[] | null): void {\r\n    // 处理CS变化（对应原版 lines 271-292）\r\n    if (this.haveCS && (first || (matched && matched.length > 1 && matched[1]))) {\r\n      // 发送所有CS#引脚值变化（对应原版 lines 272-275）\r\n      const oldCS = first ? null : (1 - cs); // 原版: oldcs = None if first else 1 - cs\r\n      this.putCSChange(oldCS, cs);\r\n\r\n      if (this.csAsserted(cs)) {\r\n        // CS被断言，开始传输（对应原版 lines 277-280）\r\n        this.ssTransfer = this.sampleIndex;\r\n        this.misoBytes = [];\r\n        this.mosiBytes = [];\r\n      } else if (this.ssTransfer !== -1) {\r\n        // CS被取消断言，结束传输（对应原版 lines 281-289）\r\n        if (this.haveMiso && this.misoBytes.length > 0) {\r\n          const misoTransfer = this.misoBytes.map(x =>\r\n            x.value.toString(16).toUpperCase().padStart(2, '0')\r\n          ).join(' ');\r\n          this.put(this.ssTransfer, this.sampleIndex, {\r\n            type: DecoderOutputType.ANNOTATION,\r\n            annotationType: 5, // miso-transfer\r\n            values: [misoTransfer]\r\n          });\r\n        }\r\n\r\n        if (this.haveMosi && this.mosiBytes.length > 0) {\r\n          const mosiTransfer = this.mosiBytes.map(x =>\r\n            x.value.toString(16).toUpperCase().padStart(2, '0')\r\n          ).join(' ');\r\n          this.put(this.ssTransfer, this.sampleIndex, {\r\n            type: DecoderOutputType.ANNOTATION,\r\n            annotationType: 6, // mosi-transfer\r\n            values: [mosiTransfer]\r\n          });\r\n        }\r\n\r\n        // 输出Python OUTPUT（对应原版 line 288-289）\r\n        // 这里可以添加 TRANSFER Python 输出，暂时注释\r\n      }\r\n\r\n      // 当CS#变化时重置解码器状态（对应原版 lines 291-292）\r\n      this.resetDecoderState();\r\n    }\r\n\r\n    // 只关心CS#断言时的样本（对应原版 lines 294-296）\r\n    if (this.haveCS && !this.csAsserted(cs)) {\r\n      return;\r\n    }\r\n\r\n    // 忽略时钟引脚未变化的样本（对应原版 lines 298-300）\r\n    if (first || !(matched && matched[0])) {\r\n      return;\r\n    }\r\n\r\n    // 在上升/下降时钟边沿采样数据（取决于模式）（对应原版 lines 302-314）\r\n    const mode = this.getSPIMode();\r\n\r\n    // 根据SPI模式和当前时钟状态决定是否采样\r\n    // 由于我们等待的是边沿，所以我们知道时钟状态已经改变\r\n    // 我们根据当前状态和模式来决定是否在此边沿采样\r\n    let shouldSample = false;\r\n    switch (mode) {\r\n      case 0: // CPOL=0, CPHA=0: 在上升沿采样 (clk从0变为1)\r\n        shouldSample = clk === 1;\r\n        break;\r\n      case 1: // CPOL=0, CPHA=1: 在下降沿采样 (clk从1变为0)\r\n        shouldSample = clk === 0;\r\n        break;\r\n      case 2: // CPOL=1, CPHA=0: 在下降沿采样 (clk从1变为0)\r\n        shouldSample = clk === 0;\r\n        break;\r\n      case 3: // CPOL=1, CPHA=1: 在上升沿采样 (clk从0变为1)\r\n        shouldSample = clk === 1;\r\n        break;\r\n    }\r\n\r\n    if (!shouldSample) {\r\n      return;\r\n    }\r\n\r\n    // 找到正确的时钟边沿，现在获取SPI位（对应原版 lines 313-314）\r\n    this.handleBit(miso, mosi, clk, cs);\r\n  }\r\n\r\n  /**\r\n   * 获取SPI模式\r\n   * 对应原版的 spi_mode 字典 (lines 66-71)\r\n   */\r\n  private getSPIMode(): number {\r\n    // Key: (CPOL, CPHA). Value: SPI mode.\r\n    // Clock polarity (CPOL) = 0/1: Clock is low/high when inactive.\r\n    // Clock phase (CPHA) = 0/1: Data is valid on the leading/trailing clock edge.\r\n    const key = `${this.cpol},${this.cpha}` as keyof typeof _SPI_MODES;\r\n    return _SPI_MODES[key] || 0;\r\n  }\r\n\r\n  /**\r\n   * 输出CS变化\r\n   * 对应原版的 put CS-CHANGE (lines 274-275)\r\n   */\r\n  private putCSChange(oldCS: number | null, newCS: number | null): void {\r\n    // 发送CS-CHANGE Python输出（对应原版 lines 274-275）\r\n    // 在TypeScript版本中，我们通过注释来输出CS变化信息\r\n    // 这里可以添加具体的CS变化注释输出\r\n  }\r\n\r\n  /**\r\n   * 重置解码器状态\r\n   */\r\n  protected reset(): void {\r\n    super.reset();\r\n    this.bitCount = 0;\r\n    this.misoData = 0;\r\n    this.mosiData = 0;\r\n    this.misoBits = [];\r\n    this.mosiBits = [];\r\n    this.misoBytes = [];\r\n    this.mosiBytes = [];\r\n    this.ssBlock = -1;\r\n    this.ssTransfer = -1;\r\n    this.csWasDeasserted = false;\r\n    this.lastCS = -1;\r\n  }\r\n}\r\n"],"version":3}