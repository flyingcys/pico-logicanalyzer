113c5ddc3d771b1cb4ee7b5ff3109e1b
"use strict";
/**
 * 统一服务生命周期管理接口
 * 定义所有服务类的标准生命周期方法和状态管理
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalServiceManager = exports.ServiceManager = exports.ServiceLifecycleBase = exports.ServiceState = void 0;
/**
 * 服务状态枚举
 */
/* eslint-disable no-unused-vars */
var ServiceState;
(function (ServiceState) {
    ServiceState["NotInitialized"] = "not_initialized";
    ServiceState["Initializing"] = "initializing";
    ServiceState["Ready"] = "ready";
    ServiceState["Error"] = "error";
    ServiceState["Disposing"] = "disposing";
    ServiceState["Disposed"] = "disposed";
})(ServiceState = exports.ServiceState || (exports.ServiceState = {}));
/**
 * 服务生命周期基类
 * 提供标准的生命周期管理实现
 */
class ServiceLifecycleBase {
    constructor(serviceName) {
        this._state = ServiceState.NotInitialized;
        this._metadata = {};
        // 存储服务名称
        this.serviceName = serviceName;
        // 使用serviceName进行初始化日志
        this.updateMetadata({
            serviceName,
            initTimestamp: Date.now()
        });
    }
    /**
     * 当前服务状态
     */
    get state() {
        return this._state;
    }
    /**
     * 服务是否已初始化
     */
    get isInitialized() {
        return this._state !== ServiceState.NotInitialized;
    }
    /**
     * 服务是否准备就绪
     */
    get isReady() {
        return this._state === ServiceState.Ready;
    }
    /**
     * 异步初始化服务
     */
    async initialize(options = {}) {
        // 如果正在初始化，返回当前的初始化Promise
        if (this._initPromise) {
            return this._initPromise;
        }
        // 如果已经初始化，直接返回成功
        if (this.isReady) {
            return {
                success: true,
                state: this._state
            };
        }
        // 执行初始化
        this._initPromise = this._performInitialization(options);
        return this._initPromise;
    }
    /**
     * 异步销毁服务
     */
    async dispose(options = {}) {
        // 如果正在销毁，返回当前的销毁Promise
        if (this._disposePromise) {
            return this._disposePromise;
        }
        // 如果已经销毁，直接返回成功
        if (this._state === ServiceState.Disposed) {
            return true;
        }
        // 执行销毁
        this._disposePromise = this._performDispose(options);
        return this._disposePromise;
    }
    /**
     * 重启服务
     */
    async restart(options = {}) {
        await this.dispose();
        this._initPromise = undefined;
        this._disposePromise = undefined;
        return this.initialize(options);
    }
    /**
     * 健康检查
     */
    async healthCheck() {
        return this.isReady;
    }
    /**
     * 获取服务元数据
     */
    getMetadata() {
        return {
            ...this._metadata,
            serviceName: this.serviceName,
            state: this._state,
            isInitialized: this.isInitialized,
            isReady: this.isReady
        };
    }
    /**
     * 执行具体的初始化逻辑（子类实现）
     */
    async _performInitialization(options) {
        try {
            this._state = ServiceState.Initializing;
            // 设置超时
            const timeout = options.timeout || 30000; // 默认30秒
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error(`服务初始化超时: ${this.serviceName}`)), timeout);
            });
            // 执行子类的初始化逻辑
            const initPromise = this.onInitialize(options);
            await Promise.race([initPromise, timeoutPromise]);
            this._state = ServiceState.Ready;
            return {
                success: true,
                state: this._state
            };
        }
        catch (error) {
            this._state = ServiceState.Error;
            return {
                success: false,
                state: this._state,
                error: error instanceof Error ? error : new Error(String(error))
            };
        }
    }
    /**
     * 执行具体的销毁逻辑
     */
    async _performDispose(options) {
        try {
            this._state = ServiceState.Disposing;
            // 设置超时
            const timeout = options.timeout || 10000; // 默认10秒
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error(`服务销毁超时: ${this.serviceName}`)), timeout);
            });
            // 执行子类的销毁逻辑
            const disposePromise = this.onDispose(options);
            await Promise.race([disposePromise, timeoutPromise]);
            this._state = ServiceState.Disposed;
            return true;
        }
        catch (error) {
            if (options.force) {
                this._state = ServiceState.Disposed;
                return true;
            }
            this._state = ServiceState.Error;
            return false;
        }
    }
    /**
     * 更新服务元数据
     */
    updateMetadata(metadata) {
        this._metadata = { ...this._metadata, ...metadata };
    }
}
exports.ServiceLifecycleBase = ServiceLifecycleBase;
/**
 * 服务管理器
 * 管理多个服务的生命周期
 */
class ServiceManager {
    constructor() {
        this.services = new Map();
        this.dependencies = new Map();
    }
    /**
     * 注册服务
     */
    registerService(service, dependencies = []) {
        this.services.set(service.serviceName, service);
        this.dependencies.set(service.serviceName, dependencies);
    }
    /**
     * 获取服务
     */
    getService(serviceName) {
        return this.services.get(serviceName);
    }
    /**
     * 初始化所有服务（按依赖顺序）
     */
    async initializeAll(options = {}) {
        const results = new Map();
        const initialized = new Set();
        // 递归初始化服务及其依赖
        const initializeService = async (serviceName) => {
            if (initialized.has(serviceName)) {
                return results.get(serviceName);
            }
            const service = this.services.get(serviceName);
            if (!service) {
                throw new Error(`服务未找到: ${serviceName}`);
            }
            // 先初始化依赖服务
            const deps = this.dependencies.get(serviceName) || [];
            for (const dep of deps) {
                await initializeService(dep);
            }
            // 初始化当前服务
            const result = await service.initialize(options);
            results.set(serviceName, result);
            initialized.add(serviceName);
            return result;
        };
        // 初始化所有服务
        for (const serviceName of this.services.keys()) {
            await initializeService(serviceName);
        }
        return results;
    }
    /**
     * 销毁所有服务（按反向依赖顺序）
     */
    async disposeAll(options = {}) {
        const results = new Map();
        // 反向顺序销毁
        const serviceNames = Array.from(this.services.keys()).reverse();
        for (const serviceName of serviceNames) {
            const service = this.services.get(serviceName);
            const result = await service.dispose(options);
            results.set(serviceName, result);
        }
        return results;
    }
    /**
     * 获取所有服务的健康状态
     */
    async getHealthStatus() {
        const status = new Map();
        for (const [name, service] of this.services) {
            try {
                const health = await service.healthCheck?.() || service.isReady;
                status.set(name, health);
            }
            catch {
                status.set(name, false);
            }
        }
        return status;
    }
}
exports.ServiceManager = ServiceManager;
// 全局服务管理器实例
exports.globalServiceManager = new ServiceManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,