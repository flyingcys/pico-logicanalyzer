{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/common/ServiceLifecycle.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/common/ServiceLifecycle.ts"],"sourcesContent":["/**\r\n * 统一服务生命周期管理接口\r\n * 定义所有服务类的标准生命周期方法和状态管理\r\n */\r\n\r\n/**\r\n * 服务状态枚举\r\n */\r\n/* eslint-disable no-unused-vars */\r\nexport enum ServiceState {\r\n  NotInitialized = 'not_initialized',\r\n  Initializing = 'initializing',\r\n  Ready = 'ready',\r\n  Error = 'error',\r\n  Disposing = 'disposing',\r\n  Disposed = 'disposed'\r\n}\r\n/* eslint-enable no-unused-vars */\r\n\r\n/**\r\n * 服务初始化选项\r\n */\r\nexport interface ServiceInitOptions {\r\n  timeout?: number;           // 初始化超时时间（毫秒）\r\n  retryCount?: number;        // 重试次数\r\n  dependencies?: string[];    // 依赖的其他服务\r\n  config?: Record<string, any>; // 初始化配置\r\n}\r\n\r\n/**\r\n * 服务初始化结果\r\n */\r\nexport interface ServiceInitResult {\r\n  success: boolean;\r\n  state: ServiceState;\r\n  error?: Error;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * 服务销毁选项\r\n */\r\nexport interface ServiceDisposeOptions {\r\n  force?: boolean;           // 强制销毁，即使有错误\r\n  timeout?: number;          // 销毁超时时间\r\n  cleanup?: boolean;         // 是否清理资源\r\n}\r\n\r\n/**\r\n * 统一服务生命周期接口\r\n * 所有服务类都应该实现此接口\r\n */\r\nexport interface IServiceLifecycle {\r\n  /**\r\n   * 服务名称（用于日志和调试）\r\n   */\r\n  readonly serviceName: string;\r\n\r\n  /**\r\n   * 当前服务状态\r\n   */\r\n  readonly state: ServiceState;\r\n\r\n  /**\r\n   * 服务是否已初始化\r\n   */\r\n  readonly isInitialized: boolean;\r\n\r\n  /**\r\n   * 服务是否准备就绪\r\n   */\r\n  readonly isReady: boolean;\r\n\r\n  /**\r\n   * 异步初始化服务\r\n   * @param _options 初始化选项\r\n   * @returns 初始化结果\r\n   */\r\n  initialize(_options?: ServiceInitOptions): Promise<ServiceInitResult>;\r\n\r\n  /**\r\n   * 异步销毁服务\r\n   * @param _options 销毁选项\r\n   * @returns 销毁是否成功\r\n   */\r\n  dispose(_options?: ServiceDisposeOptions): Promise<boolean>;\r\n\r\n  /**\r\n   * 重启服务（先销毁再初始化）\r\n   * @param _options 重启选项\r\n   * @returns 重启结果\r\n   */\r\n  restart?(_options?: ServiceInitOptions): Promise<ServiceInitResult>;\r\n\r\n  /**\r\n   * 健康检查\r\n   * @returns 服务健康状态\r\n   */\r\n  healthCheck?(): Promise<boolean>;\r\n\r\n  /**\r\n   * 获取服务元数据\r\n   * @returns 服务的元数据信息\r\n   */\r\n  getMetadata?(): Record<string, any>;\r\n}\r\n\r\n/**\r\n * 服务生命周期基类\r\n * 提供标准的生命周期管理实现\r\n */\r\nexport abstract class ServiceLifecycleBase implements IServiceLifecycle {\r\n  protected _state: ServiceState = ServiceState.NotInitialized;\r\n  protected _initPromise?: Promise<ServiceInitResult>;\r\n  protected _disposePromise?: Promise<boolean>;\r\n  protected _metadata: Record<string, any> = {};\r\n  public readonly serviceName: string;\r\n\r\n  constructor(\r\n    serviceName: string\r\n  ) {\r\n    // 存储服务名称\r\n    this.serviceName = serviceName;\r\n    // 使用serviceName进行初始化日志\r\n    this.updateMetadata({\r\n      serviceName,\r\n      initTimestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 当前服务状态\r\n   */\r\n  get state(): ServiceState {\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * 服务是否已初始化\r\n   */\r\n  get isInitialized(): boolean {\r\n    return this._state !== ServiceState.NotInitialized;\r\n  }\r\n\r\n  /**\r\n   * 服务是否准备就绪\r\n   */\r\n  get isReady(): boolean {\r\n    return this._state === ServiceState.Ready;\r\n  }\r\n\r\n  /**\r\n   * 异步初始化服务\r\n   */\r\n  async initialize(options: ServiceInitOptions = {}): Promise<ServiceInitResult> {\r\n    // 如果正在初始化，返回当前的初始化Promise\r\n    if (this._initPromise) {\r\n      return this._initPromise;\r\n    }\r\n\r\n    // 如果已经初始化，直接返回成功\r\n    if (this.isReady) {\r\n      return {\r\n        success: true,\r\n        state: this._state\r\n      };\r\n    }\r\n\r\n    // 执行初始化\r\n    this._initPromise = this._performInitialization(options);\r\n    return this._initPromise;\r\n  }\r\n\r\n  /**\r\n   * 异步销毁服务\r\n   */\r\n  async dispose(options: ServiceDisposeOptions = {}): Promise<boolean> {\r\n    // 如果正在销毁，返回当前的销毁Promise\r\n    if (this._disposePromise) {\r\n      return this._disposePromise;\r\n    }\r\n\r\n    // 如果已经销毁，直接返回成功\r\n    if (this._state === ServiceState.Disposed) {\r\n      return true;\r\n    }\r\n\r\n    // 执行销毁\r\n    this._disposePromise = this._performDispose(options);\r\n    return this._disposePromise;\r\n  }\r\n\r\n  /**\r\n   * 重启服务\r\n   */\r\n  async restart(options: ServiceInitOptions = {}): Promise<ServiceInitResult> {\r\n    await this.dispose();\r\n    this._initPromise = undefined;\r\n    this._disposePromise = undefined;\r\n    return this.initialize(options);\r\n  }\r\n\r\n  /**\r\n   * 健康检查\r\n   */\r\n  async healthCheck(): Promise<boolean> {\r\n    return this.isReady;\r\n  }\r\n\r\n  /**\r\n   * 获取服务元数据\r\n   */\r\n  getMetadata(): Record<string, any> {\r\n    return {\r\n      ...this._metadata,\r\n      serviceName: this.serviceName,\r\n      state: this._state,\r\n      isInitialized: this.isInitialized,\r\n      isReady: this.isReady\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 执行具体的初始化逻辑（子类实现）\r\n   */\r\n  protected async _performInitialization(options: ServiceInitOptions): Promise<ServiceInitResult> {\r\n    try {\r\n      this._state = ServiceState.Initializing;\r\n\r\n      // 设置超时\r\n      const timeout = options.timeout || 30000; // 默认30秒\r\n      const timeoutPromise = new Promise<never>((_, reject) => {\r\n        setTimeout(() => reject(new Error(`服务初始化超时: ${this.serviceName}`)), timeout);\r\n      });\r\n\r\n      // 执行子类的初始化逻辑\r\n      const initPromise = this.onInitialize(options);\r\n      await Promise.race([initPromise, timeoutPromise]);\r\n\r\n      this._state = ServiceState.Ready;\r\n      return {\r\n        success: true,\r\n        state: this._state\r\n      };\r\n\r\n    } catch (error) {\r\n      this._state = ServiceState.Error;\r\n      return {\r\n        success: false,\r\n        state: this._state,\r\n        error: error instanceof Error ? error : new Error(String(error))\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行具体的销毁逻辑\r\n   */\r\n  protected async _performDispose(options: ServiceDisposeOptions): Promise<boolean> {\r\n    try {\r\n      this._state = ServiceState.Disposing;\r\n\r\n      // 设置超时\r\n      const timeout = options.timeout || 10000; // 默认10秒\r\n      const timeoutPromise = new Promise<never>((_, reject) => {\r\n        setTimeout(() => reject(new Error(`服务销毁超时: ${this.serviceName}`)), timeout);\r\n      });\r\n\r\n      // 执行子类的销毁逻辑\r\n      const disposePromise = this.onDispose(options);\r\n      await Promise.race([disposePromise, timeoutPromise]);\r\n\r\n      this._state = ServiceState.Disposed;\r\n      return true;\r\n\r\n    } catch (error) {\r\n      if (options.force) {\r\n        this._state = ServiceState.Disposed;\r\n        return true;\r\n      }\r\n      this._state = ServiceState.Error;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 子类实现的初始化逻辑\r\n   */\r\n  protected abstract onInitialize(_options: ServiceInitOptions): Promise<void>;\r\n\r\n  /**\r\n   * 子类实现的销毁逻辑\r\n   */\r\n  protected abstract onDispose(_options: ServiceDisposeOptions): Promise<void>;\r\n\r\n  /**\r\n   * 更新服务元数据\r\n   */\r\n  protected updateMetadata(metadata: Record<string, any>): void {\r\n    this._metadata = { ...this._metadata, ...metadata };\r\n  }\r\n}\r\n\r\n/**\r\n * 服务管理器\r\n * 管理多个服务的生命周期\r\n */\r\nexport class ServiceManager {\r\n  private services: Map<string, IServiceLifecycle> = new Map();\r\n  private dependencies: Map<string, string[]> = new Map();\r\n\r\n  /**\r\n   * 注册服务\r\n   */\r\n  registerService(service: IServiceLifecycle, dependencies: string[] = []): void {\r\n    this.services.set(service.serviceName, service);\r\n    this.dependencies.set(service.serviceName, dependencies);\r\n  }\r\n\r\n  /**\r\n   * 获取服务\r\n   */\r\n  getService<T extends IServiceLifecycle>(serviceName: string): T | undefined {\r\n    return this.services.get(serviceName) as T;\r\n  }\r\n\r\n  /**\r\n   * 初始化所有服务（按依赖顺序）\r\n   */\r\n  async initializeAll(options: ServiceInitOptions = {}): Promise<Map<string, ServiceInitResult>> {\r\n    const results = new Map<string, ServiceInitResult>();\r\n    const initialized = new Set<string>();\r\n\r\n    // 递归初始化服务及其依赖\r\n    const initializeService = async (serviceName: string): Promise<ServiceInitResult> => {\r\n      if (initialized.has(serviceName)) {\r\n        return results.get(serviceName)!;\r\n      }\r\n\r\n      const service = this.services.get(serviceName);\r\n      if (!service) {\r\n        throw new Error(`服务未找到: ${serviceName}`);\r\n      }\r\n\r\n      // 先初始化依赖服务\r\n      const deps = this.dependencies.get(serviceName) || [];\r\n      for (const dep of deps) {\r\n        await initializeService(dep);\r\n      }\r\n\r\n      // 初始化当前服务\r\n      const result = await service.initialize(options);\r\n      results.set(serviceName, result);\r\n      initialized.add(serviceName);\r\n\r\n      return result;\r\n    };\r\n\r\n    // 初始化所有服务\r\n    for (const serviceName of this.services.keys()) {\r\n      await initializeService(serviceName);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * 销毁所有服务（按反向依赖顺序）\r\n   */\r\n  async disposeAll(options: ServiceDisposeOptions = {}): Promise<Map<string, boolean>> {\r\n    const results = new Map<string, boolean>();\r\n\r\n    // 反向顺序销毁\r\n    const serviceNames = Array.from(this.services.keys()).reverse();\r\n    for (const serviceName of serviceNames) {\r\n      const service = this.services.get(serviceName)!;\r\n      const result = await service.dispose(options);\r\n      results.set(serviceName, result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * 获取所有服务的健康状态\r\n   */\r\n  async getHealthStatus(): Promise<Map<string, boolean>> {\r\n    const status = new Map<string, boolean>();\r\n\r\n    for (const [name, service] of this.services) {\r\n      try {\r\n        const health = await service.healthCheck?.() || service.isReady;\r\n        status.set(name, health);\r\n      } catch {\r\n        status.set(name, false);\r\n      }\r\n    }\r\n\r\n    return status;\r\n  }\r\n}\r\n\r\n// 全局服务管理器实例\r\nexport const globalServiceManager = new ServiceManager();\r\n"],"version":3}