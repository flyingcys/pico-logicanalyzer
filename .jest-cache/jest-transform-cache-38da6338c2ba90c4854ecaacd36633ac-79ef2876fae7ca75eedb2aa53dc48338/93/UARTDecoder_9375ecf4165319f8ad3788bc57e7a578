9de6240377b3034816de5ff5d1d4519a
"use strict";
/**
 * UART协议解码器
 * 基于 @logicanalyzer/Software 的 uart/pd.py 精确移植
 * 实现完整的UART协议解码功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UARTDecoder = void 0;
/* eslint-disable no-unused-vars */
const DecoderBase_1 = require("../DecoderBase");
const types_1 = require("../types");
/**
 * UART数据方向
 */
const RX = 0;
const TX = 1;
/**
 * 注释类型枚举
 * 对应原解码器的 _Ann 类
 */
var _Ann;
(function (_Ann) {
    _Ann[_Ann["_RX_DATA"] = 0] = "_RX_DATA";
    _Ann[_Ann["_TX_DATA"] = 1] = "_TX_DATA";
    _Ann[_Ann["_RX_START"] = 2] = "_RX_START";
    _Ann[_Ann["_TX_START"] = 3] = "_TX_START";
    _Ann[_Ann["_RX_PARITY_OK"] = 4] = "_RX_PARITY_OK";
    _Ann[_Ann["_TX_PARITY_OK"] = 5] = "_TX_PARITY_OK";
    _Ann[_Ann["_RX_PARITY_ERR"] = 6] = "_RX_PARITY_ERR";
    _Ann[_Ann["_TX_PARITY_ERR"] = 7] = "_TX_PARITY_ERR";
    _Ann[_Ann["_RX_STOP"] = 8] = "_RX_STOP";
    _Ann[_Ann["_TX_STOP"] = 9] = "_TX_STOP";
    _Ann[_Ann["_RX_WARN"] = 10] = "_RX_WARN";
    _Ann[_Ann["_TX_WARN"] = 11] = "_TX_WARN";
    _Ann[_Ann["_RX_DATA_BIT"] = 12] = "_RX_DATA_BIT";
    _Ann[_Ann["_TX_DATA_BIT"] = 13] = "_TX_DATA_BIT";
    _Ann[_Ann["_RX_BREAK"] = 14] = "_RX_BREAK";
    _Ann[_Ann["_TX_BREAK"] = 15] = "_TX_BREAK";
    _Ann[_Ann["_RX_PACKET"] = 16] = "_RX_PACKET";
    _Ann[_Ann["_TX_PACKET"] = 17] = "_TX_PACKET";
})(_Ann || (_Ann = {}));
/**
 * 校验位验证函数
 * 对应原解码器的 parity_ok() 函数
 */
function parityOk(parityType, parityBit, data, _dataBits) {
    if (parityType === 'ignore') {
        return true;
    }
    // 简单情况处理 (校验位总是1或0)
    if (parityType === 'zero') {
        return parityBit === 0;
    }
    else if (parityType === 'one') {
        return parityBit === 1;
    }
    // 计算数据中1的个数 (包括校验位本身)
    const ones = data.toString(2).split('1').length - 1 + parityBit;
    // 检查奇偶校验
    if (parityType === 'odd') {
        return (ones % 2) === 1;
    }
    else if (parityType === 'even') {
        return (ones % 2) === 0;
    }
    return false;
}
/**
 * UART协议解码器实现
 * 对应原软件的 uart Decoder 类
 */
class UARTDecoder extends DecoderBase_1.DecoderBase {
    constructor() {
        super(...arguments);
        // 解码器元数据 - 完全匹配原Python解码器
        this.id = 'uart';
        this.name = 'UART';
        this.longname = 'Universal Asynchronous Receiver/Transmitter';
        this.desc = 'Asynchronous, serial bus.';
        this.license = 'gplv2+';
        this.inputs = ['logic'];
        this.outputs = ['uart'];
        this.tags = ['Embedded/industrial'];
        // 通道定义 - 匹配原解码器 (都是可选通道)
        this.channels = [
            { id: 'rx', name: 'RX', desc: 'UART receive line', required: false, index: 0 },
            { id: 'tx', name: 'TX', desc: 'UART transmit line', required: false, index: 1 }
        ];
        // 配置选项 - 匹配原解码器
        this.options = [
            {
                id: 'baudrate',
                desc: 'Baud rate',
                default: 115200,
                type: 'int'
            },
            {
                id: 'data_bits',
                desc: 'Data bits',
                default: 8,
                values: ['5', '6', '7', '8', '9'],
                type: 'list'
            },
            {
                id: 'parity',
                desc: 'Parity',
                default: 'none',
                values: ['none', 'odd', 'even', 'zero', 'one', 'ignore'],
                type: 'list'
            },
            {
                id: 'stop_bits',
                desc: 'Stop bits',
                default: 1.0,
                values: ['0.0', '0.5', '1.0', '1.5', '2.0'],
                type: 'list'
            },
            {
                id: 'bit_order',
                desc: 'Bit order',
                default: 'lsb-first',
                values: ['lsb-first', 'msb-first'],
                type: 'list'
            },
            {
                id: 'format',
                desc: 'Data format',
                default: 'hex',
                values: ['ascii', 'dec', 'hex', 'oct', 'bin'],
                type: 'list'
            },
            {
                id: 'invert_rx',
                desc: 'Invert RX',
                default: 'no',
                values: ['yes', 'no'],
                type: 'list'
            },
            {
                id: 'invert_tx',
                desc: 'Invert TX',
                default: 'no',
                values: ['yes', 'no'],
                type: 'list'
            },
            {
                id: 'sample_point',
                desc: 'Sample point (%)',
                default: 50,
                type: 'int'
            }
        ];
        // 注释类型定义 - 匹配原解码器的annotations
        this.annotations = [
            ['rx-data', 'RX data'],
            ['tx-data', 'TX data'],
            ['rx-start', 'RX start bit'],
            ['tx-start', 'TX start bit'],
            ['rx-parity-ok', 'RX parity OK bit'],
            ['tx-parity-ok', 'TX parity OK bit'],
            ['rx-parity-err', 'RX parity error bit'],
            ['tx-parity-err', 'TX parity error bit'],
            ['rx-stop', 'RX stop bit'],
            ['tx-stop', 'TX stop bit'],
            ['rx-warning', 'RX warning'],
            ['tx-warning', 'TX warning'],
            ['rx-data-bit', 'RX data bit'],
            ['tx-data-bit', 'TX data bit'],
            ['rx-break', 'RX break'],
            ['tx-break', 'TX break'],
            ['rx-packet', 'RX packet'],
            ['tx-packet', 'TX packet']
        ];
        // 注释行定义 - 匹配原解码器的annotation_rows
        this.annotationRows = [
            ['rx-data-bits', 'RX bits', [_Ann._RX_DATA_BIT]],
            ['rx-data-vals', 'RX data', [_Ann._RX_DATA, _Ann._RX_START, _Ann._RX_PARITY_OK, _Ann._RX_PARITY_ERR, _Ann._RX_STOP]],
            ['rx-warnings', 'RX warnings', [_Ann._RX_WARN]],
            ['rx-breaks', 'RX breaks', [_Ann._RX_BREAK]],
            ['rx-packets', 'RX packets', [_Ann._RX_PACKET]],
            ['tx-data-bits', 'TX bits', [_Ann._TX_DATA_BIT]],
            ['tx-data-vals', 'TX data', [_Ann._TX_DATA, _Ann._TX_START, _Ann._TX_PARITY_OK, _Ann._TX_PARITY_ERR, _Ann._TX_STOP]],
            ['tx-warnings', 'TX warnings', [_Ann._TX_WARN]],
            ['tx-breaks', 'TX breaks', [_Ann._TX_BREAK]],
            ['tx-packets', 'TX packets', [_Ann._TX_PACKET]]
        ];
        // 解码器状态变量 - 对应原解码器的实例变量
        this.frameStart = [-1, -1];
        this.frameValid = [true, true];
        this.curFrameBit = [0, 0];
        this.startBit = [-1, -1];
        this.curDataBit = [0, 0];
        this.dataValue = [0, 0];
        this.parityBit = [-1, -1];
        this.stopBits = [[], []];
        this.startSample = [-1, -1];
        this.state = ['WAIT FOR START BIT', 'WAIT FOR START BIT'];
        this.dataBits = [[], []];
        this.breakStart = [null, null];
        this.packetCache = [[], []];
        this.ssPacket = [null, null];
        this.esPacket = [null, null];
        this.idleStart = [null, null];
        // 配置变量
        this.bitWidth = 0;
        this.frameLenSampleCount = 0;
        this.breakMinSampleCount = 0;
        this.byteWidth = 1;
        // 通道可用性
        this.hasPin = [false, false];
        this.inv = [false, false];
        // 选项值
        this.baudrate = 115200;
        this.dataBitsCount = 8;
        this.parity = 'none';
        this.stopBitsCount = 1.0;
        this.bitOrder = 'lsb-first';
        this.format = 'hex';
        this.samplePoint = 50;
    }
    /**
     * 主解码方法
     * 对应原解码器的 decode() 方法 - 完整实现原版逻辑
     */
    decode(sampleRate, channels, options) {
        if (!sampleRate) {
            throw new Error('Cannot decode without samplerate.');
        }
        // 检查通道可用性
        this.hasPin[RX] = channels.length > 0 && channels[0].samples.length > 0;
        this.hasPin[TX] = channels.length > 1 && channels[1].samples.length > 0;
        if (!this.hasPin[RX] && !this.hasPin[TX]) {
            throw new Error('Need at least one of TX or RX pins.');
        }
        // 初始化
        this.sampleRate = sampleRate;
        this.prepareChannelData(channels, [
            { captureIndex: 0, decoderIndex: 0 },
            { captureIndex: 1, decoderIndex: 1 } // TX
        ]);
        // 处理选项
        this.processOptions(options);
        // 计算位宽
        this.bitWidth = sampleRate / this.baudrate;
        // 计算完整帧的样本数 - 精确对应原版计算
        let frameSamples = 1; // START位
        frameSamples += this.dataBitsCount;
        frameSamples += (this.parity === 'none') ? 0 : 1;
        frameSamples += this.stopBitsCount;
        frameSamples *= this.bitWidth;
        this.frameLenSampleCount = Math.ceil(frameSamples);
        this.breakMinSampleCount = this.frameLenSampleCount;
        // 开始解码
        this.start();
        this.reset();
        // 主解码循环 - 完全基于原版的wait/matched机制
        this.runMainLoop();
        return this.results;
    }
    /**
     * 处理配置选项
     */
    processOptions(options) {
        for (const option of options) {
            switch (option.optionIndex) {
                case 0: // baudrate
                    this.baudrate = option.value;
                    break;
                case 1: // data_bits
                    this.dataBitsCount = parseInt(option.value);
                    break;
                case 2: // parity
                    this.parity = option.value;
                    break;
                case 3: // stop_bits
                    this.stopBitsCount = parseFloat(option.value);
                    break;
                case 4: // bit_order
                    this.bitOrder = option.value;
                    break;
                case 5: // format
                    this.format = option.value;
                    break;
                case 6: // invert_rx
                    this.inv[RX] = option.value === 'yes';
                    break;
                case 7: // invert_tx
                    this.inv[TX] = option.value === 'yes';
                    break;
                case 8: // sample_point
                    this.samplePoint = option.value;
                    break;
            }
        }
        this.byteWidth = Math.floor((this.dataBitsCount + 7) / 8);
    }
    /**
     * 主解码循环
     * 简化实现，直接遍历样本数据进行解码
     */
    runMainLoop() {
        try {
            // 简化的解码循环，直接遍历数据
            if (this.hasPin[RX]) {
                this.decodeChannelSimple(RX);
            }
            if (this.hasPin[TX]) {
                this.decodeChannelSimple(TX);
            }
        }
        catch (error) {
            // 捕获End of samples reached错误，正常结束解码
            if (error instanceof Error && error.message === 'End of samples reached') {
                return;
            }
            throw error;
        }
    }
    /**
     * 简化的通道解码
     */
    decodeChannelSimple(rxtx) {
        const data = this.channelData[rxtx];
        if (!data || data.length === 0)
            return;
        let sampleIndex = 0;
        this.sampleIndex = 0;
        while (sampleIndex < data.length - 1) {
            this.sampleIndex = sampleIndex;
            // 根据状态处理当前样本
            const currentSignal = this.getCurrentChannelValue(rxtx, sampleIndex);
            const nextSignal = this.getCurrentChannelValue(rxtx, sampleIndex + 1);
            // 检测起始位（从高到低的跳变）
            if (this.state[rxtx] === 'WAIT FOR START BIT' && currentSignal === 1 && nextSignal === 0) {
                this.frameStart[rxtx] = sampleIndex + 1;
                this.state[rxtx] = 'GET START BIT';
                this.curFrameBit[rxtx] = 0;
                this.frameValid[rxtx] = true;
                sampleIndex += Math.floor(this.bitWidth); // 跳到下一位的采样点
                continue;
            }
            // 处理其他状态
            if (this.state[rxtx] !== 'WAIT FOR START BIT') {
                const bitCenter = this.frameStart[rxtx] + this.curFrameBit[rxtx] * this.bitWidth + this.bitWidth / 2;
                if (sampleIndex >= Math.floor(bitCenter)) {
                    const signal = this.getCurrentChannelValue(rxtx, Math.floor(bitCenter));
                    this.inspectSample(rxtx, signal, this.inv[rxtx]);
                    sampleIndex = Math.floor(bitCenter) + 1;
                    continue;
                }
            }
            sampleIndex++;
        }
    }
    /**
     * 获取等待条件
     * 对应原解码器的 get_wait_cond()
     */
    getWaitCond(rxtx, inv) {
        const state = this.state[rxtx];
        if (state === 'WAIT FOR START BIT') {
            return { [rxtx]: inv ? 'r' : 'f' }; // 等待下降沿（起始位）
        }
        if (['GET START BIT', 'GET DATA BITS', 'GET PARITY BIT', 'GET STOP BITS'].includes(state)) {
            const bitnum = this.curFrameBit[rxtx];
            const wantNum = Math.ceil(this.getSamplePoint(rxtx, bitnum));
            const skip = wantNum - this.sampleIndex;
            return skip > 0 ? { skip } : null;
        }
        return null;
    }
    /**
     * 获取空闲检测条件
     * 对应原解码器的 get_idle_cond()
     */
    getIdleCond(rxtx, _inv) {
        if (this.idleStart[rxtx] === null) {
            return null;
        }
        const endOfFrame = this.idleStart[rxtx] + this.frameLenSampleCount;
        if (endOfFrame < this.sampleIndex) {
            return null;
        }
        const skip = endOfFrame - this.sampleIndex;
        return skip > 0 ? { skip } : null;
    }
    /**
     * 检查边沿信号
     * 对应原解码器的 inspect_edge() - 用于Break检测
     */
    inspectEdge(rxtx, signal, inv) {
        if (inv) {
            signal = signal ? 0 : 1;
        }
        if (!signal) {
            // 信号变低，开始一个新的Break检测区间
            this.breakStart[rxtx] = this.sampleIndex;
            return;
        }
        // 信号变高，是否有一个扩展的低信号周期？
        if (this.breakStart[rxtx] === null) {
            return;
        }
        const diff = this.sampleIndex - this.breakStart[rxtx];
        if (diff >= this.breakMinSampleCount) {
            const ss = this.frameStart[rxtx];
            const es = this.sampleIndex;
            this.handleBreak(rxtx, ss, es);
        }
        this.breakStart[rxtx] = null;
    }
    /**
     * 检查空闲状态
     * 对应原解码器的 inspect_idle()
     */
    inspectIdle(rxtx, signal, inv) {
        if (inv) {
            signal = signal ? 0 : 1;
        }
        if (!signal) {
            // 低输入，停止检查
            this.idleStart[rxtx] = null;
            return;
        }
        // 高输入，刚刚达到或仍然稳定
        if (this.idleStart[rxtx] === null) {
            this.idleStart[rxtx] = this.sampleIndex;
        }
        const diff = this.sampleIndex - this.idleStart[rxtx];
        if (diff < this.frameLenSampleCount) {
            return;
        }
        const ss = this.idleStart[rxtx];
        const es = this.sampleIndex;
        this.handleIdle(rxtx, ss, es);
        this.idleStart[rxtx] = es;
    }
    /**
     * 处理Break条件
     * 对应原解码器的 handle_break()
     */
    handleBreak(rxtx, ss, es) {
        this.put(ss, es, {
            type: types_1.DecoderOutputType.ANNOTATION,
            annotationType: _Ann._RX_BREAK + rxtx,
            values: ['Break condition', 'Break', 'Brk', 'B']
        });
        this.state[rxtx] = 'WAIT FOR START BIT';
    }
    /**
     * 处理空闲状态
     * 对应原解码器的 handle_idle()
     */
    handleIdle(_rxtx, _ss, _es) {
        // 空闲状态不需要特殊显示，只记录状态
        // UART空闲状态检测
    }
    /**
     * 获取当前通道值
     */
    getCurrentChannelValue(rxtx, sampleIndex) {
        if (rxtx >= this.channelData.length || !this.channelData[rxtx]) {
            return 1; // 空闲状态
        }
        const channel = this.channelData[rxtx];
        const index = sampleIndex !== undefined ? sampleIndex : this.sampleIndex;
        return index < channel.length ? channel[index] : 1;
    }
    /**
     * 获取样本点位置
     * 对应原解码器的 get_sample_point()
     */
    getSamplePoint(rxtx, bitNum) {
        const perc = (this.samplePoint >= 1 && this.samplePoint <= 99) ? this.samplePoint : 50;
        const percFloat = perc / 100.0;
        let bitPos = (this.bitWidth - 1) * percFloat;
        bitPos += this.frameStart[rxtx];
        bitPos += bitNum * this.bitWidth;
        return bitPos;
    }
    /**
     * 检查样本
     * 对应原解码器的 inspect_sample()
     */
    inspectSample(rxtx, signal, inv) {
        if (inv) {
            signal = signal ? 0 : 1;
        }
        const state = this.state[rxtx];
        switch (state) {
            case 'WAIT FOR START BIT':
                this.waitForStartBit(rxtx, signal);
                break;
            case 'GET START BIT':
                this.getStartBit(rxtx, signal);
                break;
            case 'GET DATA BITS':
                this.getDataBits(rxtx, signal);
                break;
            case 'GET PARITY BIT':
                this.getParityBit(rxtx, signal);
                break;
            case 'GET STOP BITS':
                this.getStopBits(rxtx, signal);
                break;
        }
    }
    /**
     * 等待起始位
     * 对应原解码器的 wait_for_start_bit()
     */
    waitForStartBit(rxtx, signal) {
        // 保存起始位开始的样本编号
        this.frameStart[rxtx] = this.sampleIndex;
        this.frameValid[rxtx] = true;
        this.curFrameBit[rxtx] = 0;
        this.advanceState(rxtx, signal);
    }
    /**
     * 获取起始位
     * 对应原解码器的 get_start_bit()
     */
    getStartBit(rxtx, signal) {
        this.startBit[rxtx] = signal;
        this.curFrameBit[rxtx]++;
        // 起始位必须是0
        if (this.startBit[rxtx] !== 0) {
            this.put(this.frameStart[rxtx], this.sampleIndex, {
                type: types_1.DecoderOutputType.ANNOTATION,
                annotationType: _Ann._RX_WARN + rxtx,
                values: ['Frame error', 'Frame err', 'FE']
            });
            this.frameValid[rxtx] = false;
            const es = this.sampleIndex + Math.ceil(this.bitWidth / 2);
            this.advanceState(rxtx, signal, true, es);
            return;
        }
        // 重置内部状态
        this.curDataBit[rxtx] = 0;
        this.dataValue[rxtx] = 0;
        this.parityBit[rxtx] = -1;
        this.stopBits[rxtx] = [];
        this.startSample[rxtx] = -1;
        this.dataBits[rxtx] = [];
        this.put(this.frameStart[rxtx], this.sampleIndex, {
            type: types_1.DecoderOutputType.ANNOTATION,
            annotationType: _Ann._RX_START + rxtx,
            values: ['Start bit', 'Start', 'S']
        });
        this.advanceState(rxtx, signal);
    }
    /**
     * 获取数据位
     * 对应原解码器的 get_data_bits() - 完整实现包括包处理
     */
    getDataBits(rxtx, signal) {
        // 保存第一个数据位的样本编号
        if (this.startSample[rxtx] === -1) {
            this.startSample[rxtx] = this.sampleIndex;
        }
        this.put(this.sampleIndex, this.sampleIndex + 1, {
            type: types_1.DecoderOutputType.ANNOTATION,
            annotationType: _Ann._RX_DATA_BIT + rxtx,
            values: [signal.toString()]
        });
        // 存储个别数据位 - 精确对应原版的存储格式
        const halfBit = Math.floor(this.bitWidth / 2);
        this.dataBits[rxtx].push({
            value: signal,
            startSample: this.sampleIndex - halfBit,
            endSample: this.sampleIndex + halfBit
        });
        this.curFrameBit[rxtx]++;
        this.curDataBit[rxtx]++;
        if (this.curDataBit[rxtx] < this.dataBitsCount) {
            return;
        }
        // 转换累积的数据位为数据值 - 对应原版的bitpack逻辑
        const bits = this.dataBits[rxtx].map(b => b.value);
        if (this.bitOrder === 'msb-first') {
            bits.reverse();
        }
        // 使用bitpack算法
        this.dataValue[rxtx] = 0;
        for (let i = 0; i < bits.length; i++) {
            this.dataValue[rxtx] |= bits[i] << i;
        }
        // 输出数据注释
        const formatted = this.formatValue(this.dataValue[rxtx]);
        if (formatted !== null) {
            this.put(this.startSample[rxtx], this.sampleIndex, {
                type: types_1.DecoderOutputType.ANNOTATION,
                annotationType: _Ann._RX_DATA + rxtx,
                values: [formatted],
                rawData: this.dataValue[rxtx]
            });
        }
        // 处理包逻辑 - 对应原版的handle_packet
        this.handlePacket(rxtx);
        this.dataBits[rxtx] = [];
        this.advanceState(rxtx);
    }
    /**
     * 处理包逻辑
     * 对应原解码器的 handle_packet()
     */
    handlePacket(rxtx) {
        // 简化实现 - 可根据需要扩展包处理功能
        // 这里主要用于记录数据到包缓存
        if (this.packetCache[rxtx].length === 0) {
            this.ssPacket[rxtx] = this.startSample[rxtx];
        }
        this.packetCache[rxtx].push(this.dataValue[rxtx]);
        // 简单的包终止条件 - 可配置
        if (this.packetCache[rxtx].length >= 16) { // 最多16字节的包
            this.esPacket[rxtx] = this.sampleIndex;
            let packetString = '';
            for (const byte of this.packetCache[rxtx]) {
                packetString += this.formatValue(byte);
                if (this.format !== 'ascii') {
                    packetString += ' ';
                }
            }
            if (this.format !== 'ascii' && packetString.endsWith(' ')) {
                packetString = packetString.slice(0, -1);
            }
            this.put(this.ssPacket[rxtx], this.esPacket[rxtx], {
                type: types_1.DecoderOutputType.ANNOTATION,
                annotationType: _Ann._RX_PACKET + rxtx,
                values: [packetString]
            });
            this.packetCache[rxtx] = [];
        }
    }
    /**
     * 获取校验位
     * 对应原解码器的 get_parity_bit()
     */
    getParityBit(rxtx, signal) {
        this.parityBit[rxtx] = signal;
        this.curFrameBit[rxtx]++;
        if (parityOk(this.parity, this.parityBit[rxtx], this.dataValue[rxtx], this.dataBitsCount)) {
            this.put(this.sampleIndex, this.sampleIndex + 1, {
                type: types_1.DecoderOutputType.ANNOTATION,
                annotationType: _Ann._RX_PARITY_OK + rxtx,
                values: ['Parity bit', 'Parity', 'P']
            });
        }
        else {
            this.put(this.sampleIndex, this.sampleIndex + 1, {
                type: types_1.DecoderOutputType.ANNOTATION,
                annotationType: _Ann._RX_PARITY_ERR + rxtx,
                values: ['Parity error', 'Parity err', 'PE']
            });
            this.frameValid[rxtx] = false;
        }
        this.advanceState(rxtx);
    }
    /**
     * 获取停止位
     * 对应原解码器的 get_stop_bits()
     */
    getStopBits(rxtx, signal) {
        this.stopBits[rxtx].push(signal);
        this.curFrameBit[rxtx]++;
        // 停止位必须是1
        if (signal !== 1) {
            this.put(this.sampleIndex, this.sampleIndex + 1, {
                type: types_1.DecoderOutputType.ANNOTATION,
                annotationType: _Ann._RX_WARN + rxtx,
                values: ['Frame error', 'Frame err', 'FE']
            });
            this.frameValid[rxtx] = false;
        }
        this.put(this.sampleIndex, this.sampleIndex + 1, {
            type: types_1.DecoderOutputType.ANNOTATION,
            annotationType: _Ann._RX_STOP + rxtx,
            values: ['Stop bit', 'Stop', 'T']
        });
        // 检查是否收集了所有停止位
        if (this.stopBits[rxtx].length >= this.stopBitsCount) {
            this.advanceState(rxtx);
        }
    }
    /**
     * 推进状态
     * 对应原解码器的 advance_state() - 完整实现状态转换逻辑
     */
    advanceState(rxtx, signal, fatal = false, idle) {
        const frameEnd = this.frameStart[rxtx] + this.frameLenSampleCount;
        if (idle !== undefined) {
            // 当调用者请求时，在调用者指定的位置后开始另一个（潜在的）空闲期
            this.idleStart[rxtx] = idle;
        }
        if (fatal) {
            // 当调用者请求时，不前进到下一个UART帧字段，而是前进到下一个START位的开始
            this.state[rxtx] = 'WAIT FOR START BIT';
            return;
        }
        // 推进到下一个预期的UART帧字段。处理可选字段的缺失。
        // 在（可选）STOP位字段后强制扫描下一个IDLE，以便调用者无需处理可选字段的存在。
        switch (this.state[rxtx]) {
            case 'WAIT FOR START BIT':
                this.state[rxtx] = 'GET START BIT';
                return;
            case 'GET START BIT':
                this.state[rxtx] = 'GET DATA BITS';
                return;
            case 'GET DATA BITS':
                this.state[rxtx] = 'GET PARITY BIT';
                if (this.parity !== 'none') {
                    return;
                }
            // FALLTHROUGH - 没有校验位时直接进入停止位
            case 'GET PARITY BIT':
                this.state[rxtx] = 'GET STOP BITS';
                if (this.stopBitsCount > 0) {
                    return;
                }
            // FALLTHROUGH - 没有停止位时直接进入帧处理
            case 'GET STOP BITS':
                // 后处理之前接收的UART帧。将读取位置推进到帧最后一位时间之后。
                // 这样下一个START位的开始就不会落在之前接收的UART帧的末尾。
                // 这提高了在有故障输入数据时的鲁棒性。
                const ss = this.frameStart[rxtx];
                const es = this.sampleIndex + Math.ceil(this.bitWidth / 2);
                this.handleFrame(rxtx, ss, es);
                this.state[rxtx] = 'WAIT FOR START BIT';
                this.idleStart[rxtx] = frameEnd;
                return;
            default:
                // 未处理的状态，实际上是编程错误
                this.state[rxtx] = 'WAIT FOR START BIT';
                return;
        }
    }
    /**
     * 处理完整帧
     * 对应原解码器的 handle_frame()
     */
    handleFrame(_rxtx, _ss, _es) {
        // 输出完整帧信息
        // UART帧处理完成
    }
    /**
     * 格式化值
     * 对应原解码器的 format_value()
     */
    formatValue(value) {
        const bits = this.dataBitsCount;
        switch (this.format) {
            case 'ascii': {
                if (value >= 32 && value <= 126) {
                    return String.fromCharCode(value);
                }
                const _hexfmt = bits <= 8 ? '[{:02X}]' : '[{:03X}]';
                return `[${value.toString(16).toUpperCase().padStart(bits <= 8 ? 2 : 3, '0')}]`;
            }
            case 'dec':
                return value.toString(10);
            case 'hex': {
                const hexDigits = Math.ceil(bits / 4);
                return value.toString(16).toUpperCase().padStart(hexDigits, '0');
            }
            case 'oct': {
                const octDigits = Math.ceil(bits / 3);
                return value.toString(8).padStart(octDigits, '0');
            }
            case 'bin': {
                return value.toString(2).padStart(bits, '0');
            }
            default:
                return null;
        }
    }
    /**
     * 重置解码器状态
     */
    reset() {
        super.reset();
        this.frameStart = [-1, -1];
        this.frameValid = [true, true];
        this.curFrameBit = [0, 0];
        this.startBit = [-1, -1];
        this.curDataBit = [0, 0];
        this.dataValue = [0, 0];
        this.parityBit = [-1, -1];
        this.stopBits = [[], []];
        this.startSample = [-1, -1];
        this.state = ['WAIT FOR START BIT', 'WAIT FOR START BIT'];
        this.dataBits = [[], []];
        this.breakStart = [null, null];
        this.packetCache = [[], []];
        this.ssPacket = [null, null];
        this.esPacket = [null, null];
        this.idleStart = [null, null];
    }
}
exports.UARTDecoder = UARTDecoder;
/* eslint-enable no-unused-vars */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,