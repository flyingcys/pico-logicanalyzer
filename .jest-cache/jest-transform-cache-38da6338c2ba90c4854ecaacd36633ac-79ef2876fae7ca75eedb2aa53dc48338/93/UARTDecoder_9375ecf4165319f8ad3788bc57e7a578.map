{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/decoders/protocols/UARTDecoder.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/decoders/protocols/UARTDecoder.ts"],"sourcesContent":["/**\r\n * UART协议解码器\r\n * 基于 @logicanalyzer/Software 的 uart/pd.py 精确移植\r\n * 实现完整的UART协议解码功能\r\n */\r\n\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport { DecoderBase } from '../DecoderBase';\r\nimport {\r\n  DecoderChannel,\r\n  DecoderOption,\r\n  DecoderOptionValue,\r\n  DecoderResult,\r\n  DecoderOutputType,\r\n  ChannelData\r\n} from '../types';\r\n\r\n/**\r\n * UART数据方向\r\n */\r\nconst RX = 0;\r\nconst TX = 1;\r\n\r\n/**\r\n * 注释类型枚举\r\n * 对应原解码器的 _Ann 类\r\n */\r\nenum _Ann {\r\n  _RX_DATA = 0, _TX_DATA = 1, _RX_START = 2, _TX_START = 3,\r\n  _RX_PARITY_OK = 4, _TX_PARITY_OK = 5, _RX_PARITY_ERR = 6, _TX_PARITY_ERR = 7,\r\n  _RX_STOP = 8, _TX_STOP = 9, _RX_WARN = 10, _TX_WARN = 11,\r\n  _RX_DATA_BIT = 12, _TX_DATA_BIT = 13, _RX_BREAK = 14, _TX_BREAK = 15,\r\n  _RX_PACKET = 16, _TX_PACKET = 17\r\n}\r\n\r\n/**\r\n * 数据位信息\r\n */\r\ninterface DataBitInfo {\r\n  value: number;\r\n  startSample: number;\r\n  endSample: number;\r\n}\r\n\r\n/**\r\n * UART状态类型\r\n */\r\ntype UARTState = 'WAIT FOR START BIT' | 'GET START BIT' | 'GET DATA BITS' | 'GET PARITY BIT' | 'GET STOP BITS';\r\n\r\n/**\r\n * 校验位验证函数\r\n * 对应原解码器的 parity_ok() 函数\r\n */\r\nfunction parityOk(parityType: string, parityBit: number, data: number, _dataBits: number): boolean {\r\n  if (parityType === 'ignore') {\r\n    return true;\r\n  }\r\n\r\n  // 简单情况处理 (校验位总是1或0)\r\n  if (parityType === 'zero') {\r\n    return parityBit === 0;\r\n  } else if (parityType === 'one') {\r\n    return parityBit === 1;\r\n  }\r\n\r\n  // 计算数据中1的个数 (包括校验位本身)\r\n  const ones = data.toString(2).split('1').length - 1 + parityBit;\r\n\r\n  // 检查奇偶校验\r\n  if (parityType === 'odd') {\r\n    return (ones % 2) === 1;\r\n  } else if (parityType === 'even') {\r\n    return (ones % 2) === 0;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * UART协议解码器实现\r\n * 对应原软件的 uart Decoder 类\r\n */\r\nexport class UARTDecoder extends DecoderBase {\r\n  // 解码器元数据 - 完全匹配原Python解码器\r\n  readonly id = 'uart';\r\n  readonly name = 'UART';\r\n  readonly longname = 'Universal Asynchronous Receiver/Transmitter';\r\n  readonly desc = 'Asynchronous, serial bus.';\r\n  readonly license = 'gplv2+';\r\n  readonly inputs = ['logic'];\r\n  readonly outputs = ['uart'];\r\n  readonly tags = ['Embedded/industrial'];\r\n\r\n  // 通道定义 - 匹配原解码器 (都是可选通道)\r\n  readonly channels: DecoderChannel[] = [\r\n    { id: 'rx', name: 'RX', desc: 'UART receive line', required: false, index: 0 },\r\n    { id: 'tx', name: 'TX', desc: 'UART transmit line', required: false, index: 1 }\r\n  ];\r\n\r\n  // 配置选项 - 匹配原解码器\r\n  readonly options: DecoderOption[] = [\r\n    {\r\n      id: 'baudrate',\r\n      desc: 'Baud rate',\r\n      default: 115200,\r\n      type: 'int'\r\n    },\r\n    {\r\n      id: 'data_bits',\r\n      desc: 'Data bits',\r\n      default: 8,\r\n      values: ['5', '6', '7', '8', '9'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'parity',\r\n      desc: 'Parity',\r\n      default: 'none',\r\n      values: ['none', 'odd', 'even', 'zero', 'one', 'ignore'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'stop_bits',\r\n      desc: 'Stop bits',\r\n      default: 1.0,\r\n      values: ['0.0', '0.5', '1.0', '1.5', '2.0'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'bit_order',\r\n      desc: 'Bit order',\r\n      default: 'lsb-first',\r\n      values: ['lsb-first', 'msb-first'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'format',\r\n      desc: 'Data format',\r\n      default: 'hex',\r\n      values: ['ascii', 'dec', 'hex', 'oct', 'bin'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'invert_rx',\r\n      desc: 'Invert RX',\r\n      default: 'no',\r\n      values: ['yes', 'no'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'invert_tx',\r\n      desc: 'Invert TX',\r\n      default: 'no',\r\n      values: ['yes', 'no'],\r\n      type: 'list'\r\n    },\r\n    {\r\n      id: 'sample_point',\r\n      desc: 'Sample point (%)',\r\n      default: 50,\r\n      type: 'int'\r\n    }\r\n  ];\r\n\r\n  // 注释类型定义 - 匹配原解码器的annotations\r\n  readonly annotations: Array<[string, string, string?]> = [\r\n    ['rx-data', 'RX data'],\r\n    ['tx-data', 'TX data'],\r\n    ['rx-start', 'RX start bit'],\r\n    ['tx-start', 'TX start bit'],\r\n    ['rx-parity-ok', 'RX parity OK bit'],\r\n    ['tx-parity-ok', 'TX parity OK bit'],\r\n    ['rx-parity-err', 'RX parity error bit'],\r\n    ['tx-parity-err', 'TX parity error bit'],\r\n    ['rx-stop', 'RX stop bit'],\r\n    ['tx-stop', 'TX stop bit'],\r\n    ['rx-warning', 'RX warning'],\r\n    ['tx-warning', 'TX warning'],\r\n    ['rx-data-bit', 'RX data bit'],\r\n    ['tx-data-bit', 'TX data bit'],\r\n    ['rx-break', 'RX break'],\r\n    ['tx-break', 'TX break'],\r\n    ['rx-packet', 'RX packet'],\r\n    ['tx-packet', 'TX packet']\r\n  ];\r\n\r\n  // 注释行定义 - 匹配原解码器的annotation_rows\r\n  readonly annotationRows: Array<[string, string, number[]]> = [\r\n    ['rx-data-bits', 'RX bits', [_Ann._RX_DATA_BIT]],\r\n    ['rx-data-vals', 'RX data', [_Ann._RX_DATA, _Ann._RX_START, _Ann._RX_PARITY_OK, _Ann._RX_PARITY_ERR, _Ann._RX_STOP]],\r\n    ['rx-warnings', 'RX warnings', [_Ann._RX_WARN]],\r\n    ['rx-breaks', 'RX breaks', [_Ann._RX_BREAK]],\r\n    ['rx-packets', 'RX packets', [_Ann._RX_PACKET]],\r\n    ['tx-data-bits', 'TX bits', [_Ann._TX_DATA_BIT]],\r\n    ['tx-data-vals', 'TX data', [_Ann._TX_DATA, _Ann._TX_START, _Ann._TX_PARITY_OK, _Ann._TX_PARITY_ERR, _Ann._TX_STOP]],\r\n    ['tx-warnings', 'TX warnings', [_Ann._TX_WARN]],\r\n    ['tx-breaks', 'TX breaks', [_Ann._TX_BREAK]],\r\n    ['tx-packets', 'TX packets', [_Ann._TX_PACKET]]\r\n  ];\r\n\r\n  // 解码器状态变量 - 对应原解码器的实例变量\r\n  private frameStart = [-1, -1];\r\n  private frameValid = [true, true];\r\n  private curFrameBit = [0, 0];\r\n  private startBit = [-1, -1];\r\n  private curDataBit = [0, 0];\r\n  private dataValue = [0, 0];\r\n  private parityBit = [-1, -1];\r\n  private stopBits: number[][] = [[], []];\r\n  private startSample = [-1, -1];\r\n  private state: UARTState[] = ['WAIT FOR START BIT', 'WAIT FOR START BIT'];\r\n  private dataBits: DataBitInfo[][] = [[], []];\r\n  private breakStart = [null, null] as (number | null)[];\r\n  private packetCache: number[][] = [[], []];\r\n  private ssPacket = [null, null] as (number | null)[];\r\n  private esPacket = [null, null] as (number | null)[];\r\n  private idleStart = [null, null] as (number | null)[];\r\n\r\n  // 配置变量\r\n  private bitWidth = 0;\r\n  private frameLenSampleCount = 0;\r\n  private breakMinSampleCount = 0;\r\n  private byteWidth = 1;\r\n\r\n  // 通道可用性\r\n  private hasPin = [false, false];\r\n  private inv = [false, false];\r\n\r\n  // 选项值\r\n  private baudrate = 115200;\r\n  private dataBitsCount = 8;\r\n  private parity = 'none';\r\n  private stopBitsCount = 1.0;\r\n  private bitOrder = 'lsb-first';\r\n  private format = 'hex';\r\n  private samplePoint = 50;\r\n\r\n  /**\r\n   * 主解码方法\r\n   * 对应原解码器的 decode() 方法 - 完整实现原版逻辑\r\n   */\r\n  decode(\r\n    sampleRate: number,\r\n    channels: ChannelData[],\r\n    options: DecoderOptionValue[]\r\n  ): DecoderResult[] {\r\n    if (!sampleRate) {\r\n      throw new Error('Cannot decode without samplerate.');\r\n    }\r\n\r\n    // 检查通道可用性\r\n    this.hasPin[RX] = channels.length > 0 && channels[0].samples.length > 0;\r\n    this.hasPin[TX] = channels.length > 1 && channels[1].samples.length > 0;\r\n\r\n    if (!this.hasPin[RX] && !this.hasPin[TX]) {\r\n      throw new Error('Need at least one of TX or RX pins.');\r\n    }\r\n\r\n    // 初始化\r\n    this.sampleRate = sampleRate;\r\n    this.prepareChannelData(channels, [\r\n      { captureIndex: 0, decoderIndex: 0 }, // RX\r\n      { captureIndex: 1, decoderIndex: 1 }  // TX\r\n    ]);\r\n\r\n    // 处理选项\r\n    this.processOptions(options);\r\n\r\n    // 计算位宽\r\n    this.bitWidth = sampleRate / this.baudrate;\r\n\r\n    // 计算完整帧的样本数 - 精确对应原版计算\r\n    let frameSamples = 1; // START位\r\n    frameSamples += this.dataBitsCount;\r\n    frameSamples += (this.parity === 'none') ? 0 : 1;\r\n    frameSamples += this.stopBitsCount;\r\n    frameSamples *= this.bitWidth;\r\n    this.frameLenSampleCount = Math.ceil(frameSamples);\r\n    this.breakMinSampleCount = this.frameLenSampleCount;\r\n\r\n    // 开始解码\r\n    this.start();\r\n    this.reset();\r\n\r\n    // 主解码循环 - 完全基于原版的wait/matched机制\r\n    this.runMainLoop();\r\n\r\n    return this.results;\r\n  }\r\n\r\n  /**\r\n   * 处理配置选项\r\n   */\r\n  private processOptions(options: DecoderOptionValue[]): void {\r\n    for (const option of options) {\r\n      switch (option.optionIndex) {\r\n        case 0: // baudrate\r\n          this.baudrate = option.value as number;\r\n          break;\r\n        case 1: // data_bits\r\n          this.dataBitsCount = parseInt(option.value as string);\r\n          break;\r\n        case 2: // parity\r\n          this.parity = option.value as string;\r\n          break;\r\n        case 3: // stop_bits\r\n          this.stopBitsCount = parseFloat(option.value as string);\r\n          break;\r\n        case 4: // bit_order\r\n          this.bitOrder = option.value as string;\r\n          break;\r\n        case 5: // format\r\n          this.format = option.value as string;\r\n          break;\r\n        case 6: // invert_rx\r\n          this.inv[RX] = (option.value as string) === 'yes';\r\n          break;\r\n        case 7: // invert_tx\r\n          this.inv[TX] = (option.value as string) === 'yes';\r\n          break;\r\n        case 8: // sample_point\r\n          this.samplePoint = option.value as number;\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.byteWidth = Math.floor((this.dataBitsCount + 7) / 8);\r\n  }\r\n\r\n  /**\r\n   * 主解码循环\r\n   * 简化实现，直接遍历样本数据进行解码\r\n   */\r\n  private runMainLoop(): void {\r\n    try {\r\n      // 简化的解码循环，直接遍历数据\r\n      if (this.hasPin[RX]) {\r\n        this.decodeChannelSimple(RX);\r\n      }\r\n      if (this.hasPin[TX]) {\r\n        this.decodeChannelSimple(TX);\r\n      }\r\n    } catch (error) {\r\n      // 捕获End of samples reached错误，正常结束解码\r\n      if (error instanceof Error && error.message === 'End of samples reached') {\r\n        return;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 简化的通道解码\r\n   */\r\n  private decodeChannelSimple(rxtx: number): void {\r\n    const data = this.channelData[rxtx];\r\n    if (!data || data.length === 0) return;\r\n\r\n    let sampleIndex = 0;\r\n    this.sampleIndex = 0;\r\n\r\n    while (sampleIndex < data.length - 1) {\r\n      this.sampleIndex = sampleIndex;\r\n\r\n      // 根据状态处理当前样本\r\n      const currentSignal = this.getCurrentChannelValue(rxtx, sampleIndex);\r\n      const nextSignal = this.getCurrentChannelValue(rxtx, sampleIndex + 1);\r\n\r\n      // 检测起始位（从高到低的跳变）\r\n      if (this.state[rxtx] === 'WAIT FOR START BIT' && currentSignal === 1 && nextSignal === 0) {\r\n        this.frameStart[rxtx] = sampleIndex + 1;\r\n        this.state[rxtx] = 'GET START BIT';\r\n        this.curFrameBit[rxtx] = 0;\r\n        this.frameValid[rxtx] = true;\r\n        sampleIndex += Math.floor(this.bitWidth); // 跳到下一位的采样点\r\n        continue;\r\n      }\r\n\r\n      // 处理其他状态\r\n      if (this.state[rxtx] !== 'WAIT FOR START BIT') {\r\n        const bitCenter = this.frameStart[rxtx] + this.curFrameBit[rxtx] * this.bitWidth + this.bitWidth / 2;\r\n        if (sampleIndex >= Math.floor(bitCenter)) {\r\n          const signal = this.getCurrentChannelValue(rxtx, Math.floor(bitCenter));\r\n          this.inspectSample(rxtx, signal, this.inv[rxtx]);\r\n          sampleIndex = Math.floor(bitCenter) + 1;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      sampleIndex++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取等待条件\r\n   * 对应原解码器的 get_wait_cond()\r\n   */\r\n  private getWaitCond(rxtx: number, inv: boolean): { [key: number]: string } | { skip: number } | null {\r\n    const state = this.state[rxtx];\r\n\r\n    if (state === 'WAIT FOR START BIT') {\r\n      return { [rxtx]: inv ? 'r' : 'f' }; // 等待下降沿（起始位）\r\n    }\r\n\r\n    if (['GET START BIT', 'GET DATA BITS', 'GET PARITY BIT', 'GET STOP BITS'].includes(state)) {\r\n      const bitnum = this.curFrameBit[rxtx];\r\n      const wantNum = Math.ceil(this.getSamplePoint(rxtx, bitnum));\r\n      const skip = wantNum - this.sampleIndex;\r\n      return skip > 0 ? { skip } : null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取空闲检测条件\r\n   * 对应原解码器的 get_idle_cond()\r\n   */\r\n  private getIdleCond(rxtx: number, _inv: boolean): { skip: number } | null {\r\n    if (this.idleStart[rxtx] === null) {\r\n      return null;\r\n    }\r\n\r\n    const endOfFrame = this.idleStart[rxtx] + this.frameLenSampleCount;\r\n    if (endOfFrame < this.sampleIndex) {\r\n      return null;\r\n    }\r\n\r\n    const skip = endOfFrame - this.sampleIndex;\r\n    return skip > 0 ? { skip } : null;\r\n  }\r\n\r\n  /**\r\n   * 检查边沿信号\r\n   * 对应原解码器的 inspect_edge() - 用于Break检测\r\n   */\r\n  private inspectEdge(rxtx: number, signal: number, inv: boolean): void {\r\n    if (inv) {\r\n      signal = signal ? 0 : 1;\r\n    }\r\n\r\n    if (!signal) {\r\n      // 信号变低，开始一个新的Break检测区间\r\n      this.breakStart[rxtx] = this.sampleIndex;\r\n      return;\r\n    }\r\n\r\n    // 信号变高，是否有一个扩展的低信号周期？\r\n    if (this.breakStart[rxtx] === null) {\r\n      return;\r\n    }\r\n\r\n    const diff = this.sampleIndex - this.breakStart[rxtx];\r\n    if (diff >= this.breakMinSampleCount) {\r\n      const ss = this.frameStart[rxtx];\r\n      const es = this.sampleIndex;\r\n      this.handleBreak(rxtx, ss, es);\r\n    }\r\n    this.breakStart[rxtx] = null;\r\n  }\r\n\r\n  /**\r\n   * 检查空闲状态\r\n   * 对应原解码器的 inspect_idle()\r\n   */\r\n  private inspectIdle(rxtx: number, signal: number, inv: boolean): void {\r\n    if (inv) {\r\n      signal = signal ? 0 : 1;\r\n    }\r\n\r\n    if (!signal) {\r\n      // 低输入，停止检查\r\n      this.idleStart[rxtx] = null;\r\n      return;\r\n    }\r\n\r\n    // 高输入，刚刚达到或仍然稳定\r\n    if (this.idleStart[rxtx] === null) {\r\n      this.idleStart[rxtx] = this.sampleIndex;\r\n    }\r\n\r\n    const diff = this.sampleIndex - this.idleStart[rxtx];\r\n    if (diff < this.frameLenSampleCount) {\r\n      return;\r\n    }\r\n\r\n    const ss = this.idleStart[rxtx];\r\n    const es = this.sampleIndex;\r\n    this.handleIdle(rxtx, ss, es);\r\n    this.idleStart[rxtx] = es;\r\n  }\r\n\r\n  /**\r\n   * 处理Break条件\r\n   * 对应原解码器的 handle_break()\r\n   */\r\n  private handleBreak(rxtx: number, ss: number, es: number): void {\r\n    this.put(ss, es, {\r\n      type: DecoderOutputType.ANNOTATION,\r\n      annotationType: _Ann._RX_BREAK + rxtx,\r\n      values: ['Break condition', 'Break', 'Brk', 'B']\r\n    });\r\n    this.state[rxtx] = 'WAIT FOR START BIT';\r\n  }\r\n\r\n  /**\r\n   * 处理空闲状态\r\n   * 对应原解码器的 handle_idle()\r\n   */\r\n  private handleIdle(_rxtx: number, _ss: number, _es: number): void {\r\n    // 空闲状态不需要特殊显示，只记录状态\r\n    // UART空闲状态检测\r\n  }\r\n\r\n  /**\r\n   * 获取当前通道值\r\n   */\r\n  private getCurrentChannelValue(rxtx: number, sampleIndex?: number): number {\r\n    if (rxtx >= this.channelData.length || !this.channelData[rxtx]) {\r\n      return 1; // 空闲状态\r\n    }\r\n    const channel = this.channelData[rxtx];\r\n    const index = sampleIndex !== undefined ? sampleIndex : this.sampleIndex;\r\n    return index < channel.length ? channel[index] : 1;\r\n  }\r\n\r\n  /**\r\n   * 获取样本点位置\r\n   * 对应原解码器的 get_sample_point()\r\n   */\r\n  private getSamplePoint(rxtx: number, bitNum: number): number {\r\n    const perc = (this.samplePoint >= 1 && this.samplePoint <= 99) ? this.samplePoint : 50;\r\n    const percFloat = perc / 100.0;\r\n    let bitPos = (this.bitWidth - 1) * percFloat;\r\n    bitPos += this.frameStart[rxtx];\r\n    bitPos += bitNum * this.bitWidth;\r\n    return bitPos;\r\n  }\r\n\r\n  /**\r\n   * 检查样本\r\n   * 对应原解码器的 inspect_sample()\r\n   */\r\n  private inspectSample(rxtx: number, signal: number, inv: boolean): void {\r\n    if (inv) {\r\n      signal = signal ? 0 : 1;\r\n    }\r\n\r\n    const state = this.state[rxtx];\r\n    switch (state) {\r\n      case 'WAIT FOR START BIT':\r\n        this.waitForStartBit(rxtx, signal);\r\n        break;\r\n      case 'GET START BIT':\r\n        this.getStartBit(rxtx, signal);\r\n        break;\r\n      case 'GET DATA BITS':\r\n        this.getDataBits(rxtx, signal);\r\n        break;\r\n      case 'GET PARITY BIT':\r\n        this.getParityBit(rxtx, signal);\r\n        break;\r\n      case 'GET STOP BITS':\r\n        this.getStopBits(rxtx, signal);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 等待起始位\r\n   * 对应原解码器的 wait_for_start_bit()\r\n   */\r\n  private waitForStartBit(rxtx: number, signal: number): void {\r\n    // 保存起始位开始的样本编号\r\n    this.frameStart[rxtx] = this.sampleIndex;\r\n    this.frameValid[rxtx] = true;\r\n    this.curFrameBit[rxtx] = 0;\r\n\r\n    this.advanceState(rxtx, signal);\r\n  }\r\n\r\n  /**\r\n   * 获取起始位\r\n   * 对应原解码器的 get_start_bit()\r\n   */\r\n  private getStartBit(rxtx: number, signal: number): void {\r\n    this.startBit[rxtx] = signal;\r\n    this.curFrameBit[rxtx]++;\r\n\r\n    // 起始位必须是0\r\n    if (this.startBit[rxtx] !== 0) {\r\n      this.put(this.frameStart[rxtx], this.sampleIndex, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: _Ann._RX_WARN + rxtx,\r\n        values: ['Frame error', 'Frame err', 'FE']\r\n      });\r\n      this.frameValid[rxtx] = false;\r\n      const es = this.sampleIndex + Math.ceil(this.bitWidth / 2);\r\n      this.advanceState(rxtx, signal, true, es);\r\n      return;\r\n    }\r\n\r\n    // 重置内部状态\r\n    this.curDataBit[rxtx] = 0;\r\n    this.dataValue[rxtx] = 0;\r\n    this.parityBit[rxtx] = -1;\r\n    this.stopBits[rxtx] = [];\r\n    this.startSample[rxtx] = -1;\r\n    this.dataBits[rxtx] = [];\r\n\r\n    this.put(this.frameStart[rxtx], this.sampleIndex, {\r\n      type: DecoderOutputType.ANNOTATION,\r\n      annotationType: _Ann._RX_START + rxtx,\r\n      values: ['Start bit', 'Start', 'S']\r\n    });\r\n\r\n    this.advanceState(rxtx, signal);\r\n  }\r\n\r\n  /**\r\n   * 获取数据位\r\n   * 对应原解码器的 get_data_bits() - 完整实现包括包处理\r\n   */\r\n  private getDataBits(rxtx: number, signal: number): void {\r\n    // 保存第一个数据位的样本编号\r\n    if (this.startSample[rxtx] === -1) {\r\n      this.startSample[rxtx] = this.sampleIndex;\r\n    }\r\n\r\n    this.put(this.sampleIndex, this.sampleIndex + 1, {\r\n      type: DecoderOutputType.ANNOTATION,\r\n      annotationType: _Ann._RX_DATA_BIT + rxtx,\r\n      values: [signal.toString()]\r\n    });\r\n\r\n    // 存储个别数据位 - 精确对应原版的存储格式\r\n    const halfBit = Math.floor(this.bitWidth / 2);\r\n    this.dataBits[rxtx].push({\r\n      value: signal,\r\n      startSample: this.sampleIndex - halfBit,\r\n      endSample: this.sampleIndex + halfBit\r\n    });\r\n    this.curFrameBit[rxtx]++;\r\n\r\n    this.curDataBit[rxtx]++;\r\n    if (this.curDataBit[rxtx] < this.dataBitsCount) {\r\n      return;\r\n    }\r\n\r\n    // 转换累积的数据位为数据值 - 对应原版的bitpack逻辑\r\n    const bits = this.dataBits[rxtx].map(b => b.value);\r\n    if (this.bitOrder === 'msb-first') {\r\n      bits.reverse();\r\n    }\r\n\r\n    // 使用bitpack算法\r\n    this.dataValue[rxtx] = 0;\r\n    for (let i = 0; i < bits.length; i++) {\r\n      this.dataValue[rxtx] |= bits[i] << i;\r\n    }\r\n\r\n    // 输出数据注释\r\n    const formatted = this.formatValue(this.dataValue[rxtx]);\r\n    if (formatted !== null) {\r\n      this.put(this.startSample[rxtx], this.sampleIndex, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: _Ann._RX_DATA + rxtx,\r\n        values: [formatted],\r\n        rawData: this.dataValue[rxtx]\r\n      });\r\n    }\r\n\r\n    // 处理包逻辑 - 对应原版的handle_packet\r\n    this.handlePacket(rxtx);\r\n\r\n    this.dataBits[rxtx] = [];\r\n    this.advanceState(rxtx);\r\n  }\r\n\r\n  /**\r\n   * 处理包逻辑\r\n   * 对应原解码器的 handle_packet()\r\n   */\r\n  private handlePacket(rxtx: number): void {\r\n    // 简化实现 - 可根据需要扩展包处理功能\r\n    // 这里主要用于记录数据到包缓存\r\n    if (this.packetCache[rxtx].length === 0) {\r\n      this.ssPacket[rxtx] = this.startSample[rxtx];\r\n    }\r\n    this.packetCache[rxtx].push(this.dataValue[rxtx]);\r\n\r\n    // 简单的包终止条件 - 可配置\r\n    if (this.packetCache[rxtx].length >= 16) { // 最多16字节的包\r\n      this.esPacket[rxtx] = this.sampleIndex;\r\n      let packetString = '';\r\n      for (const byte of this.packetCache[rxtx]) {\r\n        packetString += this.formatValue(byte);\r\n        if (this.format !== 'ascii') {\r\n          packetString += ' ';\r\n        }\r\n      }\r\n      if (this.format !== 'ascii' && packetString.endsWith(' ')) {\r\n        packetString = packetString.slice(0, -1);\r\n      }\r\n\r\n      this.put(this.ssPacket[rxtx]!, this.esPacket[rxtx]!, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: _Ann._RX_PACKET + rxtx,\r\n        values: [packetString]\r\n      });\r\n      this.packetCache[rxtx] = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取校验位\r\n   * 对应原解码器的 get_parity_bit()\r\n   */\r\n  private getParityBit(rxtx: number, signal: number): void {\r\n    this.parityBit[rxtx] = signal;\r\n    this.curFrameBit[rxtx]++;\r\n\r\n    if (parityOk(this.parity, this.parityBit[rxtx], this.dataValue[rxtx], this.dataBitsCount)) {\r\n      this.put(this.sampleIndex, this.sampleIndex + 1, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: _Ann._RX_PARITY_OK + rxtx,\r\n        values: ['Parity bit', 'Parity', 'P']\r\n      });\r\n    } else {\r\n      this.put(this.sampleIndex, this.sampleIndex + 1, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: _Ann._RX_PARITY_ERR + rxtx,\r\n        values: ['Parity error', 'Parity err', 'PE']\r\n      });\r\n      this.frameValid[rxtx] = false;\r\n    }\r\n\r\n    this.advanceState(rxtx);\r\n  }\r\n\r\n  /**\r\n   * 获取停止位\r\n   * 对应原解码器的 get_stop_bits()\r\n   */\r\n  private getStopBits(rxtx: number, signal: number): void {\r\n    this.stopBits[rxtx].push(signal);\r\n    this.curFrameBit[rxtx]++;\r\n\r\n    // 停止位必须是1\r\n    if (signal !== 1) {\r\n      this.put(this.sampleIndex, this.sampleIndex + 1, {\r\n        type: DecoderOutputType.ANNOTATION,\r\n        annotationType: _Ann._RX_WARN + rxtx,\r\n        values: ['Frame error', 'Frame err', 'FE']\r\n      });\r\n      this.frameValid[rxtx] = false;\r\n    }\r\n\r\n    this.put(this.sampleIndex, this.sampleIndex + 1, {\r\n      type: DecoderOutputType.ANNOTATION,\r\n      annotationType: _Ann._RX_STOP + rxtx,\r\n      values: ['Stop bit', 'Stop', 'T']\r\n    });\r\n\r\n    // 检查是否收集了所有停止位\r\n    if (this.stopBits[rxtx].length >= this.stopBitsCount) {\r\n      this.advanceState(rxtx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 推进状态\r\n   * 对应原解码器的 advance_state() - 完整实现状态转换逻辑\r\n   */\r\n  private advanceState(rxtx: number, signal?: number, fatal = false, idle?: number): void {\r\n    const frameEnd = this.frameStart[rxtx] + this.frameLenSampleCount;\r\n\r\n    if (idle !== undefined) {\r\n      // 当调用者请求时，在调用者指定的位置后开始另一个（潜在的）空闲期\r\n      this.idleStart[rxtx] = idle;\r\n    }\r\n\r\n    if (fatal) {\r\n      // 当调用者请求时，不前进到下一个UART帧字段，而是前进到下一个START位的开始\r\n      this.state[rxtx] = 'WAIT FOR START BIT';\r\n      return;\r\n    }\r\n\r\n    // 推进到下一个预期的UART帧字段。处理可选字段的缺失。\r\n    // 在（可选）STOP位字段后强制扫描下一个IDLE，以便调用者无需处理可选字段的存在。\r\n    switch (this.state[rxtx]) {\r\n      case 'WAIT FOR START BIT':\r\n        this.state[rxtx] = 'GET START BIT';\r\n        return;\r\n\r\n      case 'GET START BIT':\r\n        this.state[rxtx] = 'GET DATA BITS';\r\n        return;\r\n\r\n      case 'GET DATA BITS':\r\n        this.state[rxtx] = 'GET PARITY BIT';\r\n        if (this.parity !== 'none') {\r\n          return;\r\n        }\r\n        // FALLTHROUGH - 没有校验位时直接进入停止位\r\n\r\n      case 'GET PARITY BIT':\r\n        this.state[rxtx] = 'GET STOP BITS';\r\n        if (this.stopBitsCount > 0) {\r\n          return;\r\n        }\r\n        // FALLTHROUGH - 没有停止位时直接进入帧处理\r\n\r\n      case 'GET STOP BITS':\r\n        // 后处理之前接收的UART帧。将读取位置推进到帧最后一位时间之后。\r\n        // 这样下一个START位的开始就不会落在之前接收的UART帧的末尾。\r\n        // 这提高了在有故障输入数据时的鲁棒性。\r\n        const ss = this.frameStart[rxtx];\r\n        const es = this.sampleIndex + Math.ceil(this.bitWidth / 2);\r\n        this.handleFrame(rxtx, ss, es);\r\n        this.state[rxtx] = 'WAIT FOR START BIT';\r\n        this.idleStart[rxtx] = frameEnd;\r\n        return;\r\n\r\n      default:\r\n        // 未处理的状态，实际上是编程错误\r\n        this.state[rxtx] = 'WAIT FOR START BIT';\r\n        return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理完整帧\r\n   * 对应原解码器的 handle_frame()\r\n   */\r\n  private handleFrame(_rxtx: number, _ss: number, _es: number): void {\r\n    // 输出完整帧信息\r\n    // UART帧处理完成\r\n  }\r\n\r\n  /**\r\n   * 格式化值\r\n   * 对应原解码器的 format_value()\r\n   */\r\n  private formatValue(value: number): string | null {\r\n    const bits = this.dataBitsCount;\r\n\r\n    switch (this.format) {\r\n      case 'ascii': {\r\n        if (value >= 32 && value <= 126) {\r\n          return String.fromCharCode(value);\r\n        }\r\n        const _hexfmt = bits <= 8 ? '[{:02X}]' : '[{:03X}]';\r\n        return `[${value.toString(16).toUpperCase().padStart(bits <= 8 ? 2 : 3, '0')}]`;\r\n      }\r\n\r\n      case 'dec':\r\n        return value.toString(10);\r\n\r\n      case 'hex': {\r\n        const hexDigits = Math.ceil(bits / 4);\r\n        return value.toString(16).toUpperCase().padStart(hexDigits, '0');\r\n      }\r\n\r\n      case 'oct': {\r\n        const octDigits = Math.ceil(bits / 3);\r\n        return value.toString(8).padStart(octDigits, '0');\r\n      }\r\n\r\n      case 'bin': {\r\n        return value.toString(2).padStart(bits, '0');\r\n      }\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重置解码器状态\r\n   */\r\n  protected reset(): void {\r\n    super.reset();\r\n    this.frameStart = [-1, -1];\r\n    this.frameValid = [true, true];\r\n    this.curFrameBit = [0, 0];\r\n    this.startBit = [-1, -1];\r\n    this.curDataBit = [0, 0];\r\n    this.dataValue = [0, 0];\r\n    this.parityBit = [-1, -1];\r\n    this.stopBits = [[], []];\r\n    this.startSample = [-1, -1];\r\n    this.state = ['WAIT FOR START BIT', 'WAIT FOR START BIT'];\r\n    this.dataBits = [[], []];\r\n    this.breakStart = [null, null];\r\n    this.packetCache = [[], []];\r\n    this.ssPacket = [null, null];\r\n    this.esPacket = [null, null];\r\n    this.idleStart = [null, null];\r\n  }\r\n}\r\n\r\n/* eslint-enable no-unused-vars */\r\n"],"version":3}