{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/BinaryDataParser.test.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/BinaryDataParser.test.ts"],"sourcesContent":["/**\r\n * BinaryDataParser 模块单元测试套件\r\n * 全面测试二进制数据解析器的功能和性能\r\n */\r\n\r\nimport {\r\n  BinaryDataParser,\r\n  BinaryDataParserFactory,\r\n  BinaryDataFormat,\r\n  BinaryParserConfig,\r\n  ChannelExtractionConfig,\r\n  ParseResult\r\n} from '../../../src/models/BinaryDataParser';\r\nimport {\r\n  CaptureSession,\r\n  AnalyzerChannel\r\n} from '../../../src/models/CaptureModels';\r\nimport {\r\n  CaptureMode\r\n} from '../../../src/models/AnalyzerTypes';\r\n\r\ndescribe('BinaryDataParser 模块测试套件', () => {\r\n  \r\n  describe('BinaryDataParser 基础功能测试', () => {\r\n    let parser: BinaryDataParser;\r\n    let session: CaptureSession;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser();\r\n      session = new CaptureSession();\r\n      session.frequency = 1000000;\r\n      session.preTriggerSamples = 100;\r\n      session.postTriggerSamples = 1000;\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'Channel 0'),\r\n        new AnalyzerChannel(1, 'Channel 1'),\r\n        new AnalyzerChannel(2, 'Channel 2')\r\n      ];\r\n    });\r\n    \r\n    it('应该正确初始化默认配置', () => {\r\n      const config = parser.getConfig();\r\n      \r\n      expect(config.format).toBe(BinaryDataFormat.Raw);\r\n      expect(config.compressionThreshold).toBe(1024 * 1024);\r\n      expect(config.enableOptimization).toBe(true);\r\n      expect(config.chunkSize).toBe(64 * 1024);\r\n      expect(config.enableValidation).toBe(true);\r\n    });\r\n    \r\n    it('应该正确更新配置', () => {\r\n      const newConfig: Partial<BinaryParserConfig> = {\r\n        format: BinaryDataFormat.Compressed,\r\n        enableOptimization: false,\r\n        chunkSize: 32 * 1024\r\n      };\r\n      \r\n      parser.updateConfig(newConfig);\r\n      const updatedConfig = parser.getConfig();\r\n      \r\n      expect(updatedConfig.format).toBe(BinaryDataFormat.Compressed);\r\n      expect(updatedConfig.enableOptimization).toBe(false);\r\n      expect(updatedConfig.chunkSize).toBe(32 * 1024);\r\n      // 其他配置应该保持不变\r\n      expect(updatedConfig.compressionThreshold).toBe(1024 * 1024);\r\n      expect(updatedConfig.enableValidation).toBe(true);\r\n    });\r\n    \r\n    it('应该接受自定义配置初始化', () => {\r\n      const customConfig: Partial<BinaryParserConfig> = {\r\n        format: BinaryDataFormat.RLE,\r\n        compressionThreshold: 2048,\r\n        enableOptimization: false,\r\n        chunkSize: 1024,\r\n        enableValidation: false\r\n      };\r\n      \r\n      const customParser = new BinaryDataParser(customConfig);\r\n      const config = customParser.getConfig();\r\n      \r\n      expect(config.format).toBe(BinaryDataFormat.RLE);\r\n      expect(config.compressionThreshold).toBe(2048);\r\n      expect(config.enableOptimization).toBe(false);\r\n      expect(config.chunkSize).toBe(1024);\r\n      expect(config.enableValidation).toBe(false);\r\n    });\r\n  });\r\n  \r\n  describe('数据验证测试', () => {\r\n    let parser: BinaryDataParser;\r\n    let session: CaptureSession;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser();\r\n      session = new CaptureSession();\r\n      session.frequency = 1000000;\r\n      session.preTriggerSamples = 10;\r\n      session.postTriggerSamples = 100;\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n    });\r\n    \r\n    it('应该拒绝过短的数据', async () => {\r\n      const shortData = new Uint8Array([0x01, 0x02]); // 只有2字节，小于最小8字节\r\n      \r\n      const result = await parser.parseBinaryData(shortData, session, CaptureMode.Channels_8);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.warnings.some(w => w.includes('Data too short'))).toBe(true);\r\n    });\r\n    \r\n    it('应该拒绝没有通道的会话', async () => {\r\n      session.captureChannels = [];\r\n      const data = new Uint8Array(100); // 足够长的数据\r\n      \r\n      const result = await parser.parseBinaryData(data, session, CaptureMode.Channels_8);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.warnings.some(w => w.includes('No capture channels defined'))).toBe(true);\r\n    });\r\n    \r\n    it('应该拒绝超出采集模式限制的通道', async () => {\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(10, 'CH10') // 超出Channels_8模式的限制\r\n      ];\r\n      \r\n      const data = new Uint8Array(100);\r\n      \r\n      const result = await parser.parseBinaryData(data, session, CaptureMode.Channels_8);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.warnings.some(w => w.includes('exceeds max supported channels'))).toBe(true);\r\n    });\r\n    \r\n    it('应该对数据长度不足发出警告', async () => {\r\n      const data = new Uint8Array(20); // 长度不足的数据\r\n      \r\n      const result = await parser.parseBinaryData(data, session, CaptureMode.Channels_8);\r\n      \r\n      // 虽然解析失败，但应该产生警告\r\n      expect(result.warnings.some(w => w.includes('less than expected'))).toBe(true);\r\n    });\r\n  });\r\n  \r\n  describe('二进制数据解析测试', () => {\r\n    let parser: BinaryDataParser;\r\n    let session: CaptureSession;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser();\r\n      session = new CaptureSession();\r\n      session.frequency = 1000000;\r\n      session.preTriggerSamples = 0;\r\n      session.postTriggerSamples = 10;\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1'),\r\n        new AnalyzerChannel(7, 'CH7')\r\n      ];\r\n    });\r\n    \r\n    it('应该正确解析8通道模式数据', async () => {\r\n      // 构造测试数据：样本数量(4字节) + 样本数据(10字节) + 时间戳长度(1字节)\r\n      const data = new Uint8Array(15);\r\n      const view = new DataView(data.buffer);\r\n      \r\n      // 样本数量 = 10\r\n      view.setUint32(0, 10, true);\r\n      \r\n      // 样本数据：10个字节，每个字节代表8个通道的状态\r\n      const sampleBytes = [\r\n        0b00000001, // CH0=1, 其他=0\r\n        0b00000010, // CH1=1, 其他=0\r\n        0b10000000, // CH7=1, 其他=0\r\n        0b00000011, // CH0=1, CH1=1, 其他=0\r\n        0b10000001, // CH0=1, CH7=1, 其他=0\r\n        0b10000010, // CH1=1, CH7=1, 其他=0\r\n        0b10000011, // CH0=1, CH1=1, CH7=1, 其他=0\r\n        0b00000000, // 全部=0\r\n        0b11111111, // 全部=1\r\n        0b01010101  // 交替模式\r\n      ];\r\n      \r\n      for (let i = 0; i < sampleBytes.length; i++) {\r\n        view.setUint8(4 + i, sampleBytes[i]);\r\n      }\r\n      \r\n      // 时间戳长度 = 0\r\n      view.setUint8(14, 0);\r\n      \r\n      const result = await parser.parseBinaryData(data, session, CaptureMode.Channels_8);\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(result.channels).toHaveLength(3);\r\n      expect(result.totalSamples).toBe(10);\r\n      \r\n      // 验证CH0的数据\r\n      const ch0 = result.channels.find(ch => ch.channelNumber === 0);\r\n      expect(ch0).toBeDefined();\r\n      expect(ch0!.samples).toEqual(new Uint8Array([1, 0, 0, 1, 1, 0, 1, 0, 1, 1]));\r\n      \r\n      // 验证CH1的数据\r\n      const ch1 = result.channels.find(ch => ch.channelNumber === 1);\r\n      expect(ch1).toBeDefined();\r\n      expect(ch1!.samples).toEqual(new Uint8Array([0, 1, 0, 1, 0, 1, 1, 0, 1, 0]));\r\n      \r\n      // 验证CH7的数据\r\n      const ch7 = result.channels.find(ch => ch.channelNumber === 7);\r\n      expect(ch7).toBeDefined();\r\n      expect(ch7!.samples).toEqual(new Uint8Array([0, 0, 1, 0, 1, 1, 1, 0, 1, 0]));\r\n    });\r\n    \r\n    it('应该正确解析16通道模式数据', async () => {\r\n      // 16通道模式使用16位数据\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(8, 'CH8'),\r\n        new AnalyzerChannel(15, 'CH15')\r\n      ];\r\n      \r\n      const data = new Uint8Array(11); // 4字节样本数 + 6字节样本数据(3个16位样本) + 1字节时间戳长度\r\n      const view = new DataView(data.buffer);\r\n      \r\n      view.setUint32(0, 3, true); // 3个样本\r\n      \r\n      // 样本数据 (16位, little endian)\r\n      view.setUint16(4, 0b0000000100000001, true); // CH0=1, CH8=1\r\n      view.setUint16(6, 0b1000000000000000, true); // CH15=1\r\n      view.setUint16(8, 0b1000000100000001, true); // CH0=1, CH8=1, CH15=1\r\n      \r\n      view.setUint8(10, 0); // 时间戳长度\r\n      \r\n      const result = await parser.parseBinaryData(data, session, CaptureMode.Channels_16);\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(result.channels).toHaveLength(3);\r\n      \r\n      const ch0 = result.channels.find(ch => ch.channelNumber === 0);\r\n      expect(ch0!.samples).toEqual(new Uint8Array([1, 0, 1]));\r\n      \r\n      const ch8 = result.channels.find(ch => ch.channelNumber === 8);\r\n      expect(ch8!.samples).toEqual(new Uint8Array([1, 0, 1]));\r\n      \r\n      const ch15 = result.channels.find(ch => ch.channelNumber === 15);\r\n      expect(ch15!.samples).toEqual(new Uint8Array([0, 1, 1]));\r\n    });\r\n    \r\n    it('应该正确解析24通道模式数据', async () => {\r\n      // 24通道模式使用32位数据\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(16, 'CH16'),\r\n        new AnalyzerChannel(23, 'CH23')\r\n      ];\r\n      \r\n      const data = new Uint8Array(13); // 4字节样本数 + 8字节样本数据(2个32位样本) + 1字节时间戳长度\r\n      const view = new DataView(data.buffer);\r\n      \r\n      view.setUint32(0, 2, true); // 2个样本\r\n      \r\n      // 样本数据 (32位, little endian)\r\n      // CH0=bit0=1, CH16=bit16=1: 0x00010001\r\n      view.setUint32(4, 0x00010001, true); \r\n      // CH0=bit0=1, CH16=bit16=1, CH23=bit23=1: 0x00810001  \r\n      view.setUint32(8, 0x00810001, true);\r\n      \r\n      view.setUint8(12, 0); // 时间戳长度\r\n      \r\n      const result = await parser.parseBinaryData(data, session, CaptureMode.Channels_24);\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(result.channels).toHaveLength(3);\r\n      \r\n      const ch0 = result.channels.find(ch => ch.channelNumber === 0);\r\n      expect(ch0!.samples).toEqual(new Uint8Array([1, 1]));\r\n      \r\n      const ch16 = result.channels.find(ch => ch.channelNumber === 16);\r\n      expect(ch16!.samples).toEqual(new Uint8Array([1, 1]));\r\n      \r\n      const ch23 = result.channels.find(ch => ch.channelNumber === 23);\r\n      expect(ch23!.samples).toEqual(new Uint8Array([0, 1]));\r\n    });\r\n  });\r\n  \r\n  describe('数据压缩和优化测试', () => {\r\n    let parser: BinaryDataParser;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser({\r\n        enableOptimization: true,\r\n        compressionThreshold: 100 // 低阈值用于测试\r\n      });\r\n    });\r\n    \r\n    it('应该正确进行RLE压缩', () => {\r\n      // 通过反射访问私有方法进行测试\r\n      const testData = new Uint8Array([1, 1, 1, 0, 0, 1, 1, 1, 1]);\r\n      const compressed = (parser as any).compressChannelData(testData);\r\n      \r\n      // RLE格式: [值, 计数, 值, 计数, ...]\r\n      expect(compressed).toEqual(new Uint8Array([1, 3, 0, 2, 1, 4]));\r\n    });\r\n    \r\n    it('应该正确进行RLE解压缩', () => {\r\n      const compressedData = new Uint8Array([1, 3, 0, 2, 1, 4]);\r\n      const decompressed = (parser as any).decompressChannelData(compressedData);\r\n      \r\n      expect(decompressed).toEqual(new Uint8Array([1, 1, 1, 0, 0, 1, 1, 1, 1]));\r\n    });\r\n    \r\n    it('应该正确处理压缩边界情况', () => {\r\n      // 测试最大计数255\r\n      const longSequence = new Uint8Array(300).fill(1);\r\n      const compressed = (parser as any).compressChannelData(longSequence);\r\n      \r\n      // 应该分成255 + 45的两段\r\n      expect(compressed[0]).toBe(1); // 值\r\n      expect(compressed[1]).toBe(255); // 最大计数\r\n      expect(compressed[2]).toBe(1); // 值\r\n      expect(compressed[3]).toBe(45); // 剩余计数\r\n    });\r\n\r\n    it('应该触发压缩优化条件覆盖294-295行', async () => {\r\n      // 创建一个低压缩阈值的解析器\r\n      const lowThresholdParser = new BinaryDataParser({\r\n        enableOptimization: true,\r\n        compressionThreshold: 50 // 低阈值以便触发压缩\r\n      });\r\n\r\n      const session = new CaptureSession();\r\n      session.frequency = 1000000;\r\n      session.preTriggerSamples = 0;\r\n      session.postTriggerSamples = 100;\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0')\r\n      ];\r\n\r\n      // 创建高重复性数据，100个样本，全部为相同值以获得高压缩率\r\n      const data = new Uint8Array(105); // 4字节头 + 100字节数据 + 1字节时间戳长度\r\n      const view = new DataView(data.buffer);\r\n      \r\n      view.setUint32(0, 100, true); // 100个样本\r\n      \r\n      // 填充重复数据 - 全部为0xFF以获得高压缩率\r\n      for (let i = 0; i < 100; i++) {\r\n        view.setUint8(4 + i, 0xFF);\r\n      }\r\n      \r\n      view.setUint8(104, 0); // 时间戳长度\r\n      \r\n      const result = await lowThresholdParser.parseBinaryData(data, session, CaptureMode.Channels_8);\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(result.channels).toHaveLength(1);\r\n      expect(result.channels[0].samples).toHaveLength(100);\r\n      \r\n      // 验证所有样本都是1（因为0xFF的bit 0是1）\r\n      for (let i = 0; i < 100; i++) {\r\n        expect(result.channels[0].samples![i]).toBe(1);\r\n      }\r\n    });\r\n  });\r\n  \r\n  describe('高级通道提取测试', () => {\r\n    let parser: BinaryDataParser;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser();\r\n    });\r\n    \r\n    it('应该正确进行高级通道提取', () => {\r\n      const sampleData = new Uint32Array([\r\n        0b11111000, // 样本1: bit0=0, bit3=1  \r\n        0b01100100, // 样本2: bit0=0, bit3=0\r\n        0b10101000  // 样本3: bit0=0, bit3=1\r\n      ]);\r\n      \r\n      const configs: ChannelExtractionConfig[] = [\r\n        {\r\n          channelMask: 0b00000001, // 提取bit 0\r\n          bitOffset: 0,\r\n          invertLogic: false,\r\n          enableFiltering: false,\r\n          filterWidth: 1\r\n        },\r\n        {\r\n          channelMask: 0b00001000, // 提取bit 3\r\n          bitOffset: 3,\r\n          invertLogic: true, // 反转逻辑\r\n          enableFiltering: false,\r\n          filterWidth: 1\r\n        }\r\n      ];\r\n      \r\n      const results = parser.extractChannelsAdvanced(sampleData, configs);\r\n      \r\n      expect(results).toHaveLength(2);\r\n      \r\n      // 通道0 (bit 0): [0, 0, 0]\r\n      expect(results[0]).toEqual(new Uint8Array([0, 0, 0]));\r\n      \r\n      // 通道1 (bit 3, 反转): 原始值[1, 0, 1] -> 反转后[0, 1, 0]\r\n      expect(results[1]).toEqual(new Uint8Array([0, 1, 0]));\r\n    });\r\n    \r\n    it('应该正确应用中值滤波', () => {\r\n      const testData = new Uint8Array([0, 1, 0, 1, 0, 1, 0]);\r\n      \r\n      // 应用3点中值滤波\r\n      (parser as any).applyMedianFilter(testData, 3);\r\n      \r\n      // 中值滤波应该平滑噪声\r\n      expect(testData[0]).toBe(1); // 边界处理: 中值([0,1]) = 1\r\n      expect(testData[1]).toBe(0); // 中值([0,0,1]) = 0\r\n      expect(testData[2]).toBe(1); // 中值([0,1,1]) = 1\r\n      expect(testData[3]).toBe(0); // 中值([0,0,1]) = 0\r\n      expect(testData[4]).toBe(1); // 中值(1,0,1) = 1\r\n      expect(testData[5]).toBe(0); // 中值(0,1,0) = 0\r\n      expect(testData[6]).toBe(1); // 边界处理\r\n    });\r\n\r\n    it('应该在高级通道提取中正确应用滤波', () => {\r\n      const sampleData = new Uint32Array([\r\n        0b11111000, // 样本1: bit0=0, bit3=1  \r\n        0b01100100, // 样本2: bit0=0, bit3=0\r\n        0b10101000, // 样本3: bit0=0, bit3=1\r\n        0b11111000, // 样本4: bit0=0, bit3=1\r\n        0b01100100  // 样本5: bit0=0, bit3=0\r\n      ]);\r\n      \r\n      const configs: ChannelExtractionConfig[] = [\r\n        {\r\n          channelMask: 0b00001000, // 提取bit 3\r\n          bitOffset: 3,\r\n          invertLogic: false,\r\n          enableFiltering: true,    // 启用滤波来覆盖第432行\r\n          filterWidth: 3            // 3点滤波\r\n        }\r\n      ];\r\n      \r\n      const results = parser.extractChannelsAdvanced(sampleData, configs);\r\n      \r\n      expect(results).toHaveLength(1);\r\n      // 滤波后的结果应该被平滑处理\r\n      expect(results[0]).toHaveLength(5);\r\n    });\r\n  });\r\n  \r\n  describe('数据完整性验证测试', () => {\r\n    let parser: BinaryDataParser;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser();\r\n    });\r\n    \r\n    it('应该验证完整的通道数据', () => {\r\n      const channels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n      \r\n      channels[0].samples = new Uint8Array([0, 1, 0, 1]);\r\n      channels[1].samples = new Uint8Array([1, 0, 1, 0]);\r\n      \r\n      const result = parser.validateDataIntegrity(channels);\r\n      \r\n      expect(result.isValid).toBe(true);\r\n      expect(result.errors).toHaveLength(0);\r\n      expect(result.statistics.totalSamples).toBe(4);\r\n      expect(result.statistics.channelsWithData).toBe(2);\r\n    });\r\n    \r\n    it('应该检测缺少样本数据的通道', () => {\r\n      const channels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n      \r\n      channels[0].samples = new Uint8Array([0, 1, 0, 1]);\r\n      // channels[1].samples 未设置\r\n      \r\n      const result = parser.validateDataIntegrity(channels);\r\n      \r\n      expect(result.isValid).toBe(false);\r\n      expect(result.errors.some(e => e.includes('has no sample data'))).toBe(true);\r\n    });\r\n    \r\n    it('应该检测空样本数据', () => {\r\n      const channels = [\r\n        new AnalyzerChannel(0, 'CH0')\r\n      ];\r\n      \r\n      channels[0].samples = new Uint8Array(); // 空数组\r\n      \r\n      const result = parser.validateDataIntegrity(channels);\r\n      \r\n      expect(result.isValid).toBe(false);\r\n      expect(result.errors.some(e => e.includes('has empty sample data'))).toBe(true);\r\n    });\r\n    \r\n    it('应该检测无效的样本值', () => {\r\n      const channels = [\r\n        new AnalyzerChannel(0, 'CH0')\r\n      ];\r\n      \r\n      channels[0].samples = new Uint8Array([0, 1, 2, 1]); // 包含无效值2\r\n      \r\n      const result = parser.validateDataIntegrity(channels);\r\n      \r\n      expect(result.isValid).toBe(false);\r\n      expect(result.errors.some(e => e.includes('has invalid value 2'))).toBe(true);\r\n    });\r\n    \r\n    it('应该检测样本数量不一致', () => {\r\n      const channels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n      \r\n      channels[0].samples = new Uint8Array([0, 1, 0, 1]);\r\n      channels[1].samples = new Uint8Array([1, 0]); // 长度不一致\r\n      \r\n      const result = parser.validateDataIntegrity(channels);\r\n      \r\n      expect(result.isValid).toBe(false);\r\n      expect(result.errors.some(e => e.includes('sample count') && e.includes('differs from expected'))).toBe(true);\r\n    });\r\n  });\r\n  \r\n  describe('统一数据格式转换测试', () => {\r\n    let parser: BinaryDataParser;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser();\r\n    });\r\n    \r\n    it('应该正确转换为统一数据格式', () => {\r\n      const channels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n      \r\n      channels[0].samples = new Uint8Array([0, 1, 0]);\r\n      channels[1].samples = new Uint8Array([1, 0, 1]);\r\n      \r\n      const session = new CaptureSession();\r\n      const deviceInfo = { name: 'Test Device' };\r\n      \r\n      const result = parser.convertToUnifiedFormat(channels, session, deviceInfo);\r\n      \r\n      expect(result.data).toHaveLength(2);\r\n      expect(result.data[0]).toEqual(new Uint8Array([0, 1, 0]));\r\n      expect(result.data[1]).toEqual(new Uint8Array([1, 0, 1]));\r\n      expect(result.encoding).toBe('binary');\r\n      expect(result.compression).toBe('none');\r\n    });\r\n    \r\n    it('应该正确从统一数据格式转换', () => {\r\n      const digitalData = {\r\n        data: [\r\n          new Uint8Array([0, 1, 0]),\r\n          new Uint8Array([1, 0, 1])\r\n        ],\r\n        encoding: 'binary' as const,\r\n        compression: 'none' as const\r\n      };\r\n      \r\n      const channelInfo = [\r\n        { channelNumber: 0, channelName: 'CH0' },\r\n        { channelNumber: 1, channelName: 'CH1' }\r\n      ];\r\n      \r\n      const channels = parser.convertFromUnifiedFormat(digitalData, channelInfo);\r\n      \r\n      expect(channels).toHaveLength(2);\r\n      expect(channels[0].channelNumber).toBe(0);\r\n      expect(channels[0].channelName).toBe('CH0');\r\n      expect(channels[0].samples).toEqual(new Uint8Array([0, 1, 0]));\r\n      expect(channels[1].channelNumber).toBe(1);\r\n      expect(channels[1].channelName).toBe('CH1');\r\n      expect(channels[1].samples).toEqual(new Uint8Array([1, 0, 1]));\r\n    });\r\n    \r\n    it('应该正确处理RLE编码的统一数据格式', () => {\r\n      const digitalData = {\r\n        data: [\r\n          new Uint8Array([1, 3, 0, 2]) // RLE: 3个1, 2个0\r\n        ],\r\n        encoding: 'rle' as const,\r\n        compression: 'none' as const\r\n      };\r\n      \r\n      const channelInfo = [\r\n        { channelNumber: 0, channelName: 'CH0' }\r\n      ];\r\n      \r\n      const channels = parser.convertFromUnifiedFormat(digitalData, channelInfo);\r\n      \r\n      expect(channels).toHaveLength(1);\r\n      expect(channels[0].samples).toEqual(new Uint8Array([1, 1, 1, 0, 0]));\r\n    });\r\n  });\r\n  \r\n  describe('性能和内存测试', () => {\r\n    let parser: BinaryDataParser;\r\n    \r\n    beforeEach(() => {\r\n      parser = new BinaryDataParser();\r\n    });\r\n    \r\n    it('应该正确计算内存使用量', () => {\r\n      const channels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n      \r\n      channels[0].samples = new Uint8Array(1000);\r\n      channels[1].samples = new Uint8Array(2000);\r\n      \r\n      const memoryUsage = (parser as any).calculateMemoryUsage(channels);\r\n      \r\n      // 3000字节样本数据 + 2 * 64字节对象开销 = 3128字节\r\n      expect(memoryUsage).toBe(3128);\r\n    });\r\n    \r\n    it('应该处理大数据量解析', async () => {\r\n      const session = new CaptureSession();\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n      \r\n      // 创建大数据集 (10000个样本)\r\n      const sampleCount = 10000;\r\n      const data = new Uint8Array(4 + sampleCount + 1);\r\n      const view = new DataView(data.buffer);\r\n      \r\n      view.setUint32(0, sampleCount, true);\r\n      \r\n      // 填充随机样本数据\r\n      for (let i = 0; i < sampleCount; i++) {\r\n        view.setUint8(4 + i, Math.random() > 0.5 ? 0xFF : 0x00);\r\n      }\r\n      \r\n      view.setUint8(4 + sampleCount, 0); // 时间戳长度\r\n      \r\n      const startTime = performance.now();\r\n      const result = await parser.parseBinaryData(data, session, CaptureMode.Channels_8);\r\n      const parseTime = performance.now() - startTime;\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(result.totalSamples).toBe(sampleCount);\r\n      expect(parseTime).toBeLessThan(1000); // 应该在1秒内完成\r\n      expect(result.parseTime).toBeGreaterThan(0);\r\n      expect(result.memoryUsage).toBeGreaterThan(0);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('BinaryDataParserFactory 工厂类测试', () => {\r\n  \r\n  it('应该为Pico设备创建优化的解析器', () => {\r\n    const parser = BinaryDataParserFactory.createForDevice('pico', 8);\r\n    const config = parser.getConfig();\r\n    \r\n    expect(config.chunkSize).toBe(32 * 1024);\r\n    expect(config.compressionThreshold).toBe(512 * 1024);\r\n    expect(config.enableOptimization).toBe(true);\r\n    expect(config.enableValidation).toBe(true);\r\n  });\r\n  \r\n  it('应该为Saleae设备创建优化的解析器', () => {\r\n    const parser = BinaryDataParserFactory.createForDevice('saleae', 16);\r\n    const config = parser.getConfig();\r\n    \r\n    expect(config.chunkSize).toBe(128 * 1024);\r\n    expect(config.compressionThreshold).toBe(2 * 1024 * 1024);\r\n    expect(config.enableOptimization).toBe(true);\r\n    expect(config.enableValidation).toBe(true);\r\n  });\r\n  \r\n  it('应该为未知设备创建默认解析器', () => {\r\n    const parser = BinaryDataParserFactory.createForDevice('unknown', 24);\r\n    const config = parser.getConfig();\r\n    \r\n    expect(config.chunkSize).toBe(64 * 1024);\r\n    expect(config.compressionThreshold).toBe(1024 * 1024);\r\n    expect(config.enableOptimization).toBe(true);\r\n    expect(config.enableValidation).toBe(true);\r\n  });\r\n  \r\n  it('应该创建高性能解析器', () => {\r\n    const parser = BinaryDataParserFactory.createHighPerformance();\r\n    const config = parser.getConfig();\r\n    \r\n    expect(config.format).toBe(BinaryDataFormat.Raw);\r\n    expect(config.enableOptimization).toBe(true);\r\n    expect(config.enableValidation).toBe(false); // 关闭验证提升性能\r\n    expect(config.chunkSize).toBe(256 * 1024);\r\n    expect(config.compressionThreshold).toBe(10 * 1024 * 1024);\r\n  });\r\n  \r\n  it('应该创建调试用解析器', () => {\r\n    const parser = BinaryDataParserFactory.createDebug();\r\n    const config = parser.getConfig();\r\n    \r\n    expect(config.format).toBe(BinaryDataFormat.Raw);\r\n    expect(config.enableOptimization).toBe(false);\r\n    expect(config.enableValidation).toBe(true);\r\n    expect(config.chunkSize).toBe(4 * 1024); // 小块处理便于调试\r\n    expect(config.compressionThreshold).toBe(64 * 1024);\r\n  });\r\n});\r\n\r\ndescribe('BinaryDataFormat 枚举测试', () => {\r\n  \r\n  it('应该定义所有数据格式', () => {\r\n    expect(BinaryDataFormat.Raw).toBe('raw');\r\n    expect(BinaryDataFormat.Compressed).toBe('compressed');\r\n    expect(BinaryDataFormat.RLE).toBe('rle');\r\n    expect(BinaryDataFormat.Delta).toBe('delta');\r\n  });\r\n  \r\n  it('枚举值应该是字符串类型', () => {\r\n    Object.values(BinaryDataFormat).forEach(format => {\r\n      expect(typeof format).toBe('string');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('错误处理和边界条件测试', () => {\r\n  let parser: BinaryDataParser;\r\n  \r\n  beforeEach(() => {\r\n    parser = new BinaryDataParser();\r\n  });\r\n  \r\n  it('应该处理空样本数据的情况', () => {\r\n    const channels: AnalyzerChannel[] = [];\r\n    const memoryUsage = (parser as any).calculateMemoryUsage(channels);\r\n    \r\n    expect(memoryUsage).toBe(0);\r\n  });\r\n  \r\n  it('应该处理通道没有样本数据的情况', () => {\r\n    const channels = [new AnalyzerChannel(0, 'CH0')];\r\n    // 不设置samples\r\n    \r\n    const memoryUsage = (parser as any).calculateMemoryUsage(channels);\r\n    \r\n    expect(memoryUsage).toBe(64); // 只有对象开销\r\n  });\r\n  \r\n  it('应该处理RLE压缩的边界情况', () => {\r\n    // 单一值\r\n    const singleValue = new Uint8Array([1]);\r\n    const compressed = (parser as any).compressChannelData(singleValue);\r\n    expect(compressed).toEqual(new Uint8Array([1, 1]));\r\n    \r\n    // 空数组\r\n    const empty = new Uint8Array([]);\r\n    expect(() => (parser as any).compressChannelData(empty)).not.toThrow();\r\n  });\r\n  \r\n  it('应该处理RLE解压缩的边界情况', () => {\r\n    // 空数组\r\n    const empty = new Uint8Array([]);\r\n    const decompressed = (parser as any).decompressChannelData(empty);\r\n    expect(decompressed).toEqual(new Uint8Array([]));\r\n    \r\n    // 奇数长度数组 (不完整的RLE对)\r\n    const incomplete = new Uint8Array([1]); // 缺少计数\r\n    expect(() => (parser as any).decompressChannelData(incomplete)).not.toThrow();\r\n  });\r\n  \r\n  it('应该处理中值滤波的边界情况', () => {\r\n    // 单个元素\r\n    const single = new Uint8Array([1]);\r\n    (parser as any).applyMedianFilter(single, 3);\r\n    expect(single).toEqual(new Uint8Array([1]));\r\n    \r\n    // 空数组\r\n    const empty = new Uint8Array([]);\r\n    expect(() => (parser as any).applyMedianFilter(empty, 3)).not.toThrow();\r\n    \r\n    // 滤波器宽度为1\r\n    const data = new Uint8Array([1, 0, 1]);\r\n    const original = new Uint8Array(data);\r\n    (parser as any).applyMedianFilter(data, 1);\r\n    expect(data).toEqual(original); // 应该不变\r\n  });\r\n\r\n  it('应该处理非Error类型的异常', async () => {\r\n    const session = new CaptureSession();\r\n    session.frequency = 1000000;\r\n    session.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n    \r\n    // 创建一个解析器并模拟非Error类型的异常\r\n    const testParser = new BinaryDataParser();\r\n    \r\n    // 通过修改原始方法来抛出非Error类型的异常\r\n    const originalValidate = (testParser as any).validateRawData;\r\n    (testParser as any).validateRawData = () => {\r\n      throw 'This is a string error, not an Error object'; // 抛出字符串类型\r\n    };\r\n    \r\n    const data = new Uint8Array(100);\r\n    const result = await testParser.parseBinaryData(data, session, CaptureMode.Channels_8);\r\n    \r\n    expect(result.success).toBe(false);\r\n    expect(result.warnings.some(w => w.includes('Parse error: Unknown error'))).toBe(true);\r\n    \r\n    // 恢复原始方法\r\n    (testParser as any).validateRawData = originalValidate;\r\n  });\r\n\r\n  it('应该处理convertToUnifiedFormat中通道没有samples的情况', () => {\r\n    const channels = [\r\n      new AnalyzerChannel(0, 'CH0'),\r\n      new AnalyzerChannel(1, 'CH1')\r\n    ];\r\n    \r\n    // 第一个通道有samples，第二个通道没有samples\r\n    channels[0].samples = new Uint8Array([0, 1, 0]);\r\n    // channels[1].samples 保留为undefined\r\n    \r\n    const session = new CaptureSession();\r\n    const deviceInfo = { name: 'Test Device' };\r\n    \r\n    const result = parser.convertToUnifiedFormat(channels, session, deviceInfo);\r\n    \r\n    expect(result.data).toHaveLength(2);\r\n    expect(result.data[0]).toEqual(new Uint8Array([0, 1, 0]));\r\n    expect(result.data[1]).toEqual(new Uint8Array()); // 应该是空的Uint8Array\r\n    expect(result.encoding).toBe('binary');\r\n    expect(result.compression).toBe('none');\r\n  });\r\n});"],"version":3}