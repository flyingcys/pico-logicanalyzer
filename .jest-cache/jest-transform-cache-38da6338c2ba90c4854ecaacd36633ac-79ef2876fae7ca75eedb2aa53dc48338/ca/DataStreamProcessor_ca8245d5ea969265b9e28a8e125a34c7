9ed15c6eb466a936879711f5f25bcdf0
"use strict";
/**
 * 实时数据流处理和缓冲系统
 * 基于原版 C# LogicAnalyzerDriver 的 ReadCapture 方法精确移植
 * 负责处理来自硬件的二进制数据流，包括样本数据和时间戳
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataStreamMonitor = exports.DataStreamFactory = exports.DataStreamProcessor = exports.DataStreamState = void 0;
const AnalyzerTypes_1 = require("./AnalyzerTypes");
const CaptureModels_1 = require("./CaptureModels");
/**
 * 数据流读取状态
 */
var DataStreamState;
(function (DataStreamState) {
    DataStreamState["Idle"] = "Idle";
    DataStreamState["WaitingForHeader"] = "WaitingForHeader";
    DataStreamState["ReadingSamples"] = "ReadingSamples";
    DataStreamState["ReadingTimestamps"] = "ReadingTimestamps";
    DataStreamState["ProcessingData"] = "ProcessingData";
    DataStreamState["Completed"] = "Completed";
    DataStreamState["Error"] = "Error";
})(DataStreamState = exports.DataStreamState || (exports.DataStreamState = {}));
/**
 * 数据流处理器类
 * 基于C# ReadCapture方法的精确实现
 */
class DataStreamProcessor {
    constructor(config = {}, events = {}) {
        this.state = DataStreamState.Idle;
        this.startTime = 0;
        this.buffer = new Uint8Array(0);
        this.bufferPosition = 0;
        this.config = {
            bufferSize: 1024 * 1024,
            readTimeout: 30000,
            chunkSize: 64 * 1024,
            enableProgress: true,
            progressInterval: 100,
            ...config
        };
        this.events = events;
    }
    /**
     * 开始数据流读取 - 基于C# ReadCapture方法
     */
    async readCaptureData(dataStream, session, expectedSamples, mode) {
        try {
            this.state = DataStreamState.WaitingForHeader;
            this.startTime = Date.now();
            // 初始化数据缓冲区
            const bufferLength = this.calculateBufferLength(expectedSamples, mode, session);
            this.buffer = new Uint8Array(bufferLength);
            this.bufferPosition = 0;
            // 逐步读取数据流
            await this.readDataStream(dataStream, bufferLength);
            // 解析数据
            const rawPacket = await this.parseRawData(session, expectedSamples, mode);
            // 处理样本数据
            await this.processSampleData(session, rawPacket);
            // 处理时间戳和突发信息
            if (session.measureBursts && session.loopCount > 0) {
                await this.processBurstData(session, rawPacket);
            }
            this.state = DataStreamState.Completed;
            this.events.onCompleted?.(session);
            return session;
        }
        catch (error) {
            this.state = DataStreamState.Error;
            const err = error instanceof Error ? error : new Error('Unknown data stream error');
            this.events.onError?.(err);
            throw err;
        }
    }
    /**
     * 计算缓冲区长度 - 基于C#代码的缓冲区计算逻辑
     */
    calculateBufferLength(samples, mode, session) {
        // 样本数据长度计算
        let bufLen = samples * (mode === AnalyzerTypes_1.CaptureMode.Channels_8 ? 1 :
            (mode === AnalyzerTypes_1.CaptureMode.Channels_16 ? 2 : 4));
        // 添加长度字段 (4字节)
        bufLen += 4;
        // 时间戳数据长度
        if (session.loopCount === 0 || !session.measureBursts) {
            bufLen += 1; // 只有时间戳长度字节
        }
        else {
            bufLen += 1 + (session.loopCount + 2) * 4; // 时间戳长度 + 时间戳数据
        }
        return bufLen;
    }
    /**
     * 从数据流读取数据
     */
    async readDataStream(dataStream, expectedLength) {
        this.state = DataStreamState.ReadingSamples;
        let totalRead = 0;
        // 确保缓冲区已正确初始化
        if (this.buffer.length < expectedLength) {
            this.buffer = new Uint8Array(expectedLength);
        }
        const reader = 'getReader' in dataStream ? dataStream.getReader() : null;
        try {
            if (reader) {
                // ReadableStream 处理
                while (totalRead < expectedLength) {
                    const { done, value } = await reader.read();
                    if (done) {
                        if (totalRead < expectedLength) {
                            throw new Error(`Premature end of stream. Expected ${expectedLength}, got ${totalRead}`);
                        }
                        break;
                    }
                    if (value) {
                        const bytesToCopy = Math.min(value.length, expectedLength - totalRead);
                        this.buffer.set(value.subarray(0, bytesToCopy), totalRead);
                        totalRead += bytesToCopy;
                        // 报告进度
                        if (this.config.enableProgress) {
                            this.reportProgress(totalRead, expectedLength);
                        }
                    }
                }
            }
            else {
                // AsyncIterable 处理
                for await (const chunk of dataStream) {
                    if (totalRead >= expectedLength)
                        break;
                    const bytesToCopy = Math.min(chunk.length, expectedLength - totalRead);
                    this.buffer.set(chunk.subarray(0, bytesToCopy), totalRead);
                    totalRead += bytesToCopy;
                    // 报告进度
                    if (this.config.enableProgress) {
                        this.reportProgress(totalRead, expectedLength);
                    }
                }
            }
        }
        finally {
            if (reader) {
                reader.releaseLock();
            }
        }
        if (totalRead < expectedLength) {
            throw new Error(`Incomplete data read. Expected ${expectedLength}, got ${totalRead}`);
        }
    }
    /**
     * 解析原始数据包 - 基于C# ReadCapture的数据解析逻辑
     */
    async parseRawData(session, expectedSamples, mode) {
        this.state = DataStreamState.ProcessingData;
        const view = new DataView(this.buffer.buffer);
        let offset = 0;
        // 读取样本数量 (uint32, little endian)
        const length = view.getUint32(offset, true);
        offset += 4;
        if (length !== expectedSamples) {
            console.warn(`Sample count mismatch. Expected ${expectedSamples}, got ${length}`);
        }
        // 创建样本数组
        const samples = new Uint32Array(length);
        // 根据采集模式读取样本数据
        switch (mode) {
            case AnalyzerTypes_1.CaptureMode.Channels_8:
                for (let i = 0; i < length; i++) {
                    samples[i] = view.getUint8(offset);
                    offset += 1;
                }
                break;
            case AnalyzerTypes_1.CaptureMode.Channels_16:
                for (let i = 0; i < length; i++) {
                    samples[i] = view.getUint16(offset, true); // little endian
                    offset += 2;
                }
                break;
            case AnalyzerTypes_1.CaptureMode.Channels_24:
                for (let i = 0; i < length; i++) {
                    samples[i] = view.getUint32(offset, true); // little endian
                    offset += 4;
                }
                break;
        }
        // 读取时间戳长度
        const stampLength = view.getUint8(offset);
        offset += 1;
        // 读取时间戳数据
        const timestampCount = session.loopCount === 0 || !session.measureBursts ? 0 : session.loopCount + 2;
        const timestamps = new BigUint64Array(timestampCount);
        if (stampLength > 0 && timestampCount > 0) {
            this.state = DataStreamState.ReadingTimestamps;
            for (let i = 0; i < timestampCount; i++) {
                // 读取32位时间戳并转换为64位
                const timestamp32 = view.getUint32(offset, true);
                timestamps[i] = BigInt(timestamp32);
                offset += 4;
            }
        }
        return {
            length,
            samples,
            timestamps,
            mode
        };
    }
    /**
     * 处理样本数据 - 提取通道样本
     */
    async processSampleData(session, rawPacket) {
        // 为每个通道提取样本数据
        for (let channelIndex = 0; channelIndex < session.captureChannels.length; channelIndex++) {
            const channel = session.captureChannels[channelIndex];
            this.extractChannelSamples(channel, channelIndex, rawPacket.samples);
        }
        // 触发数据接收事件
        this.events.onDataReceived?.(rawPacket);
    }
    /**
     * 提取通道样本 - 基于C# ExtractSamples方法
     */
    extractChannelSamples(channel, channelIndex, samples) {
        const mask = 1 << channelIndex;
        const channelSamples = new Uint8Array(samples.length);
        for (let i = 0; i < samples.length; i++) {
            channelSamples[i] = (samples[i] & mask) !== 0 ? 1 : 0;
        }
        channel.samples = channelSamples;
    }
    /**
     * 处理突发数据和时间戳 - 基于C#的时间戳处理逻辑
     */
    async processBurstData(session, rawPacket) {
        if (rawPacket.timestamps.length === 0) {
            return;
        }
        // 时间戳调整 - 基于C#代码中的时间戳调整逻辑
        // 系统滴答计数器是递减的，需要反转低24位
        const adjustedTimestamps = new BigUint64Array(rawPacket.timestamps.length);
        for (let i = 0; i < rawPacket.timestamps.length; i++) {
            const timestamp = rawPacket.timestamps[i];
            const high8 = timestamp & 0xff000000n;
            const low24 = timestamp & 0x00ffffffn;
            adjustedTimestamps[i] = high8 | (0x00ffffffn - low24);
        }
        // 创建突发信息
        const bursts = [];
        for (let i = 0; i < session.loopCount + 1; i++) {
            const burst = new CaptureModels_1.BurstInfo();
            if (i === 0) {
                // 第一个突发
                burst.burstSampleStart = 0;
                burst.burstSampleEnd = session.preTriggerSamples + session.postTriggerSamples;
                burst.burstSampleGap = 0;
                burst.burstTimeGap = 0;
            }
            else {
                // 后续突发
                burst.burstSampleStart = session.preTriggerSamples + (session.postTriggerSamples * (i - 1));
                burst.burstSampleEnd = session.preTriggerSamples + (session.postTriggerSamples * i);
                // 计算样本间隔和时间间隔
                if (i < adjustedTimestamps.length - 1) {
                    const timeDiff = adjustedTimestamps[i + 1] - adjustedTimestamps[i];
                    burst.burstTimeGap = Number(timeDiff * 125n); // 125ns per tick (8MHz)
                    burst.burstSampleGap = Math.round(burst.burstTimeGap / (1000000000 / session.frequency));
                }
            }
            bursts.push(burst);
        }
        session.bursts = bursts;
    }
    /**
     * 报告读取进度
     */
    reportProgress(bytesRead, totalBytes) {
        const elapsed = Date.now() - this.startTime;
        const progress = Math.min((bytesRead / totalBytes) * 100, 100);
        const estimatedTotal = elapsed * (totalBytes / bytesRead);
        const estimatedRemaining = Math.max(0, estimatedTotal - elapsed);
        const progressInfo = {
            state: this.state,
            bytesRead,
            totalBytes,
            samplesRead: Math.floor(bytesRead / 4),
            totalSamples: Math.floor(totalBytes / 4),
            progress,
            estimatedTimeRemaining: estimatedRemaining
        };
        this.events.onProgress?.(progressInfo);
    }
    /**
     * 获取当前状态
     */
    getState() {
        return this.state;
    }
    /**
     * 重置处理器状态
     */
    reset() {
        this.state = DataStreamState.Idle;
        this.buffer = new Uint8Array(0);
        this.bufferPosition = 0;
        this.startTime = 0;
    }
    /**
     * 更新配置
     */
    updateConfig(config) {
        this.config = { ...this.config, ...config };
    }
    /**
     * 更新事件处理器
     */
    updateEvents(events) {
        this.events = { ...this.events, ...events };
    }
}
exports.DataStreamProcessor = DataStreamProcessor;
/**
 * 数据流工厂类 - 用于创建不同类型的数据流
 */
class DataStreamFactory {
    /**
     * 从串口创建数据流
     */
    static createSerialStream(port) {
        return {
            async *[Symbol.asyncIterator]() {
                // 这里需要根据实际的串口库实现
                // 例如使用 serialport 库
                yield* port;
            }
        };
    }
    /**
     * 从网络TCP连接创建数据流
     */
    static createNetworkStream(socket) {
        return new ReadableStream({
            start(controller) {
                socket.on('data', (data) => {
                    controller.enqueue(new Uint8Array(data));
                });
                socket.on('end', () => {
                    controller.close();
                });
                socket.on('error', (error) => {
                    controller.error(error);
                });
            }
        });
    }
    /**
     * 从Buffer创建数据流 (用于测试)
     */
    static createBufferStream(buffer) {
        return new ReadableStream({
            start(controller) {
                controller.enqueue(buffer);
                controller.close();
            }
        });
    }
}
exports.DataStreamFactory = DataStreamFactory;
/**
 * 数据流监控器 - 用于监控数据流性能
 */
class DataStreamMonitor {
    constructor() {
        this.startTime = 0;
        this.bytesProcessed = 0;
        this.samplesProcessed = 0;
    }
    start() {
        this.startTime = Date.now();
        this.bytesProcessed = 0;
        this.samplesProcessed = 0;
    }
    update(bytesRead, samplesRead) {
        this.bytesProcessed = bytesRead;
        this.samplesProcessed = samplesRead;
    }
    getStatistics() {
        const elapsed = this.startTime > 0 ? Date.now() - this.startTime : 0;
        const elapsedSeconds = elapsed / 1000;
        return {
            elapsedTime: elapsed,
            bytesPerSecond: elapsedSeconds > 0 ? this.bytesProcessed / elapsedSeconds : 0,
            samplesPerSecond: elapsedSeconds > 0 ? this.samplesProcessed / elapsedSeconds : 0,
            efficiency: this.samplesProcessed > 0 ? (this.bytesProcessed / this.samplesProcessed) : 0
        };
    }
}
exports.DataStreamMonitor = DataStreamMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,