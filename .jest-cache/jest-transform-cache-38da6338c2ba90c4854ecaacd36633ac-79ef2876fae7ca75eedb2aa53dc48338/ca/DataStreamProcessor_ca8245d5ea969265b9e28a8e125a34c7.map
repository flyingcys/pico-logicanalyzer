{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/DataStreamProcessor.ts","mappings":";AAAA;;;;GAIG;;;AAEH,mDAA8C;AAC9C,mDAA6E;AAE7E;;GAEG;AACH,IAAY,eAQX;AARD,WAAY,eAAe;IACzB,gCAAa,CAAA;IACb,wDAAqC,CAAA;IACrC,oDAAiC,CAAA;IACjC,0DAAuC,CAAA;IACvC,oDAAiC,CAAA;IACjC,0CAAuB,CAAA;IACvB,kCAAe,CAAA;AACjB,CAAC,EARW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAQ1B;AA8CD;;;GAGG;AACH,MAAa,mBAAmB;IAQ9B,YAAY,SAAoC,EAAE,EAAE,SAAoC,EAAE;QALlF,UAAK,GAAoB,eAAe,CAAC,IAAI,CAAC;QAC9C,cAAS,GAAW,CAAC,CAAC;QACtB,WAAM,GAAe,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QACvC,mBAAc,GAAW,CAAC,CAAC;QAGjC,IAAI,CAAC,MAAM,GAAG;YACZ,UAAU,EAAE,IAAI,GAAG,IAAI;YACvB,WAAW,EAAE,KAAK;YAClB,SAAS,EAAE,EAAE,GAAG,IAAI;YACpB,cAAc,EAAE,IAAI;YACpB,gBAAgB,EAAE,GAAG;YACrB,GAAG,MAAM;SACV,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,eAAe,CAC1B,UAAkE,EAClE,OAAuB,EACvB,eAAuB,EACvB,IAAiB;QAGjB,IAAI;YACF,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,gBAAgB,CAAC;YAC9C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE5B,WAAW;YACX,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAChF,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;YAC3C,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;YAExB,UAAU;YACV,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO;YACP,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;YAE1E,SAAS;YACT,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAEjD,aAAa;YACb,IAAI,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,SAAS,GAAG,CAAC,EAAE;gBAClD,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;aACjD;YAED,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,SAAS,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,CAAC;YAEnC,OAAO,OAAO,CAAC;SAEhB;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC;YACnC,MAAM,GAAG,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YACpF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;YAC3B,MAAM,GAAG,CAAC;SACX;IACH,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,OAAe,EAAE,IAAiB,EAAE,OAAuB;QACvF,WAAW;QACX,IAAI,MAAM,GAAG,OAAO,GAAG,CAAC,IAAI,KAAK,2BAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,IAAI,KAAK,2BAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAElE,eAAe;QACf,MAAM,IAAI,CAAC,CAAC;QAEZ,UAAU;QACV,IAAI,OAAO,CAAC,SAAS,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;YACrD,MAAM,IAAI,CAAC,CAAC,CAAC,YAAY;SAC1B;aAAM;YACL,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,gBAAgB;SAC5D;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc,CAC1B,UAAkE,EAClE,cAAsB;QAGtB,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,cAAc,CAAC;QAC5C,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,cAAc;QACd,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,cAAc,EAAE;YACvC,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,cAAc,CAAC,CAAC;SAC9C;QAED,MAAM,MAAM,GAAG,WAAW,IAAI,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAEzE,IAAI;YACF,IAAI,MAAM,EAAE;gBACV,oBAAoB;gBACpB,OAAO,SAAS,GAAG,cAAc,EAAE;oBACjC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBAE5C,IAAI,IAAI,EAAE;wBACR,IAAI,SAAS,GAAG,cAAc,EAAE;4BAC9B,MAAM,IAAI,KAAK,CAAC,qCAAqC,cAAc,SAAS,SAAS,EAAE,CAAC,CAAC;yBAC1F;wBACD,MAAM;qBACP;oBAED,IAAI,KAAK,EAAE;wBACT,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,GAAG,SAAS,CAAC,CAAC;wBACvE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,SAAS,CAAC,CAAC;wBAC3D,SAAS,IAAI,WAAW,CAAC;wBAEzB,OAAO;wBACP,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;4BAC9B,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;yBAChD;qBACF;iBACF;aACF;iBAAM;gBACL,mBAAmB;gBACnB,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,UAAuC,EAAE;oBACjE,IAAI,SAAS,IAAI,cAAc;wBAAE,MAAM;oBAEvC,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,GAAG,SAAS,CAAC,CAAC;oBACvE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,SAAS,CAAC,CAAC;oBAC3D,SAAS,IAAI,WAAW,CAAC;oBAEzB,OAAO;oBACP,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;wBAC9B,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;qBAChD;iBACF;aACF;SACF;gBAAS;YACR,IAAI,MAAM,EAAE;gBACV,MAAM,CAAC,WAAW,EAAE,CAAC;aACtB;SACF;QAED,IAAI,SAAS,GAAG,cAAc,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,kCAAkC,cAAc,SAAS,SAAS,EAAE,CAAC,CAAC;SACvF;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,YAAY,CACxB,OAAuB,EACvB,eAAuB,EACvB,IAAiB;QAGjB,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,cAAc,CAAC;QAC5C,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,iCAAiC;QACjC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5C,MAAM,IAAI,CAAC,CAAC;QAEZ,IAAI,MAAM,KAAK,eAAe,EAAE;YAC9B,OAAO,CAAC,IAAI,CAAC,mCAAmC,eAAe,SAAS,MAAM,EAAE,CAAC,CAAC;SACnF;QAED,SAAS;QACT,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;QAExC,eAAe;QACf,QAAQ,IAAI,EAAE;YACZ,KAAK,2BAAW,CAAC,UAAU;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC/B,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACnC,MAAM,IAAI,CAAC,CAAC;iBACb;gBACD,MAAM;YAER,KAAK,2BAAW,CAAC,WAAW;gBAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC/B,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,gBAAgB;oBAC3D,MAAM,IAAI,CAAC,CAAC;iBACb;gBACD,MAAM;YAER,KAAK,2BAAW,CAAC,WAAW;gBAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC/B,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,gBAAgB;oBAC3D,MAAM,IAAI,CAAC,CAAC;iBACb;gBACD,MAAM;SACT;QAED,UAAU;QACV,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,CAAC;QAEZ,UAAU;QACV,MAAM,cAAc,GAAG,OAAO,CAAC,SAAS,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;QACrG,MAAM,UAAU,GAAG,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC;QAEtD,IAAI,WAAW,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE;YACzC,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,iBAAiB,CAAC;YAE/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;gBACvC,kBAAkB;gBAClB,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACjD,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;gBACpC,MAAM,IAAI,CAAC,CAAC;aACb;SACF;QAED,OAAO;YACL,MAAM;YACN,OAAO;YACP,UAAU;YACV,IAAI;SACL,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,OAAuB,EAAE,SAAwB;QAC/E,cAAc;QACd,KAAK,IAAI,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE;YACxF,MAAM,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YACtD,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;SACtE;QAED,WAAW;QACX,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,OAAwB,EAAE,YAAoB,EAAE,OAAoB;QAChG,MAAM,IAAI,GAAG,CAAC,IAAI,YAAY,CAAC;QAC/B,MAAM,cAAc,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACvD;QAED,OAAO,CAAC,OAAO,GAAG,cAAc,CAAC;IACnC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gBAAgB,CAAC,OAAuB,EAAE,SAAwB;QAC9E,IAAI,SAAS,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO;SACR;QAED,0BAA0B;QAC1B,uBAAuB;QACvB,MAAM,kBAAkB,GAAG,IAAI,cAAc,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpD,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,SAAS,GAAG,WAAW,CAAC;YACtC,MAAM,KAAK,GAAG,SAAS,GAAG,WAAW,CAAC;YACtC,kBAAkB,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;SACvD;QAED,SAAS;QACT,MAAM,MAAM,GAAgB,EAAE,CAAC;QAE/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,MAAM,KAAK,GAAG,IAAI,yBAAS,EAAE,CAAC;YAE9B,IAAI,CAAC,KAAK,CAAC,EAAE;gBACX,QAAQ;gBACR,KAAK,CAAC,gBAAgB,GAAG,CAAC,CAAC;gBAC3B,KAAK,CAAC,cAAc,GAAG,OAAO,CAAC,iBAAiB,GAAG,OAAO,CAAC,kBAAkB,CAAC;gBAC9E,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC;gBACzB,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC;aACxB;iBAAM;gBACL,OAAO;gBACP,KAAK,CAAC,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,GAAG,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5F,KAAK,CAAC,cAAc,GAAG,OAAO,CAAC,iBAAiB,GAAG,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC;gBAEpF,cAAc;gBACd,IAAI,CAAC,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACrC,MAAM,QAAQ,GAAG,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;oBACnE,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,wBAAwB;oBACtE,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;iBAC1F;aACF;YAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpB;QAED,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED;;OAEG;IACK,cAAc,CAAC,SAAiB,EAAE,UAAkB;QAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,UAAU,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;QAC/D,MAAM,cAAc,GAAG,OAAO,GAAG,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC;QAC1D,MAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,GAAG,OAAO,CAAC,CAAC;QAEjE,MAAM,YAAY,GAAuB;YACvC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,SAAS;YACT,UAAU;YACV,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;YACtC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;YACxC,QAAQ;YACR,sBAAsB,EAAE,kBAAkB;SAC3C,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,YAAY,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;OAEG;IACI,KAAK;QACV,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,MAAiC;QACnD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,MAAiC;QACnD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;IAC9C,CAAC;CACF;AAvWD,kDAuWC;AAED;;GAEG;AACH,MAAa,iBAAiB;IAC5B;;OAEG;IACI,MAAM,CAAC,kBAAkB,CAAC,IAAS;QACxC,OAAO;YACL,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;gBAC3B,iBAAiB;gBACjB,oBAAoB;gBACpB,KAAK,CAAC,CAAC,IAAI,CAAC;YACd,CAAC;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,mBAAmB,CAAC,MAAW;QAC3C,OAAO,IAAI,cAAc,CAAC;YACxB,KAAK,CAAC,UAAU;gBACd,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;oBACjC,UAAU,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;oBACpB,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrB,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE;oBAClC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,kBAAkB,CAAC,MAAkB;QACjD,OAAO,IAAI,cAAc,CAAC;YACxB,KAAK,CAAC,UAAU;gBACd,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC3B,UAAU,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AA9CD,8CA8CC;AAED;;GAEG;AACH,MAAa,iBAAiB;IAA9B;QACU,cAAS,GAAW,CAAC,CAAC;QACtB,mBAAc,GAAW,CAAC,CAAC;QAC3B,qBAAgB,GAAW,CAAC,CAAC;IA6BvC,CAAC;IA3BQ,KAAK;QACV,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,MAAM,CAAC,SAAiB,EAAE,WAAmB;QAClD,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;IACtC,CAAC;IAEM,aAAa;QAMlB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,cAAc,GAAG,OAAO,GAAG,IAAI,CAAC;QAEtC,OAAO;YACL,WAAW,EAAE,OAAO;YACpB,cAAc,EAAE,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;YAC7E,gBAAgB,EAAE,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;YACjF,UAAU,EAAE,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1F,CAAC;IACJ,CAAC;CACF;AAhCD,8CAgCC","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/DataStreamProcessor.ts"],"sourcesContent":["/**\r\n * 实时数据流处理和缓冲系统\r\n * 基于原版 C# LogicAnalyzerDriver 的 ReadCapture 方法精确移植\r\n * 负责处理来自硬件的二进制数据流，包括样本数据和时间戳\r\n */\r\n\r\nimport { CaptureMode } from './AnalyzerTypes';\r\nimport { CaptureSession, AnalyzerChannel, BurstInfo } from './CaptureModels';\r\n\r\n/**\r\n * 数据流读取状态\r\n */\r\nexport enum DataStreamState {\r\n  Idle = 'Idle',\r\n  WaitingForHeader = 'WaitingForHeader',\r\n  ReadingSamples = 'ReadingSamples',\r\n  ReadingTimestamps = 'ReadingTimestamps',\r\n  ProcessingData = 'ProcessingData',\r\n  Completed = 'Completed',\r\n  Error = 'Error'\r\n}\r\n\r\n/**\r\n * 数据流读取进度信息\r\n */\r\nexport interface DataStreamProgress {\r\n  state: DataStreamState;\r\n  bytesRead: number;\r\n  totalBytes: number;\r\n  samplesRead: number;\r\n  totalSamples: number;\r\n  progress: number; // 0-100\r\n  estimatedTimeRemaining: number; // 毫秒\r\n}\r\n\r\n/**\r\n * 数据流读取配置\r\n */\r\nexport interface DataStreamConfig {\r\n  bufferSize: number; // 缓冲区大小\r\n  readTimeout: number; // 读取超时 (ms)\r\n  chunkSize: number; // 分块读取大小\r\n  enableProgress: boolean; // 是否启用进度报告\r\n  progressInterval: number; // 进度报告间隔 (ms)\r\n}\r\n\r\n/**\r\n * 原始数据包结构\r\n */\r\nexport interface RawDataPacket {\r\n  length: number; // 样本数量\r\n  samples: Uint32Array; // 原始样本数据\r\n  timestamps: BigUint64Array; // 时间戳数据\r\n  mode: CaptureMode; // 采集模式\r\n}\r\n\r\n/**\r\n * 数据流处理器事件\r\n */\r\nexport interface DataStreamEvents {\r\n  onProgress: (_progress: DataStreamProgress) => void;\r\n  onDataReceived: (_packet: RawDataPacket) => void;\r\n  onCompleted: (_session: CaptureSession) => void;\r\n  onError: (_error: Error) => void;\r\n}\r\n\r\n/**\r\n * 数据流处理器类\r\n * 基于C# ReadCapture方法的精确实现\r\n */\r\nexport class DataStreamProcessor {\r\n  private config: DataStreamConfig;\r\n  private events: Partial<DataStreamEvents>;\r\n  private state: DataStreamState = DataStreamState.Idle;\r\n  private startTime: number = 0;\r\n  private buffer: Uint8Array = new Uint8Array(0);\r\n  private bufferPosition: number = 0;\r\n\r\n  constructor(config: Partial<DataStreamConfig> = {}, events: Partial<DataStreamEvents> = {}) {\r\n    this.config = {\r\n      bufferSize: 1024 * 1024, // 1MB default\r\n      readTimeout: 30000, // 30s\r\n      chunkSize: 64 * 1024, // 64KB chunks\r\n      enableProgress: true,\r\n      progressInterval: 100, // 100ms\r\n      ...config\r\n    };\r\n    this.events = events;\r\n  }\r\n\r\n  /**\r\n   * 开始数据流读取 - 基于C# ReadCapture方法\r\n   */\r\n  public async readCaptureData(\r\n    dataStream: ReadableStream<Uint8Array> | AsyncIterable<Uint8Array>,\r\n    session: CaptureSession,\r\n    expectedSamples: number,\r\n    mode: CaptureMode\r\n  ): Promise<CaptureSession> {\r\n\r\n    try {\r\n      this.state = DataStreamState.WaitingForHeader;\r\n      this.startTime = Date.now();\r\n\r\n      // 初始化数据缓冲区\r\n      const bufferLength = this.calculateBufferLength(expectedSamples, mode, session);\r\n      this.buffer = new Uint8Array(bufferLength);\r\n      this.bufferPosition = 0;\r\n\r\n      // 逐步读取数据流\r\n      await this.readDataStream(dataStream, bufferLength);\r\n\r\n      // 解析数据\r\n      const rawPacket = await this.parseRawData(session, expectedSamples, mode);\r\n\r\n      // 处理样本数据\r\n      await this.processSampleData(session, rawPacket);\r\n\r\n      // 处理时间戳和突发信息\r\n      if (session.measureBursts && session.loopCount > 0) {\r\n        await this.processBurstData(session, rawPacket);\r\n      }\r\n\r\n      this.state = DataStreamState.Completed;\r\n      this.events.onCompleted?.(session);\r\n\r\n      return session;\r\n\r\n    } catch (error) {\r\n      this.state = DataStreamState.Error;\r\n      const err = error instanceof Error ? error : new Error('Unknown data stream error');\r\n      this.events.onError?.(err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算缓冲区长度 - 基于C#代码的缓冲区计算逻辑\r\n   */\r\n  private calculateBufferLength(samples: number, mode: CaptureMode, session: CaptureSession): number {\r\n    // 样本数据长度计算\r\n    let bufLen = samples * (mode === CaptureMode.Channels_8 ? 1 :\r\n                          (mode === CaptureMode.Channels_16 ? 2 : 4));\r\n\r\n    // 添加长度字段 (4字节)\r\n    bufLen += 4;\r\n\r\n    // 时间戳数据长度\r\n    if (session.loopCount === 0 || !session.measureBursts) {\r\n      bufLen += 1; // 只有时间戳长度字节\r\n    } else {\r\n      bufLen += 1 + (session.loopCount + 2) * 4; // 时间戳长度 + 时间戳数据\r\n    }\r\n\r\n    return bufLen;\r\n  }\r\n\r\n  /**\r\n   * 从数据流读取数据\r\n   */\r\n  private async readDataStream(\r\n    dataStream: ReadableStream<Uint8Array> | AsyncIterable<Uint8Array>,\r\n    expectedLength: number\r\n  ): Promise<void> {\r\n\r\n    this.state = DataStreamState.ReadingSamples;\r\n    let totalRead = 0;\r\n\r\n    // 确保缓冲区已正确初始化\r\n    if (this.buffer.length < expectedLength) {\r\n      this.buffer = new Uint8Array(expectedLength);\r\n    }\r\n\r\n    const reader = 'getReader' in dataStream ? dataStream.getReader() : null;\r\n\r\n    try {\r\n      if (reader) {\r\n        // ReadableStream 处理\r\n        while (totalRead < expectedLength) {\r\n          const { done, value } = await reader.read();\r\n\r\n          if (done) {\r\n            if (totalRead < expectedLength) {\r\n              throw new Error(`Premature end of stream. Expected ${expectedLength}, got ${totalRead}`);\r\n            }\r\n            break;\r\n          }\r\n\r\n          if (value) {\r\n            const bytesToCopy = Math.min(value.length, expectedLength - totalRead);\r\n            this.buffer.set(value.subarray(0, bytesToCopy), totalRead);\r\n            totalRead += bytesToCopy;\r\n\r\n            // 报告进度\r\n            if (this.config.enableProgress) {\r\n              this.reportProgress(totalRead, expectedLength);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // AsyncIterable 处理\r\n        for await (const chunk of dataStream as AsyncIterable<Uint8Array>) {\r\n          if (totalRead >= expectedLength) break;\r\n\r\n          const bytesToCopy = Math.min(chunk.length, expectedLength - totalRead);\r\n          this.buffer.set(chunk.subarray(0, bytesToCopy), totalRead);\r\n          totalRead += bytesToCopy;\r\n\r\n          // 报告进度\r\n          if (this.config.enableProgress) {\r\n            this.reportProgress(totalRead, expectedLength);\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      if (reader) {\r\n        reader.releaseLock();\r\n      }\r\n    }\r\n\r\n    if (totalRead < expectedLength) {\r\n      throw new Error(`Incomplete data read. Expected ${expectedLength}, got ${totalRead}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析原始数据包 - 基于C# ReadCapture的数据解析逻辑\r\n   */\r\n  private async parseRawData(\r\n    session: CaptureSession,\r\n    expectedSamples: number,\r\n    mode: CaptureMode\r\n  ): Promise<RawDataPacket> {\r\n\r\n    this.state = DataStreamState.ProcessingData;\r\n    const view = new DataView(this.buffer.buffer);\r\n    let offset = 0;\r\n\r\n    // 读取样本数量 (uint32, little endian)\r\n    const length = view.getUint32(offset, true);\r\n    offset += 4;\r\n\r\n    if (length !== expectedSamples) {\r\n      console.warn(`Sample count mismatch. Expected ${expectedSamples}, got ${length}`);\r\n    }\r\n\r\n    // 创建样本数组\r\n    const samples = new Uint32Array(length);\r\n\r\n    // 根据采集模式读取样本数据\r\n    switch (mode) {\r\n      case CaptureMode.Channels_8:\r\n        for (let i = 0; i < length; i++) {\r\n          samples[i] = view.getUint8(offset);\r\n          offset += 1;\r\n        }\r\n        break;\r\n\r\n      case CaptureMode.Channels_16:\r\n        for (let i = 0; i < length; i++) {\r\n          samples[i] = view.getUint16(offset, true); // little endian\r\n          offset += 2;\r\n        }\r\n        break;\r\n\r\n      case CaptureMode.Channels_24:\r\n        for (let i = 0; i < length; i++) {\r\n          samples[i] = view.getUint32(offset, true); // little endian\r\n          offset += 4;\r\n        }\r\n        break;\r\n    }\r\n\r\n    // 读取时间戳长度\r\n    const stampLength = view.getUint8(offset);\r\n    offset += 1;\r\n\r\n    // 读取时间戳数据\r\n    const timestampCount = session.loopCount === 0 || !session.measureBursts ? 0 : session.loopCount + 2;\r\n    const timestamps = new BigUint64Array(timestampCount);\r\n\r\n    if (stampLength > 0 && timestampCount > 0) {\r\n      this.state = DataStreamState.ReadingTimestamps;\r\n\r\n      for (let i = 0; i < timestampCount; i++) {\r\n        // 读取32位时间戳并转换为64位\r\n        const timestamp32 = view.getUint32(offset, true);\r\n        timestamps[i] = BigInt(timestamp32);\r\n        offset += 4;\r\n      }\r\n    }\r\n\r\n    return {\r\n      length,\r\n      samples,\r\n      timestamps,\r\n      mode\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 处理样本数据 - 提取通道样本\r\n   */\r\n  private async processSampleData(session: CaptureSession, rawPacket: RawDataPacket): Promise<void> {\r\n    // 为每个通道提取样本数据\r\n    for (let channelIndex = 0; channelIndex < session.captureChannels.length; channelIndex++) {\r\n      const channel = session.captureChannels[channelIndex];\r\n      this.extractChannelSamples(channel, channelIndex, rawPacket.samples);\r\n    }\r\n\r\n    // 触发数据接收事件\r\n    this.events.onDataReceived?.(rawPacket);\r\n  }\r\n\r\n  /**\r\n   * 提取通道样本 - 基于C# ExtractSamples方法\r\n   */\r\n  private extractChannelSamples(channel: AnalyzerChannel, channelIndex: number, samples: Uint32Array): void {\r\n    const mask = 1 << channelIndex;\r\n    const channelSamples = new Uint8Array(samples.length);\r\n\r\n    for (let i = 0; i < samples.length; i++) {\r\n      channelSamples[i] = (samples[i] & mask) !== 0 ? 1 : 0;\r\n    }\r\n\r\n    channel.samples = channelSamples;\r\n  }\r\n\r\n  /**\r\n   * 处理突发数据和时间戳 - 基于C#的时间戳处理逻辑\r\n   */\r\n  private async processBurstData(session: CaptureSession, rawPacket: RawDataPacket): Promise<void> {\r\n    if (rawPacket.timestamps.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 时间戳调整 - 基于C#代码中的时间戳调整逻辑\r\n    // 系统滴答计数器是递减的，需要反转低24位\r\n    const adjustedTimestamps = new BigUint64Array(rawPacket.timestamps.length);\r\n    for (let i = 0; i < rawPacket.timestamps.length; i++) {\r\n      const timestamp = rawPacket.timestamps[i];\r\n      const high8 = timestamp & 0xFF000000n;\r\n      const low24 = timestamp & 0x00FFFFFFn;\r\n      adjustedTimestamps[i] = high8 | (0x00FFFFFFn - low24);\r\n    }\r\n\r\n    // 创建突发信息\r\n    const bursts: BurstInfo[] = [];\r\n\r\n    for (let i = 0; i < session.loopCount + 1; i++) {\r\n      const burst = new BurstInfo();\r\n\r\n      if (i === 0) {\r\n        // 第一个突发\r\n        burst.burstSampleStart = 0;\r\n        burst.burstSampleEnd = session.preTriggerSamples + session.postTriggerSamples;\r\n        burst.burstSampleGap = 0;\r\n        burst.burstTimeGap = 0;\r\n      } else {\r\n        // 后续突发\r\n        burst.burstSampleStart = session.preTriggerSamples + (session.postTriggerSamples * (i - 1));\r\n        burst.burstSampleEnd = session.preTriggerSamples + (session.postTriggerSamples * i);\r\n\r\n        // 计算样本间隔和时间间隔\r\n        if (i < adjustedTimestamps.length - 1) {\r\n          const timeDiff = adjustedTimestamps[i + 1] - adjustedTimestamps[i];\r\n          burst.burstTimeGap = Number(timeDiff * 125n); // 125ns per tick (8MHz)\r\n          burst.burstSampleGap = Math.round(burst.burstTimeGap / (1000000000 / session.frequency));\r\n        }\r\n      }\r\n\r\n      bursts.push(burst);\r\n    }\r\n\r\n    session.bursts = bursts;\r\n  }\r\n\r\n  /**\r\n   * 报告读取进度\r\n   */\r\n  private reportProgress(bytesRead: number, totalBytes: number): void {\r\n    const elapsed = Date.now() - this.startTime;\r\n    const progress = Math.min((bytesRead / totalBytes) * 100, 100);\r\n    const estimatedTotal = elapsed * (totalBytes / bytesRead);\r\n    const estimatedRemaining = Math.max(0, estimatedTotal - elapsed);\r\n\r\n    const progressInfo: DataStreamProgress = {\r\n      state: this.state,\r\n      bytesRead,\r\n      totalBytes,\r\n      samplesRead: Math.floor(bytesRead / 4), // 估算样本数\r\n      totalSamples: Math.floor(totalBytes / 4),\r\n      progress,\r\n      estimatedTimeRemaining: estimatedRemaining\r\n    };\r\n\r\n    this.events.onProgress?.(progressInfo);\r\n  }\r\n\r\n  /**\r\n   * 获取当前状态\r\n   */\r\n  public getState(): DataStreamState {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * 重置处理器状态\r\n   */\r\n  public reset(): void {\r\n    this.state = DataStreamState.Idle;\r\n    this.buffer = new Uint8Array(0);\r\n    this.bufferPosition = 0;\r\n    this.startTime = 0;\r\n  }\r\n\r\n  /**\r\n   * 更新配置\r\n   */\r\n  public updateConfig(config: Partial<DataStreamConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n  }\r\n\r\n  /**\r\n   * 更新事件处理器\r\n   */\r\n  public updateEvents(events: Partial<DataStreamEvents>): void {\r\n    this.events = { ...this.events, ...events };\r\n  }\r\n}\r\n\r\n/**\r\n * 数据流工厂类 - 用于创建不同类型的数据流\r\n */\r\nexport class DataStreamFactory {\r\n  /**\r\n   * 从串口创建数据流\r\n   */\r\n  public static createSerialStream(port: any): AsyncIterable<Uint8Array> {\r\n    return {\r\n      async *[Symbol.asyncIterator]() {\r\n        // 这里需要根据实际的串口库实现\r\n        // 例如使用 serialport 库\r\n        yield* port;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 从网络TCP连接创建数据流\r\n   */\r\n  public static createNetworkStream(socket: any): ReadableStream<Uint8Array> {\r\n    return new ReadableStream({\r\n      start(controller) {\r\n        socket.on('data', (data: Buffer) => {\r\n          controller.enqueue(new Uint8Array(data));\r\n        });\r\n\r\n        socket.on('end', () => {\r\n          controller.close();\r\n        });\r\n\r\n        socket.on('error', (error: Error) => {\r\n          controller.error(error);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 从Buffer创建数据流 (用于测试)\r\n   */\r\n  public static createBufferStream(buffer: Uint8Array): ReadableStream<Uint8Array> {\r\n    return new ReadableStream({\r\n      start(controller) {\r\n        controller.enqueue(buffer);\r\n        controller.close();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * 数据流监控器 - 用于监控数据流性能\r\n */\r\nexport class DataStreamMonitor {\r\n  private startTime: number = 0;\r\n  private bytesProcessed: number = 0;\r\n  private samplesProcessed: number = 0;\r\n\r\n  public start(): void {\r\n    this.startTime = Date.now();\r\n    this.bytesProcessed = 0;\r\n    this.samplesProcessed = 0;\r\n  }\r\n\r\n  public update(bytesRead: number, samplesRead: number): void {\r\n    this.bytesProcessed = bytesRead;\r\n    this.samplesProcessed = samplesRead;\r\n  }\r\n\r\n  public getStatistics(): {\r\n    elapsedTime: number;\r\n    bytesPerSecond: number;\r\n    samplesPerSecond: number;\r\n    efficiency: number;\r\n  } {\r\n    const elapsed = this.startTime > 0 ? Date.now() - this.startTime : 0;\r\n    const elapsedSeconds = elapsed / 1000;\r\n\r\n    return {\r\n      elapsedTime: elapsed,\r\n      bytesPerSecond: elapsedSeconds > 0 ? this.bytesProcessed / elapsedSeconds : 0,\r\n      samplesPerSecond: elapsedSeconds > 0 ? this.samplesProcessed / elapsedSeconds : 0,\r\n      efficiency: this.samplesProcessed > 0 ? (this.bytesProcessed / this.samplesProcessed) : 0\r\n    };\r\n  }\r\n}\r\n"],"version":3}