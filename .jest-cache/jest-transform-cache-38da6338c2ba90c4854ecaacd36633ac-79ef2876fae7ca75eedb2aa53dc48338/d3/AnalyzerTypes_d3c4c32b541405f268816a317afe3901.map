{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/AnalyzerTypes.ts","mappings":";AAAA;;;GAGG;;;AAEH,SAAS;AACT,mCAAmC;AACnC,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC5B,uCAAiB,CAAA;IACjB,yCAAmB,CAAA;IACnB,qCAAe,CAAA;IACf,2CAAqB,CAAA;IACrB,uCAAiB,CAAA;AACnB,CAAC,EANW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAM7B;AAED,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,yDAAc,CAAA;IACd,2DAAe,CAAA;IACf,2DAAe,CAAA;AACjB,CAAC,EAJW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAItB;AAED,IAAY,YAMX;AAND,WAAY,YAAY;IACtB,6BAAa,CAAA;IACb,6BAAa,CAAA;IACb,uCAAuB,CAAA;IACvB,+CAA+B,CAAA;IAC/B,mDAAmC,CAAA;AACrC,CAAC,EANW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAMvB;AAED,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,6CAAQ,CAAA;IACR,mDAAW,CAAA;IACX,6CAAQ,CAAA;IACR,+CAAS,CAAA;AACX,CAAC,EALW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAKtB;AAgPD,OAAO;AACM,QAAA,aAAa,GAAG;IAC3B,mBAAmB,EAAE,CAAC;IACtB,gBAAgB,EAAE,CAAC,CAAC,cAAc;CAC1B,CAAC","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/src/models/AnalyzerTypes.ts"],"sourcesContent":["/**\n * 逻辑分析器类型定义\n * 基于C# SharedDriver模块的TypeScript移植\n */\n\n// 枚举类型定义\n/* eslint-disable no-unused-vars */\nexport enum AnalyzerDriverType {\n  Serial = 'Serial',\n  Network = 'Network',\n  Multi = 'Multi',\n  Emulated = 'Emulated',\n  Single = 'Single'\n}\n\nexport enum CaptureMode {\n  Channels_8 = 0,\n  Channels_16 = 1,\n  Channels_24 = 2\n}\n\nexport enum CaptureError {\n  None = 'None',\n  Busy = 'Busy',\n  BadParams = 'BadParams',\n  HardwareError = 'HardwareError',\n  UnexpectedError = 'UnexpectedError'\n}\n\nexport enum TriggerType {\n  Edge = 0,\n  Complex = 1,\n  Fast = 2,\n  Blast = 3\n}\n/* eslint-enable no-unused-vars */\n\n// 数据结构定义\nexport interface CaptureLimits {\n  minPreSamples: number;\n  maxPreSamples: number;\n  minPostSamples: number;\n  maxPostSamples: number;\n\n  // 计算属性\n  readonly maxTotalSamples: number;\n}\n\nexport interface AnalyzerDeviceInfo {\n  name: string;\n  maxFrequency: number;\n  blastFrequency: number;\n  channels: number;\n  bufferSize: number;\n  modeLimits: CaptureLimits[];\n}\n\nexport interface DeviceInfo {\n  name: string;\n  version?: string | undefined;\n  type: AnalyzerDriverType;\n  connectionPath?: string;\n  isNetwork: boolean;\n  capabilities: HardwareCapabilities;\n  manufacturer?: string;\n  model?: string;\n  serialNumber?: string;\n}\n\nexport interface HardwareCapabilities {\n  // 元数据信息\n  metadata?: {\n    manufacturer?: string;\n    model?: string;\n    revision?: string;\n    calibrationDate?: Date;\n    certifications?: string[];\n    description?: string;\n  };\n\n  // 通道规格\n  channels: {\n    digital: number;\n    analog?: number;\n    mixed?: boolean;\n    maxVoltage: number;\n    inputImpedance: number;\n    thresholdVoltages?: number[];\n  };\n\n  // 采样能力\n  sampling: {\n    maxRate: number;\n    minRate: number;\n    supportedRates: number[];\n    bufferSize: number;\n    streamingSupport: boolean;\n    compressionSupport?: boolean;\n  };\n\n  // 触发能力\n  triggers: {\n    types: TriggerType[];\n    maxChannels: number;\n    patternWidth: number;\n    sequentialSupport: boolean;\n    conditions: TriggerCondition[];\n  };\n\n  // 连接方式\n  connectivity: {\n    interfaces: ('usb' | 'ethernet' | 'serial' | 'bluetooth')[];\n    protocols: ('custom' | 'scpi' | 'sigrok' | 'saleae')[];\n    networkConfig?: NetworkCapability;\n  };\n\n  // 特殊功能\n  features: {\n    signalGeneration?: boolean;\n    powerSupply?: boolean;\n    i2cSniffer?: boolean;\n    canSupport?: boolean;\n    customDecoders?: boolean;\n    voltageMonitoring?: boolean;\n  };\n\n  // 协议解码能力\n  protocol?: {\n    supportedProtocols: string[];\n    hardwareDecoding: boolean;\n    customProtocols: boolean;\n  };\n\n  // 高级功能\n  advanced?: {\n    memorySegmentation: boolean;\n    externalClock: boolean;\n    calibration: boolean;\n    selfTest: boolean;\n  };\n}\n\nexport interface NetworkCapability {\n  supportsWiFi: boolean;\n  supportsEthernet: boolean;\n  maxConnections: number;\n  defaultPort: number;\n}\n\nexport type TriggerCondition = 'rising' | 'falling' | 'high' | 'low' | 'any' | 'none';\n\nexport interface ConnectionParams {\n  devicePath?: string;\n  timeout?: number;\n  networkConfig?: {\n    host: string;\n    port: number;\n    timeout?: number;\n  };\n  serialConfig?: {\n    baudRate: number;\n    dataBits: number;\n    stopBits: number;\n    parity: string;\n  };\n  autoDetect?: boolean;\n}\n\nexport interface ConnectionResult {\n  success: boolean;\n  error?: string;\n  deviceInfo?: DeviceInfo;\n}\n\nexport interface CaptureConfiguration {\n  frequency: number;\n  preTriggerSamples: number;\n  postTriggerSamples: number;\n  triggerType: TriggerType;\n  triggerChannel: number;\n  triggerInverted: boolean;\n  triggerPattern?: number;\n  triggerBitCount?: number;\n  loopCount: number;\n  measureBursts: boolean;\n  captureChannels: number[];\n  captureMode?: CaptureMode | undefined;\n}\n\nexport interface CaptureResult {\n  success: boolean;\n  error?: CaptureError;\n  session?: CaptureSession;\n}\n\nexport interface CaptureSession {\n  // 基础采集参数\n  frequency: number;\n  preTriggerSamples: number;\n  postTriggerSamples: number;\n\n  // 计算属性\n  get totalSamples(): number;\n\n  // 触发系统配置\n  triggerType: TriggerType;\n  triggerChannel: number;\n  triggerInverted: boolean;\n  triggerPattern?: number;\n  triggerBitCount?: number;\n\n  // 突发采集系统\n  loopCount: number;\n  measureBursts: boolean;\n\n  // 通道配置\n  captureChannels: AnalyzerChannel[];\n  captureMode?: CaptureMode;\n\n  // 突发信息数组\n  bursts?: BurstInfo[];\n\n  // 会话信息\n  name?: string;\n  deviceVersion?: string;\n  deviceSerial?: string;\n\n  // 方法接口\n  clone(): CaptureSession;\n  cloneSettings(): CaptureSession;\n}\n\nexport interface AnalyzerChannel {\n  channelNumber: number;\n  channelName: string;\n  textualChannelNumber: string;\n  hidden: boolean;\n  channelColor?: number;\n  samples?: Uint8Array;\n  enabled?: boolean;\n  minimized?: boolean;\n\n  // 克隆方法\n  clone(): AnalyzerChannel;\n}\n\nexport interface BurstInfo {\n  burstSampleStart: number;\n  burstSampleEnd: number;\n  burstSampleGap: number;\n  burstTimeGap: number; // 纳秒\n\n  // 时间格式化方法\n  getTime(): string;\n}\n\nexport interface DeviceStatus {\n  isConnected: boolean;\n  isCapturing: boolean;\n  batteryVoltage?: string;\n  temperature?: number;\n  errorStatus?: string;\n  lastError?: string;\n  multiDeviceStatus?: DeviceStatus[];\n}\n\nexport interface CaptureEventArgs {\n  success: boolean;\n  session: CaptureSession;\n}\n\n// 事件类型定义\nexport type CaptureCompletedHandler = (args: CaptureEventArgs) => void;\n\n// 常量定义\nexport const TriggerDelays = {\n  ComplexTriggerDelay: 5, // 复杂触发延迟 (纳秒)\n  FastTriggerDelay: 3 // 快速触发延迟 (纳秒)\n} as const;\n"],"version":3}