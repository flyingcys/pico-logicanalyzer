{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/decoders/protocols/UARTDecoder.test.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/decoders/protocols/UARTDecoder.test.ts"],"sourcesContent":["/**\r\n * UART协议解码器测试\r\n * 全面测试UART协议解码器的各项功能\r\n */\r\n\r\nimport { UARTDecoder } from '../../../../src/decoders/protocols/UARTDecoder';\r\nimport { DecoderOptionValue, ChannelData, DecoderOutputType } from '../../../../src/decoders/types';\r\n\r\ndescribe('UARTDecoder', () => {\r\n  let uartDecoder: UARTDecoder;\r\n\r\n  beforeEach(() => {\r\n    uartDecoder = new UARTDecoder();\r\n  });\r\n\r\n  describe('解码器元数据验证', () => {\r\n    it('应该具有正确的基本信息', () => {\r\n      expect(uartDecoder.id).toBe('uart');\r\n      expect(uartDecoder.name).toBe('UART');\r\n      expect(uartDecoder.longname).toBe('Universal Asynchronous Receiver/Transmitter');\r\n      expect(uartDecoder.desc).toBe('Asynchronous, serial bus.');\r\n      expect(uartDecoder.license).toBe('gplv2+');\r\n    });\r\n\r\n    it('应该定义正确的输入输出类型', () => {\r\n      expect(uartDecoder.inputs).toEqual(['logic']);\r\n      expect(uartDecoder.outputs).toEqual(['uart']);\r\n      expect(uartDecoder.tags).toEqual(['Embedded/industrial']);\r\n    });\r\n\r\n    it('应该定义正确的通道', () => {\r\n      const expectedChannels = [\r\n        { id: 'rx', name: 'RX', desc: 'UART receive line', required: false, index: 0 },\r\n        { id: 'tx', name: 'TX', desc: 'UART transmit line', required: false, index: 1 }\r\n      ];\r\n      expect(uartDecoder.channels).toEqual(expectedChannels);\r\n    });\r\n\r\n    it('应该定义正确的配置选项', () => {\r\n      expect(uartDecoder.options).toHaveLength(9);\r\n      \r\n      // 波特率选项\r\n      expect(uartDecoder.options[0]).toEqual({\r\n        id: 'baudrate',\r\n        desc: 'Baud rate',\r\n        default: 115200,\r\n        type: 'int'\r\n      });\r\n\r\n      // 数据位选项\r\n      expect(uartDecoder.options[1]).toEqual({\r\n        id: 'data_bits',\r\n        desc: 'Data bits',\r\n        default: 8,\r\n        values: ['5', '6', '7', '8', '9'],\r\n        type: 'list'\r\n      });\r\n\r\n      // 校验位选项\r\n      expect(uartDecoder.options[2]).toEqual({\r\n        id: 'parity',\r\n        desc: 'Parity',\r\n        default: 'none',\r\n        values: ['none', 'odd', 'even', 'zero', 'one', 'ignore'],\r\n        type: 'list'\r\n      });\r\n\r\n      // 停止位选项\r\n      expect(uartDecoder.options[3]).toEqual({\r\n        id: 'stop_bits',\r\n        desc: 'Stop bits',\r\n        default: 1.0,\r\n        values: ['0.0', '0.5', '1.0', '1.5', '2.0'],\r\n        type: 'list'\r\n      });\r\n    });\r\n\r\n    it('应该定义正确的注释类型', () => {\r\n      expect(uartDecoder.annotations).toHaveLength(18);\r\n      \r\n      const expectedAnnotations = [\r\n        ['rx-data', 'RX data'],\r\n        ['tx-data', 'TX data'],\r\n        ['rx-start', 'RX start bit'],\r\n        ['tx-start', 'TX start bit'],\r\n        ['rx-parity-ok', 'RX parity OK bit'],\r\n        ['tx-parity-ok', 'TX parity OK bit'],\r\n        ['rx-parity-err', 'RX parity error bit'],\r\n        ['tx-parity-err', 'TX parity error bit'],\r\n        ['rx-stop', 'RX stop bit'],\r\n        ['tx-stop', 'TX stop bit'],\r\n        ['rx-warning', 'RX warning'],\r\n        ['tx-warning', 'TX warning'],\r\n        ['rx-data-bit', 'RX data bit'],\r\n        ['tx-data-bit', 'TX data bit'],\r\n        ['rx-break', 'RX break'],\r\n        ['tx-break', 'TX break'],\r\n        ['rx-packet', 'RX packet'],\r\n        ['tx-packet', 'TX packet']\r\n      ];\r\n      \r\n      expect(uartDecoder.annotations).toEqual(expectedAnnotations);\r\n    });\r\n  });\r\n\r\n  describe('通道验证', () => {\r\n    it('应该拒绝没有RX和TX的配置', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([]) },\r\n        { channelNumber: 1, channelName: 'TX', samples: new Uint8Array([]) }\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, []);\r\n      }).toThrow('Need at least one of TX or RX pins.');\r\n    });\r\n\r\n    it('应该接受只有RX的配置', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1]) }\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, []);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该接受只有TX的配置', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([]) },\r\n        { channelNumber: 1, channelName: 'TX', samples: new Uint8Array([1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1]) }\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, []);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该拒绝没有采样率的配置', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 0, 1, 0]) }\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(0, channels, []);\r\n      }).toThrow('Cannot decode without samplerate.');\r\n    });\r\n  });\r\n\r\n  describe('配置选项处理', () => {\r\n    it('应该正确处理波特率选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 0, 1, 0]) }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 0, value: 9600 } // baudrate\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, options);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该正确处理数据位选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 0, 1, 0]) }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 1, value: '7' } // data_bits = 7\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, options);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该正确处理校验位选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 0, 1, 0]) }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 2, value: 'even' } // parity = even\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, options);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该正确处理停止位选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 0, 1, 0]) }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 3, value: '2.0' } // stop_bits = 2.0\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, options);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该正确处理数据格式选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 0, 1, 0]) }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 5, value: 'ascii' } // format = ascii\r\n      ];\r\n\r\n      expect(() => {\r\n        uartDecoder.decode(115200, channels, options);\r\n      }).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('基本UART解码功能', () => {\r\n    it('应该解码简单的8N1 UART帧', () => {\r\n      // 创建标准8N1 UART帧: 起始位(0) + 8数据位 + 停止位(1)\r\n      // 数据: 0x55 = 01010101 (LSB先传输)\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1, // 空闲状态\r\n            0,        // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位 (LSB先): 0x55\r\n            1,        // 停止位\r\n            1, 1, 1   // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 0, value: 115200 }, // baudrate\r\n        { optionIndex: 1, value: '8' },    // data_bits = 8\r\n        { optionIndex: 2, value: 'none' }, // parity = none\r\n        { optionIndex: 3, value: '1.0' }   // stop_bits = 1.0\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      expect(results).toBeDefined();\r\n      expect(results.length).toBeGreaterThan(0);\r\n      \r\n      // 检查是否有数据注释\r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      expect(dataAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该处理多个连续帧', () => {\r\n      // 创建两个连续的UART帧\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 第一帧起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 第一帧数据位: 0x55\r\n            1,                   // 第一帧停止位\r\n            0,                   // 第二帧起始位\r\n            0, 1, 0, 1, 0, 1, 0, 1, // 第二帧数据位: 0xAA\r\n            1,                   // 第二帧停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      \r\n      expect(results).toBeDefined();\r\n      \r\n      // 应该检测到两个数据帧\r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      expect(dataAnnotations.length).toBeGreaterThanOrEqual(2);\r\n    });\r\n  });\r\n\r\n  describe('数据位配置测试', () => {\r\n    it('应该处理7位数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,      // 空闲状态\r\n            0,            // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, // 7位数据\r\n            1,            // 停止位\r\n            1, 1, 1       // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 1, value: '7' } // data_bits = 7\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该处理5位数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,   // 空闲状态\r\n            0,         // 起始位\r\n            1, 0, 1, 0, 1, // 5位数据\r\n            1,         // 停止位\r\n            1, 1, 1    // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 1, value: '5' } // data_bits = 5\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('校验位测试', () => {\r\n    it('应该检测正确的偶校验', () => {\r\n      // 数据: 0x0F = 00001111 (4个1，偶校验位应该为0)\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 1, 1, 1, 0, 0, 0, 0, // 数据位 (LSB先): 0x0F\r\n            0,                   // 偶校验位 (4个1是偶数，校验位为0)\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 2, value: 'even' } // parity = even\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      // 检查是否有校验正确的注释\r\n      const parityOkAnnotations = results.filter(r => \r\n        r.annotationType === 4 // rx-parity-ok\r\n      );\r\n      \r\n      expect(parityOkAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该检测校验错误', () => {\r\n      // 数据: 0x0F = 00001111 (4个1，偶校验位应该为0，但我们设置为1)\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 1, 1, 1, 0, 0, 0, 0, // 数据位 (LSB先): 0x0F\r\n            1,                   // 错误的偶校验位 (应该为0，但设置为1)\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 2, value: 'even' } // parity = even\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      // 检查是否有校验错误的注释\r\n      const parityErrAnnotations = results.filter(r => \r\n        r.annotationType === 6 // rx-parity-err\r\n      );\r\n      \r\n      expect(parityErrAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('数据格式测试', () => {\r\n    it('应该正确格式化十六进制数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 5, value: 'hex' } // format = hex\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      if (dataAnnotations.length > 0) {\r\n        // 检查十六进制格式输出\r\n        expect(dataAnnotations[0].values).toBeDefined();\r\n        expect(dataAnnotations[0].values.length).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    it('应该正确格式化ASCII数据', () => {\r\n      // 数据: 0x41 = 'A'\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 0, 0, 0, 0, 1, 0, // 数据位 (LSB先): 0x41 = 'A'\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 5, value: 'ascii' } // format = ascii\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      if (dataAnnotations.length > 0) {\r\n        expect(dataAnnotations[0].values).toBeDefined();\r\n        expect(dataAnnotations[0].values.length).toBeGreaterThan(0);\r\n        // 如果是可打印字符，应该包含 'A'\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('错误处理', () => {\r\n    it('应该检测帧错误 (起始位不为0)', () => {\r\n      // 由于解码器的架构，这个测试实际上验证解码器在没有找到有效帧时的行为\r\n      // 创建一个没有下降沿的数据序列，因此不会产生任何帧\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // 全部为1，没有下降沿\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      \r\n      // 验证没有产生数据注释（因为没有有效帧）\r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      // 由于没有有效的UART帧，不应该有数据注释\r\n      expect(dataAnnotations.length).toBe(0);\r\n      \r\n      // 同样不应该有警告注释，因为没有检测到任何帧尝试\r\n      const warningAnnotations = results.filter(r => \r\n        r.annotationType === 10 // rx-warning\r\n      );\r\n      \r\n      expect(warningAnnotations.length).toBe(0);\r\n    });\r\n\r\n    it('应该检测停止位错误', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位\r\n            0,                   // 错误的停止位 (应该为1)\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      \r\n      // 检查是否有警告注释\r\n      const warningAnnotations = results.filter(r => \r\n        r.annotationType === 10 // rx-warning\r\n      );\r\n      \r\n      expect(warningAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('TX通道测试', () => {\r\n    it('应该解码TX通道数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([]) },\r\n        { \r\n          channelNumber: 1, \r\n          channelName: 'TX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      \r\n      // 检查是否有TX数据注释\r\n      const txDataAnnotations = results.filter(r => \r\n        r.annotationType === 1 // tx-data\r\n      );\r\n      \r\n      expect(txDataAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('边界条件测试', () => {\r\n    it('应该处理空数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 1, 1]) } // 至少有一些数据\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      expect(results).toBeDefined();\r\n      // 没有有效帧的数据应该正常处理，不抛出异常\r\n    });\r\n\r\n    it('应该处理短数据序列', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([1, 0]) }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      expect(results).toBeDefined();\r\n      // 短数据序列应该正常处理\r\n    });\r\n\r\n    it('应该处理不完整的帧', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1, // 空闲状态\r\n            0,       // 起始位\r\n            1, 0, 1  // 不完整的数据位 (少于8位)\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      expect(results).toBeDefined();\r\n      // 不完整的帧应该正常处理，不产生完整的数据注释\r\n    });\r\n  });\r\n\r\n  describe('重置功能', () => {\r\n    it('应该正确重置解码器状态', () => {\r\n      const channels1: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1, // 空闲状态\r\n            0,        // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,        // 停止位\r\n            1, 1      // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results1 = uartDecoder.decode(115200, channels1, []);\r\n      expect(results1).toBeDefined();\r\n\r\n      // 第二次解码应该产生独立的结果\r\n      const channels2: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1, // 空闲状态\r\n            0,        // 起始位\r\n            0, 1, 0, 1, 0, 1, 0, 1, // 数据位: 0xAA\r\n            1,        // 停止位\r\n            1, 1      // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results2 = uartDecoder.decode(9600, channels2, []);\r\n      expect(results2).toBeDefined();\r\n      \r\n      // 两次解码的结果应该是独立的\r\n      expect(results1).not.toEqual(results2);\r\n    });\r\n  });\r\n\r\n  describe('校验位深度测试', () => {\r\n    it('应该正确处理奇校验', () => {\r\n      // 数据: 0x07 = 00000111 (3个1，奇校验位应该为0)\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 1, 1, 0, 0, 0, 0, 0, // 数据位 (LSB先): 0x07\r\n            0,                   // 奇校验位 (3个1是奇数，校验位为0)\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 2, value: 'odd' } // parity = odd\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      // 检查是否有校验正确的注释\r\n      const parityOkAnnotations = results.filter(r => \r\n        r.annotationType === 4 // rx-parity-ok\r\n      );\r\n      \r\n      expect(parityOkAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该正确处理zero校验', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            0,                   // zero校验位 (总是0)\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 2, value: 'zero' } // parity = zero\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const parityOkAnnotations = results.filter(r => \r\n        r.annotationType === 4 // rx-parity-ok\r\n      );\r\n      \r\n      expect(parityOkAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该正确处理one校验', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,                   // one校验位 (总是1)\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 2, value: 'one' } // parity = one\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const parityOkAnnotations = results.filter(r => \r\n        r.annotationType === 4 // rx-parity-ok\r\n      );\r\n      \r\n      expect(parityOkAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该正确处理ignore校验', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,                   // 随意的校验位\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 2, value: 'ignore' } // parity = ignore\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const parityOkAnnotations = results.filter(r => \r\n        r.annotationType === 4 // rx-parity-ok\r\n      );\r\n      \r\n      expect(parityOkAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('完整配置选项测试', () => {\r\n    it('应该正确处理位序选项 (MSB-first)', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 4, value: 'msb-first' } // bit_order = msb-first\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该正确处理RX反相选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            0, 0, 0,             // 空闲状态 (反相后)\r\n            1,                   // 起始位 (反相后)\r\n            0, 1, 0, 1, 0, 1, 0, 1, // 数据位 (反相后)\r\n            0,                   // 停止位 (反相后)\r\n            0, 0, 0              // 空闲状态 (反相后)\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 6, value: 'yes' } // invert_rx = yes\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该正确处理TX反相选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { channelNumber: 0, channelName: 'RX', samples: new Uint8Array([]) },\r\n        { \r\n          channelNumber: 1, \r\n          channelName: 'TX', \r\n          samples: new Uint8Array([\r\n            0, 0, 0,             // 空闲状态 (反相后)\r\n            1,                   // 起始位 (反相后)\r\n            0, 1, 0, 1, 0, 1, 0, 1, // 数据位 (反相后)\r\n            0,                   // 停止位 (反相后)\r\n            0, 0, 0              // 空闲状态 (反相后)\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 7, value: 'yes' } // invert_tx = yes\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该正确处理采样点选项', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 8, value: 25 } // sample_point = 25%\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('多种数据格式测试', () => {\r\n    it('应该正确格式化十进制数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55 = 85\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 5, value: 'dec' } // format = dec\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      expect(dataAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该正确格式化八进制数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 5, value: 'oct' } // format = oct\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      expect(dataAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该正确格式化二进制数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 5, value: 'bin' } // format = bin\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      expect(dataAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该正确处理非可打印ASCII字符', () => {\r\n      // 数据: 0x01 (非可打印字符)\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 0, 0, 0, 0, 0, 0, // 数据位 (LSB先): 0x01\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 5, value: 'ascii' } // format = ascii\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      \r\n      const dataAnnotations = results.filter(r => \r\n        r.annotationType === 0 // rx-data\r\n      );\r\n      \r\n      expect(dataAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('停止位配置测试', () => {\r\n    it('应该处理0.5停止位', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 3, value: '0.5' } // stop_bits = 0.5\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该处理1.5停止位', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位\r\n            1, 1,                // 1.5停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 3, value: '1.5' } // stop_bits = 1.5\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该处理2.0停止位', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位\r\n            1, 1,                // 2停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 3, value: '2.0' } // stop_bits = 2.0\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('9位数据模式测试', () => {\r\n    it('应该正确处理9位数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, 1, // 9位数据\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 1, value: '9' } // data_bits = 9\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('长数据包测试', () => {\r\n    it('应该处理长数据包并触发包处理', () => {\r\n      // 创建一个包含多个字节的长数据流，触发包处理逻辑\r\n      const frames = [];\r\n      \r\n      // 添加18个连续的UART帧以触发包处理\r\n      for (let i = 0; i < 18; i++) {\r\n        frames.push(\r\n          1, 1, 1, // 空闲状态\r\n          0,       // 起始位\r\n          i & 1, (i >> 1) & 1, (i >> 2) & 1, (i >> 3) & 1, 0, 0, 0, 0, // 数据位\r\n          1        // 停止位\r\n        );\r\n      }\r\n      frames.push(1, 1, 1); // 最终空闲状态\r\n\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array(frames)\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      \r\n      // 检查是否有包注释生成\r\n      const packetAnnotations = results.filter(r => \r\n        r.annotationType === 16 // rx-packet\r\n      );\r\n      \r\n      expect(packetAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('边界条件增强测试', () => {\r\n    it('应该处理极端采样点值', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1\r\n          ])\r\n        }\r\n      ];\r\n\r\n      // 测试边界采样点\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 8, value: 1 } // sample_point = 1% (边界值)\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该处理超出范围的采样点值', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1\r\n          ])\r\n        }\r\n      ];\r\n\r\n      // 测试超出范围的采样点\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 8, value: 150 } // sample_point = 150% (超出范围)\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n\r\n    it('应该处理只有一个样本的数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([1])\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      expect(results).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('复杂场景测试', () => {\r\n    it('应该处理混合RX和TX数据', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            1, 0, 1, 0, 1, 0, 1, 0, // 数据位: 0x55\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        },\r\n        { \r\n          channelNumber: 1, \r\n          channelName: 'TX', \r\n          samples: new Uint8Array([\r\n            1, 1, 1,             // 空闲状态\r\n            0,                   // 起始位\r\n            0, 1, 0, 1, 0, 1, 0, 1, // 数据位: 0xAA\r\n            1,                   // 停止位\r\n            1, 1, 1              // 空闲状态\r\n          ])\r\n        }\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, []);\r\n      \r\n      // 应该同时有RX和TX的数据注释\r\n      const rxDataAnnotations = results.filter(r => r.annotationType === 0); // rx-data\r\n      const txDataAnnotations = results.filter(r => r.annotationType === 1); // tx-data\r\n      \r\n      expect(rxDataAnnotations.length).toBeGreaterThan(0);\r\n      expect(txDataAnnotations.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该处理低波特率和长位宽', () => {\r\n      const channels: ChannelData[] = [\r\n        { \r\n          channelNumber: 0, \r\n          channelName: 'RX', \r\n          samples: new Uint8Array(Array(200).fill(1).concat([\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 起始位 (更长的位宽)\r\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 数据位0\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 数据位1\r\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 数据位2\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 数据位3\r\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 数据位4\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 数据位5\r\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 数据位6\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 数据位7\r\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 停止位\r\n          ]).concat(Array(100).fill(1)))\r\n        }\r\n      ];\r\n\r\n      const options: DecoderOptionValue[] = [\r\n        { optionIndex: 0, value: 9600 } // 低波特率\r\n      ];\r\n\r\n      const results = uartDecoder.decode(115200, channels, options);\r\n      expect(results).toBeDefined();\r\n    });\r\n  });\r\n});"],"version":3}