{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/LACFileFormat.test.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/LACFileFormat.test.ts"],"sourcesContent":["/**\r\n * LACFileFormat 模块综合单元测试套件\r\n * 全面测试.lac文件格式读写处理器的功能\r\n * 与C#原版兼容性测试\r\n */\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport {\r\n  LACFileFormat,\r\n  ExportedCapture,\r\n  SampleRegion,\r\n  LACFileResult\r\n} from '../../../src/models/LACFileFormat';\r\nimport {\r\n  CaptureSession,\r\n  AnalyzerChannel,\r\n  BurstInfo\r\n} from '../../../src/models/CaptureModels';\r\nimport {\r\n  TriggerType,\r\n  DeviceInfo\r\n} from '../../../src/models/AnalyzerTypes';\r\n\r\n// Mock fs 模块\r\njest.mock('fs', () => ({\r\n  existsSync: jest.fn(),\r\n  promises: {\r\n    readFile: jest.fn(),\r\n    writeFile: jest.fn(),\r\n    mkdir: jest.fn()\r\n  }\r\n}));\r\n\r\nconst mockedFs = jest.mocked(fs);\r\n\r\ndescribe('LACFileFormat 模块单元测试套件', () => {\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('save() 方法测试', () => {\r\n    \r\n    it('应该成功保存基本的CaptureSession', async () => {\r\n      // 准备测试数据\r\n      const captureSession = new CaptureSession();\r\n      captureSession.frequency = 1000000;\r\n      captureSession.preTriggerSamples = 100;\r\n      captureSession.postTriggerSamples = 900;\r\n      captureSession.triggerType = TriggerType.Edge;\r\n      captureSession.triggerChannel = 0;\r\n      \r\n      const channel = new AnalyzerChannel(0, 'Test Channel');\r\n      channel.samples = new Uint8Array([1, 0, 1, 0, 1]);\r\n      captureSession.captureChannels = [channel];\r\n\r\n      // Mock文件系统操作\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockResolvedValue(undefined);\r\n\r\n      // 执行测试\r\n      const result = await LACFileFormat.save('/test/file.lac', captureSession);\r\n\r\n      // 验证结果\r\n      expect(result.success).toBe(true);\r\n      expect(result.filePath).toBe('/test/file.lac');\r\n      expect(result.data).toBeDefined();\r\n      expect(result.data!.Settings).toBe(captureSession);\r\n      expect(result.fileSize).toBeGreaterThan(0);\r\n\r\n      // 验证文件系统调用\r\n      expect(mockedFs.promises.mkdir).toHaveBeenCalledWith('/test', { recursive: true });\r\n      expect(mockedFs.promises.writeFile).toHaveBeenCalledWith(\r\n        '/test/file.lac',\r\n        expect.any(String),\r\n        'utf-8'\r\n      );\r\n    });\r\n\r\n    it('应该成功保存包含选择区域的数据', async () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.frequency = 2000000;\r\n      const channel = new AnalyzerChannel(0, 'Test Channel');\r\n      captureSession.captureChannels = [channel];\r\n\r\n      const selectedRegions = [\r\n        {\r\n          firstSample: 100,\r\n          lastSample: 200,\r\n          regionName: 'Region 1',\r\n          color: { r: 255, g: 0, b: 0, a: 128 }\r\n        },\r\n        {\r\n          firstSample: 300,\r\n          lastSample: 400,\r\n          regionName: 'Region 2',\r\n          color: { r: 0, g: 255, b: 0, a: 255 }\r\n        }\r\n      ];\r\n\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockResolvedValue(undefined);\r\n\r\n      const result = await LACFileFormat.save('/test/regions.lac', captureSession, selectedRegions);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data!.SelectedRegions).toBeDefined();\r\n      expect(result.data!.SelectedRegions!.length).toBe(2);\r\n      \r\n      const region1 = result.data!.SelectedRegions![0];\r\n      expect(region1.FirstSample).toBe(100);\r\n      expect(region1.LastSample).toBe(200);\r\n      expect(region1.RegionName).toBe('Region 1');\r\n      expect(region1.R).toBe(255);\r\n      expect(region1.G).toBe(0);\r\n      expect(region1.B).toBe(0);\r\n      expect(region1.A).toBe(128);\r\n    });\r\n\r\n    it('应该成功保存包含原始样本数据的文件', async () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.frequency = 1000000;\r\n      \r\n      const channel1 = new AnalyzerChannel(0, 'CH0');\r\n      channel1.samples = new Uint8Array([1, 0, 1, 1]);\r\n      const channel2 = new AnalyzerChannel(1, 'CH1');\r\n      channel2.samples = new Uint8Array([0, 1, 0, 0]);\r\n      \r\n      captureSession.captureChannels = [channel1, channel2];\r\n\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockResolvedValue(undefined);\r\n\r\n      const result = await LACFileFormat.save('/test/samples.lac', captureSession, undefined, true);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data!.Samples).toBeDefined();\r\n      expect(result.data!.Samples!.length).toBe(4); // 4个样本\r\n      \r\n      // 验证UInt128数组格式\r\n      expect(result.data!.Samples![0]).toMatch(/^[0-9a-f]{32}$/i); // 32位十六进制字符串\r\n    });\r\n\r\n    it('应该创建不存在的目录', async () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockResolvedValue(undefined);\r\n\r\n      await LACFileFormat.save('/new/dir/file.lac', captureSession);\r\n\r\n      expect(mockedFs.promises.mkdir).toHaveBeenCalledWith('/new/dir', { recursive: true });\r\n    });\r\n\r\n    it('应该处理写入错误', async () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockRejectedValue(new Error('Permission denied'));\r\n\r\n      const result = await LACFileFormat.save('/test/error.lac', captureSession);\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toContain('Failed to save file');\r\n      expect(result.error).toContain('Permission denied');\r\n    });\r\n\r\n    it('应该处理目录创建错误', async () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockRejectedValue(new Error('Disk full'));\r\n      mockedFs.promises.writeFile.mockResolvedValue(undefined);\r\n\r\n      const result = await LACFileFormat.save('/test/error.lac', captureSession);\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toContain('Failed to save file');\r\n    });\r\n\r\n    it('应该处理空的通道数组', async () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = []; // 空数组\r\n\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockResolvedValue(undefined);\r\n\r\n      const result = await LACFileFormat.save('/test/empty.lac', captureSession);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data!.Samples).toBeUndefined(); // 没有样本数据\r\n    });\r\n  });\r\n\r\n  describe('load() 方法测试', () => {\r\n    \r\n    it('应该成功加载有效的LAC文件', async () => {\r\n      const mockExportedCapture: ExportedCapture = {\r\n        Settings: {\r\n          frequency: 1000000,\r\n          preTriggerSamples: 100,\r\n          postTriggerSamples: 900,\r\n          triggerType: TriggerType.Edge,\r\n          triggerChannel: 0,\r\n          captureChannels: [\r\n            {\r\n              channelNumber: 0,\r\n              channelName: 'Test Channel',\r\n              samples: new Uint8Array([1, 0, 1, 0])\r\n            } as AnalyzerChannel\r\n          ]\r\n        } as CaptureSession\r\n      };\r\n\r\n      const mockFileContent = JSON.stringify(mockExportedCapture);\r\n      \r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue(mockFileContent);\r\n\r\n      const result = await LACFileFormat.load('/test/valid.lac');\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data).toBeDefined();\r\n      expect(result.data!.Settings.frequency).toBe(1000000);\r\n      expect(result.fileSize).toBe(Buffer.byteLength(mockFileContent, 'utf-8'));\r\n    });\r\n\r\n    it('应该成功加载包含选择区域的文件', async () => {\r\n      const mockExportedCapture: ExportedCapture = {\r\n        Settings: {\r\n          frequency: 2000000,\r\n          captureChannels: []\r\n        } as CaptureSession,\r\n        SelectedRegions: [\r\n          {\r\n            FirstSample: 100,\r\n            LastSample: 200,\r\n            RegionName: 'Test Region',\r\n            R: 255,\r\n            G: 128,\r\n            B: 64,\r\n            A: 200\r\n          }\r\n        ]\r\n      };\r\n\r\n      const mockFileContent = JSON.stringify(mockExportedCapture);\r\n      \r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue(mockFileContent);\r\n\r\n      const result = await LACFileFormat.load('/test/regions.lac');\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data!.SelectedRegions).toBeDefined();\r\n      expect(result.data!.SelectedRegions!.length).toBe(1);\r\n      expect(result.data!.SelectedRegions![0].RegionName).toBe('Test Region');\r\n    });\r\n\r\n    it('应该处理文件不存在的情况', async () => {\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n\r\n      const result = await LACFileFormat.load('/nonexistent/file.lac');\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toContain('File not found');\r\n      expect(result.error).toContain('/nonexistent/file.lac');\r\n    });\r\n\r\n    it('应该处理无效JSON格式', async () => {\r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue('invalid json content {');\r\n\r\n      const result = await LACFileFormat.load('/test/invalid.lac');\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toContain('Invalid JSON format');\r\n    });\r\n\r\n    it('应该处理缺少Settings的文件', async () => {\r\n      const invalidData = { invalidField: 'test' };\r\n      \r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue(JSON.stringify(invalidData));\r\n\r\n      const result = await LACFileFormat.load('/test/invalid.lac');\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toContain('missing Settings');\r\n    });\r\n\r\n    it('应该处理文件读取错误', async () => {\r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockRejectedValue(new Error('Permission denied'));\r\n\r\n      const result = await LACFileFormat.load('/test/protected.lac');\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toContain('Failed to load file');\r\n      expect(result.error).toContain('Permission denied');\r\n    });\r\n\r\n    it('应该处理空文件', async () => {\r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue('');\r\n\r\n      const result = await LACFileFormat.load('/test/empty.lac');\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toContain('Invalid JSON format');\r\n    });\r\n  });\r\n\r\n  describe('convertToCaptureSession() 方法测试', () => {\r\n    \r\n    it('应该正确转换基本的ExportedCapture', () => {\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: {\r\n          frequency: 2000000,\r\n          preTriggerSamples: 200,\r\n          postTriggerSamples: 1800,\r\n          triggerType: TriggerType.Complex,\r\n          triggerChannel: 1,\r\n          captureChannels: [\r\n            {\r\n              channelNumber: 0,\r\n              channelName: 'SDA',\r\n              samples: new Uint8Array([1, 0, 1, 1])\r\n            } as AnalyzerChannel\r\n          ]\r\n        } as CaptureSession\r\n      };\r\n\r\n      const result = LACFileFormat.convertToCaptureSession(exportedCapture);\r\n\r\n      expect(result).toBe(exportedCapture.Settings);\r\n      expect(result.frequency).toBe(2000000);\r\n      expect(result.triggerType).toBe(TriggerType.Complex);\r\n      expect(result.captureChannels.length).toBe(1);\r\n    });\r\n\r\n    it('应该正确提取UInt128样本数据', () => {\r\n      const captureSession = new CaptureSession();\r\n      const channel1 = new AnalyzerChannel(0, 'CH0');\r\n      const channel2 = new AnalyzerChannel(1, 'CH1');\r\n      captureSession.captureChannels = [channel1, channel2];\r\n\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: captureSession,\r\n        Samples: [\r\n          '00000000000000000000000000000001', // 第1个样本：CH0=1, CH1=0\r\n          '00000000000000000000000000000002', // 第2个样本：CH0=0, CH1=1  \r\n          '00000000000000000000000000000003', // 第3个样本：CH0=1, CH1=1\r\n          '00000000000000000000000000000000'  // 第4个样本：CH0=0, CH1=0\r\n        ]\r\n      };\r\n\r\n      const result = LACFileFormat.convertToCaptureSession(exportedCapture);\r\n\r\n      expect(result.captureChannels[0].samples).toBeDefined();\r\n      expect(result.captureChannels[1].samples).toBeDefined();\r\n      expect(result.captureChannels[0].samples!.length).toBe(4);\r\n      expect(result.captureChannels[1].samples!.length).toBe(4);\r\n      \r\n      // 验证样本数据\r\n      expect(result.captureChannels[0].samples![0]).toBe(1); // CH0 第1个样本\r\n      expect(result.captureChannels[1].samples![0]).toBe(0); // CH1 第1个样本\r\n      expect(result.captureChannels[0].samples![1]).toBe(0); // CH0 第2个样本  \r\n      expect(result.captureChannels[1].samples![1]).toBe(1); // CH1 第2个样本\r\n    });\r\n\r\n    it('应该处理没有Samples的情况', () => {\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: {\r\n          frequency: 1000000,\r\n          captureChannels: [new AnalyzerChannel(0, 'CH0')]\r\n        } as CaptureSession\r\n      };\r\n\r\n      const result = LACFileFormat.convertToCaptureSession(exportedCapture);\r\n\r\n      expect(result.captureChannels[0].samples).toBeUndefined();\r\n    });\r\n\r\n    it('应该处理空的Samples数组', () => {\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: {\r\n          frequency: 1000000,\r\n          captureChannels: [new AnalyzerChannel(0, 'CH0')]\r\n        } as CaptureSession,\r\n        Samples: []\r\n      };\r\n\r\n      const result = LACFileFormat.convertToCaptureSession(exportedCapture);\r\n\r\n      expect(result.captureChannels[0].samples).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('createFromCaptureSession() 方法测试', () => {\r\n    \r\n    it('应该正确创建基本的ExportedCapture', () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.frequency = 3000000;\r\n      captureSession.triggerType = TriggerType.Fast;\r\n      \r\n      const channel = new AnalyzerChannel(0, 'Test Channel');\r\n      captureSession.captureChannels = [channel];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession);\r\n\r\n      expect(result.Settings).toBe(captureSession);\r\n      expect(result.Samples).toBeUndefined(); // 默认不包含样本数据\r\n      expect(result.SelectedRegions).toBeUndefined();\r\n    });\r\n\r\n    it('应该正确创建包含选择区域的ExportedCapture', () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n\r\n      const selectedRegions = [\r\n        {\r\n          firstSample: 50,\r\n          lastSample: 150,\r\n          regionName: 'Important Region',\r\n          color: { r: 100, g: 200, b: 50, a: 180 }\r\n        }\r\n      ];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, selectedRegions);\r\n\r\n      expect(result.SelectedRegions).toBeDefined();\r\n      expect(result.SelectedRegions!.length).toBe(1);\r\n      expect(result.SelectedRegions![0].FirstSample).toBe(50);\r\n      expect(result.SelectedRegions![0].LastSample).toBe(150);\r\n      expect(result.SelectedRegions![0].RegionName).toBe('Important Region');\r\n      expect(result.SelectedRegions![0].R).toBe(100);\r\n      expect(result.SelectedRegions![0].G).toBe(200);\r\n      expect(result.SelectedRegions![0].B).toBe(50);\r\n      expect(result.SelectedRegions![0].A).toBe(180);\r\n    });\r\n\r\n    it('应该正确创建包含原始样本数据的ExportedCapture', () => {\r\n      const captureSession = new CaptureSession();\r\n      \r\n      const channel1 = new AnalyzerChannel(0, 'CH0');\r\n      channel1.samples = new Uint8Array([1, 0, 1]);\r\n      const channel2 = new AnalyzerChannel(1, 'CH1');\r\n      channel2.samples = new Uint8Array([0, 1, 1]);\r\n      \r\n      captureSession.captureChannels = [channel1, channel2];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      expect(result.Samples).toBeDefined();\r\n      expect(result.Samples!.length).toBe(3); // 3个样本\r\n      \r\n      // 验证UInt128编码\r\n      expect(result.Samples![0]).toBe('00000000000000000000000000000001'); // CH0=1, CH1=0\r\n      expect(result.Samples![1]).toBe('00000000000000000000000000000002'); // CH0=0, CH1=1\r\n      expect(result.Samples![2]).toBe('00000000000000000000000000000003'); // CH0=1, CH1=1\r\n    });\r\n\r\n    it('应该处理空的通道数组', () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      // 当通道数组为空时，不会设置 Samples 属性\r\n      expect(result.Samples).toBeUndefined();\r\n    });\r\n\r\n    it('应该处理没有样本数据的通道', () => {\r\n      const captureSession = new CaptureSession();\r\n      const channel = new AnalyzerChannel(0, 'CH0');\r\n      // 不设置 samples 属性\r\n      captureSession.captureChannels = [channel];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      expect(result.Samples).toBeDefined();\r\n      expect(result.Samples!.length).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('样本数据编码/解码测试', () => {\r\n    \r\n    it('应该正确编码单通道样本数据', () => {\r\n      const captureSession = new CaptureSession();\r\n      \r\n      const channel = new AnalyzerChannel(0, 'CH0');\r\n      channel.samples = new Uint8Array([1, 0, 1, 1, 0]);\r\n      captureSession.captureChannels = [channel];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      expect(result.Samples).toBeDefined();\r\n      expect(result.Samples!.length).toBe(5);\r\n      expect(result.Samples![0]).toBe('00000000000000000000000000000001'); // 1\r\n      expect(result.Samples![1]).toBe('00000000000000000000000000000000'); // 0\r\n      expect(result.Samples![2]).toBe('00000000000000000000000000000001'); // 1\r\n      expect(result.Samples![3]).toBe('00000000000000000000000000000001'); // 1\r\n      expect(result.Samples![4]).toBe('00000000000000000000000000000000'); // 0\r\n    });\r\n\r\n    it('应该正确编码多通道样本数据', () => {\r\n      const captureSession = new CaptureSession();\r\n      \r\n      const channel0 = new AnalyzerChannel(0, 'CH0');\r\n      channel0.samples = new Uint8Array([1, 0, 1]);\r\n      const channel1 = new AnalyzerChannel(1, 'CH1');\r\n      channel1.samples = new Uint8Array([0, 1, 0]);\r\n      const channel2 = new AnalyzerChannel(2, 'CH2');\r\n      channel2.samples = new Uint8Array([1, 1, 1]);\r\n      \r\n      captureSession.captureChannels = [channel0, channel1, channel2];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      expect(result.Samples!.length).toBe(3);\r\n      // 第1个样本: CH0=1, CH1=0, CH2=1 -> 二进制101 -> 5\r\n      expect(result.Samples![0]).toBe('00000000000000000000000000000005');\r\n      // 第2个样本: CH0=0, CH1=1, CH2=1 -> 二进制110 -> 6  \r\n      expect(result.Samples![1]).toBe('00000000000000000000000000000006');\r\n      // 第3个样本: CH0=1, CH1=0, CH2=1 -> 二进制101 -> 5\r\n      expect(result.Samples![2]).toBe('00000000000000000000000000000005');\r\n    });\r\n\r\n    it('应该正确解码样本数据', () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1'),\r\n        new AnalyzerChannel(2, 'CH2')\r\n      ];\r\n\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: captureSession,\r\n        Samples: [\r\n          '00000000000000000000000000000005', // 二进制101: CH0=1, CH1=0, CH2=1\r\n          '00000000000000000000000000000006', // 二进制110: CH0=0, CH1=1, CH2=1\r\n          '00000000000000000000000000000003'  // 二进制011: CH0=1, CH1=1, CH2=0\r\n        ]\r\n      };\r\n\r\n      const result = LACFileFormat.convertToCaptureSession(exportedCapture);\r\n\r\n      expect(result.captureChannels[0].samples).toEqual(new Uint8Array([1, 0, 1]));\r\n      expect(result.captureChannels[1].samples).toEqual(new Uint8Array([0, 1, 1]));\r\n      expect(result.captureChannels[2].samples).toEqual(new Uint8Array([1, 1, 0]));\r\n    });\r\n\r\n    it('应该处理超过128通道的情况', () => {\r\n      const captureSession = new CaptureSession();\r\n      \r\n      // 创建130个通道（超过128的限制）\r\n      for (let i = 0; i < 130; i++) {\r\n        const channel = new AnalyzerChannel(i, `CH${i}`);\r\n        channel.samples = new Uint8Array([i % 2]); // 交替0和1\r\n        captureSession.captureChannels.push(channel);\r\n      }\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      expect(result.Samples).toBeDefined();\r\n      expect(result.Samples!.length).toBe(1);\r\n      \r\n      // 应该只处理前128个通道\r\n      const uint128Value = BigInt(`0x${result.Samples![0]}`);\r\n      \r\n      // 验证第128个通道（索引127）的值\r\n      const mask127 = BigInt(1) << BigInt(127);\r\n      expect((uint128Value & mask127) !== BigInt(0)).toBe(true); // 127 % 2 = 1\r\n    });\r\n\r\n    it('应该处理大整数值', () => {\r\n      const captureSession = new CaptureSession();\r\n      \r\n      // 创建一个会产生大整数的通道配置\r\n      const channel63 = new AnalyzerChannel(63, 'CH63');\r\n      channel63.samples = new Uint8Array([1]);\r\n      const channel127 = new AnalyzerChannel(127, 'CH127');\r\n      channel127.samples = new Uint8Array([1]);\r\n      \r\n      captureSession.captureChannels = [channel63, channel127];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      expect(result.Samples![0]).toMatch(/^[0-9a-f]{32}$/i);\r\n      \r\n      // 验证解码后的数据\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: captureSession,\r\n        Samples: result.Samples\r\n      };\r\n      \r\n      const decoded = LACFileFormat.convertToCaptureSession(exportedCapture);\r\n      expect(decoded.captureChannels[0].samples![0]).toBe(1);\r\n      expect(decoded.captureChannels[1].samples![0]).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('JSON序列化/反序列化测试', () => {\r\n    \r\n    it('应该正确序列化SampleRegion', () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n      \r\n      const selectedRegions = [\r\n        {\r\n          firstSample: 10,\r\n          lastSample: 20,\r\n          regionName: 'Test Region',\r\n          color: { r: 255, g: 128, b: 64, a: 200 }\r\n        }\r\n      ];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, selectedRegions);\r\n\r\n      // 序列化到JSON\r\n      const jsonString = JSON.stringify(result);\r\n      const parsed = JSON.parse(jsonString);\r\n\r\n      expect(parsed.SelectedRegions).toBeDefined();\r\n      expect(parsed.SelectedRegions[0].FirstSample).toBe(10);\r\n      expect(parsed.SelectedRegions[0].LastSample).toBe(20);\r\n      expect(parsed.SelectedRegions[0].RegionName).toBe('Test Region');\r\n      expect(parsed.SelectedRegions[0].R).toBe(255);\r\n      expect(parsed.SelectedRegions[0].G).toBe(128);\r\n      expect(parsed.SelectedRegions[0].B).toBe(64);\r\n      expect(parsed.SelectedRegions[0].A).toBe(200);\r\n    });\r\n\r\n    it('应该正确反序列化SampleRegion', () => {\r\n      const mockData = {\r\n        Settings: {\r\n          frequency: 1000000,\r\n          captureChannels: []\r\n        },\r\n        SelectedRegions: [\r\n          {\r\n            FirstSample: 50,\r\n            LastSample: 100,\r\n            RegionName: 'Parsed Region',\r\n            R: 100,\r\n            G: 150,\r\n            B: 200,\r\n            A: 250\r\n          }\r\n        ]\r\n      };\r\n\r\n      const jsonString = JSON.stringify(mockData);\r\n      \r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue(jsonString);\r\n\r\n      return LACFileFormat.load('/test/file.lac').then(result => {\r\n        expect(result.success).toBe(true);\r\n        expect(result.data!.SelectedRegions).toBeDefined();\r\n        expect(result.data!.SelectedRegions![0].FirstSample).toBe(50);\r\n        expect(result.data!.SelectedRegions![0].LastSample).toBe(100);\r\n        expect(result.data!.SelectedRegions![0].RegionName).toBe('Parsed Region');\r\n        expect(result.data!.SelectedRegions![0].R).toBe(100);\r\n        expect(result.data!.SelectedRegions![0].G).toBe(150);\r\n        expect(result.data!.SelectedRegions![0].B).toBe(200);\r\n        expect(result.data!.SelectedRegions![0].A).toBe(250);\r\n      });\r\n    });\r\n\r\n    it('应该处理不完整的SampleRegion数据', () => {\r\n      const mockData = {\r\n        Settings: {\r\n          frequency: 1000000,\r\n          captureChannels: []\r\n        },\r\n        SelectedRegions: [\r\n          {\r\n            FirstSample: 10,\r\n            // 缺少其他字段\r\n          }\r\n        ]\r\n      };\r\n\r\n      const jsonString = JSON.stringify(mockData);\r\n      \r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue(jsonString);\r\n\r\n      return LACFileFormat.load('/test/file.lac').then(result => {\r\n        expect(result.success).toBe(true);\r\n        expect(result.data!.SelectedRegions).toBeDefined();\r\n        expect(result.data!.SelectedRegions![0].FirstSample).toBe(10);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('错误处理和边界条件测试', () => {\r\n    \r\n    it('应该处理null和undefined输入', () => {\r\n      expect(() => {\r\n        LACFileFormat.convertToCaptureSession(null as any);\r\n      }).toThrow();\r\n\r\n      expect(() => {\r\n        LACFileFormat.createFromCaptureSession(null as any);\r\n      }).toThrow();\r\n    });\r\n\r\n    it('应该处理空的样本数组', () => {\r\n      const captureSession = new CaptureSession();\r\n      const channel = new AnalyzerChannel(0, 'CH0');\r\n      channel.samples = new Uint8Array(0); // 空数组\r\n      captureSession.captureChannels = [channel];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      expect(result.Samples).toBeDefined();\r\n      expect(result.Samples!.length).toBe(0);\r\n    });\r\n\r\n    it('应该处理不一致的样本数量', () => {\r\n      const captureSession = new CaptureSession();\r\n      \r\n      const channel1 = new AnalyzerChannel(0, 'CH0');\r\n      channel1.samples = new Uint8Array([1, 0, 1]); // 3个样本\r\n      \r\n      const channel2 = new AnalyzerChannel(1, 'CH1');  \r\n      channel2.samples = new Uint8Array([0, 1]); // 2个样本\r\n      \r\n      captureSession.captureChannels = [channel1, channel2];\r\n\r\n      const result = LACFileFormat.createFromCaptureSession(captureSession, undefined, true);\r\n\r\n      // 应该使用第一个通道的样本数量\r\n      expect(result.Samples!.length).toBe(3);\r\n    });\r\n\r\n    it('应该处理无效的十六进制字符串', () => {\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n\r\n      const exportedCapture: ExportedCapture = {\r\n        Settings: captureSession,\r\n        Samples: ['invalid_hex_string', 'another_invalid']\r\n      };\r\n\r\n      // 应该不抛出异常，并且无效数据被设置为0\r\n      expect(() => {\r\n        LACFileFormat.convertToCaptureSession(exportedCapture);\r\n      }).not.toThrow();\r\n\r\n      const result = LACFileFormat.convertToCaptureSession(exportedCapture);\r\n      expect(result.captureChannels[0].samples).toBeDefined();\r\n      expect(result.captureChannels[0].samples![0]).toBe(0); // 无效字符串被设置为0\r\n      expect(result.captureChannels[0].samples![1]).toBe(0);\r\n    });\r\n\r\n    it('应该处理非常大的文件路径', async () => {\r\n      const longPath = '/very/very/very/long/path/that/might/cause/issues/in/some/systems/file.lac';\r\n      const captureSession = new CaptureSession();\r\n      captureSession.captureChannels = [new AnalyzerChannel(0, 'CH0')];\r\n\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockResolvedValue(undefined);\r\n\r\n      const result = await LACFileFormat.save(longPath, captureSession);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.filePath).toBe(longPath);\r\n    });\r\n  });\r\n\r\n  describe('完整的读写循环测试', () => {\r\n    \r\n    it('应该支持完整的保存-加载循环', async () => {\r\n      // 创建原始数据\r\n      const originalSession = new CaptureSession();\r\n      originalSession.frequency = 5000000;\r\n      originalSession.preTriggerSamples = 250;\r\n      originalSession.postTriggerSamples = 2750;\r\n      originalSession.triggerType = TriggerType.Blast;\r\n      originalSession.triggerChannel = 2;\r\n      originalSession.triggerInverted = true;\r\n      \r\n      const channel1 = new AnalyzerChannel(0, 'SDA');\r\n      channel1.channelColor = 0xFF0000;\r\n      channel1.samples = new Uint8Array([1, 1, 0, 0, 1, 0, 1, 1]);\r\n      \r\n      const channel2 = new AnalyzerChannel(1, 'SCL');\r\n      channel2.channelColor = 0x00FF00;\r\n      channel2.samples = new Uint8Array([0, 1, 1, 0, 0, 1, 0, 1]);\r\n      \r\n      originalSession.captureChannels = [channel1, channel2];\r\n\r\n      const selectedRegions = [\r\n        {\r\n          firstSample: 100,\r\n          lastSample: 200,\r\n          regionName: 'Critical Section',\r\n          color: { r: 255, g: 255, b: 0, a: 180 }\r\n        }\r\n      ];\r\n\r\n      // Mock保存操作\r\n      let savedContent = '';\r\n      mockedFs.existsSync.mockReturnValue(false);\r\n      mockedFs.promises.mkdir.mockResolvedValue(undefined);\r\n      mockedFs.promises.writeFile.mockImplementation(async (path, content) => {\r\n        savedContent = content as string;\r\n      });\r\n\r\n      // 保存文件\r\n      const saveResult = await LACFileFormat.save(\r\n        '/test/roundtrip.lac', \r\n        originalSession, \r\n        selectedRegions, \r\n        true\r\n      );\r\n\r\n      expect(saveResult.success).toBe(true);\r\n      expect(savedContent).toBeTruthy();\r\n\r\n      // Mock加载操作\r\n      mockedFs.existsSync.mockReturnValue(true);\r\n      mockedFs.promises.readFile.mockResolvedValue(savedContent);\r\n\r\n      // 加载文件\r\n      const loadResult = await LACFileFormat.load('/test/roundtrip.lac');\r\n\r\n      expect(loadResult.success).toBe(true);\r\n      expect(loadResult.data).toBeDefined();\r\n\r\n      // 转换回CaptureSession\r\n      const reconstructedSession = LACFileFormat.convertToCaptureSession(loadResult.data!);\r\n\r\n      // 验证数据完整性\r\n      expect(reconstructedSession.frequency).toBe(originalSession.frequency);\r\n      expect(reconstructedSession.preTriggerSamples).toBe(originalSession.preTriggerSamples);\r\n      expect(reconstructedSession.postTriggerSamples).toBe(originalSession.postTriggerSamples);\r\n      expect(reconstructedSession.triggerType).toBe(originalSession.triggerType);\r\n      expect(reconstructedSession.triggerChannel).toBe(originalSession.triggerChannel);\r\n      expect(reconstructedSession.triggerInverted).toBe(originalSession.triggerInverted);\r\n\r\n      expect(reconstructedSession.captureChannels.length).toBe(2);\r\n      expect(reconstructedSession.captureChannels[0].channelName).toBe('SDA');\r\n      expect(reconstructedSession.captureChannels[0].channelColor).toBe(0xFF0000);\r\n      expect(reconstructedSession.captureChannels[0].samples).toEqual(channel1.samples);\r\n      expect(reconstructedSession.captureChannels[1].channelName).toBe('SCL');\r\n      expect(reconstructedSession.captureChannels[1].samples).toEqual(channel2.samples);\r\n\r\n      // 验证选择区域\r\n      expect(loadResult.data!.SelectedRegions).toBeDefined();\r\n      expect(loadResult.data!.SelectedRegions!.length).toBe(1);\r\n      expect(loadResult.data!.SelectedRegions![0].RegionName).toBe('Critical Section');\r\n    });\r\n  });\r\n});"],"version":3}