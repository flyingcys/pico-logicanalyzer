{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/services/WorkspaceManager.test.ts","mappings":"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","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/services/WorkspaceManager.test.ts"],"sourcesContent":["/**\r\n * WorkspaceManager 测试\r\n * 测试工作区集成和项目管理功能\r\n */\r\n\r\nimport * as vscode from 'vscode';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\nimport { \r\n  WorkspaceManager, \r\n  ProjectConfiguration, \r\n  ProjectCreationOptions,\r\n  ProjectFile,\r\n  FileType\r\n} from '../../../src/services/WorkspaceManager';\r\n\r\n// Mock dependencies\r\njest.mock('vscode', () => ({\r\n  workspace: {\r\n    workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\r\n    getConfiguration: jest.fn().mockReturnValue({\r\n      get: jest.fn(),\r\n      update: jest.fn(),\r\n    }),\r\n    createFileSystemWatcher: jest.fn().mockReturnValue({\r\n      onDidCreate: jest.fn(),\r\n      onDidChange: jest.fn(),\r\n      onDidDelete: jest.fn(),\r\n      dispose: jest.fn(),\r\n    }),\r\n    onDidChangeWorkspaceFolders: jest.fn(),\r\n    onDidChangeConfiguration: jest.fn(),\r\n  },\r\n  window: {\r\n    showErrorMessage: jest.fn(),\r\n    showWarningMessage: jest.fn(),\r\n    showInformationMessage: jest.fn(),\r\n    showInputBox: jest.fn(),\r\n    showQuickPick: jest.fn(),\r\n  },\r\n  commands: {\r\n    executeCommand: jest.fn().mockResolvedValue(undefined),\r\n  },\r\n  Uri: {\r\n    file: jest.fn().mockImplementation((path) => ({ fsPath: path })),\r\n  },\r\n  FileType: {\r\n    File: 1,\r\n    Directory: 2,\r\n  },\r\n}));\r\n\r\njest.mock('fs/promises', () => ({\r\n  readFile: jest.fn(),\r\n  writeFile: jest.fn(),\r\n  access: jest.fn(),\r\n  mkdir: jest.fn(),\r\n  readdir: jest.fn(),\r\n  stat: jest.fn(),\r\n  rm: jest.fn(),\r\n  copyFile: jest.fn(),\r\n  unlink: jest.fn(),\r\n}));\r\n\r\njest.mock('path', () => ({\r\n  join: jest.fn().mockImplementation((...args) => args.join('/')),\r\n  dirname: jest.fn().mockImplementation((p) => p.split('/').slice(0, -1).join('/')),\r\n  basename: jest.fn().mockImplementation((p) => p.split('/').pop()),\r\n  resolve: jest.fn().mockImplementation((p) => p),\r\n  extname: jest.fn().mockImplementation((p) => {\r\n    const parts = p.split('.');\r\n    return parts.length > 1 ? '.' + parts[parts.length - 1] : '';\r\n  }),\r\n  relative: jest.fn().mockImplementation((from, to) => to.replace(from, '').replace(/^\\//, '')),\r\n}));\r\n\r\ndescribe('WorkspaceManager 测试', () => {\r\n  let workspaceManager: WorkspaceManager;\r\n  let mockVSCode: any;\r\n  let mockFS: any;\r\n\r\n  beforeEach(() => {\r\n    mockVSCode = require('vscode') as any;\r\n    mockFS = require('fs/promises') as any;\r\n    \r\n    // 确保mock返回值符合期望格式\r\n    mockFS.readdir.mockImplementation((path, options) => {\r\n      if (options && options.withFileTypes) {\r\n        return Promise.resolve([]);\r\n      }\r\n      return Promise.resolve([]);\r\n    });\r\n    \r\n    workspaceManager = new WorkspaceManager();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    workspaceManager.dispose();\r\n  });\r\n\r\n  // 创建测试用的项目配置\r\n  const createTestProjectConfig = (): ProjectConfiguration => ({\r\n    name: '测试项目',\r\n    version: '1.0.0',\r\n    description: '用于单元测试的项目',\r\n    author: 'test-user',\r\n    createdAt: '2025-07-30T12:00:00Z',\r\n    updatedAt: '2025-07-30T12:00:00Z',\r\n    structure: {\r\n      sessionsDir: 'sessions',\r\n      dataDir: 'data',\r\n      analysisDir: 'analysis',\r\n      reportsDir: 'reports',\r\n      configDir: 'config',\r\n      tempDir: 'temp',\r\n    },\r\n    settings: {\r\n      defaultSampleRate: 24000000,\r\n      defaultChannelCount: 8,\r\n      autoBackup: true,\r\n      compressionEnabled: true,\r\n      collaborationEnabled: false,\r\n    },\r\n    metadata: {\r\n      totalSessions: 0,\r\n      totalDataSize: 0,\r\n      lastBackup: '',\r\n      tags: ['test'],\r\n    },\r\n  });\r\n\r\n  // 创建测试用的项目创建选项\r\n  const createTestProjectOptions = (): ProjectCreationOptions => ({\r\n    name: '测试项目',\r\n    location: '/test/projects/test-project',\r\n    template: 'basic',\r\n    initializeGit: false,\r\n    createSampleData: false,\r\n  });\r\n\r\n  describe('项目创建功能', () => {\r\n    it('应该能够创建新项目', async () => {\r\n      // Arrange\r\n      const options = createTestProjectOptions();\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n      mockFS.writeFile.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await workspaceManager.createProject(options);\r\n\r\n      // Assert\r\n      expect(mockFS.mkdir).toHaveBeenCalledWith(\r\n        options.location,\r\n        { recursive: true }\r\n      );\r\n      expect(mockFS.writeFile).toHaveBeenCalledWith(\r\n        expect.stringContaining('project.json'),\r\n        expect.any(String),\r\n        'utf8'\r\n      );\r\n    });\r\n\r\n    it('应该创建项目目录结构', async () => {\r\n      // Arrange\r\n      const options = createTestProjectOptions();\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n      mockFS.writeFile.mockResolvedValue(undefined);\r\n\r\n      // Act  \r\n      await workspaceManager.createProject(options);\r\n\r\n      // Assert\r\n      expect(mockFS.mkdir).toHaveBeenCalledTimes(14); // 实际创建的目录数量\r\n    });\r\n\r\n    it('应该处理项目创建失败的情况', async () => {\r\n      // Arrange\r\n      const options = createTestProjectOptions();\r\n      mockFS.mkdir.mockRejectedValue(new Error('创建失败'));\r\n\r\n      // Act & Assert\r\n      await expect(workspaceManager.createProject(options)).rejects.toThrow('创建失败');\r\n    });\r\n  });\r\n\r\n  describe('项目打开功能', () => {\r\n    it('应该能够打开现有项目', async () => {\r\n      // Arrange\r\n      const projectPath = '/test/projects/existing-project';\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined); // 文件存在\r\n\r\n      // Act\r\n      await workspaceManager.openProject(projectPath);\r\n\r\n      // Assert\r\n      expect(mockFS.readFile).toHaveBeenCalledWith(\r\n        expect.stringContaining('project.json'),\r\n        'utf8'\r\n      );\r\n      expect(workspaceManager.getCurrentProject()).toBeDefined();\r\n    });\r\n\r\n    it('应该处理项目文件不存在的情况', async () => {\r\n      // Arrange\r\n      const projectPath = '/test/projects/nonexistent-project';\r\n      mockFS.access.mockRejectedValue(new Error('ENOENT'));\r\n\r\n      // Act & Assert\r\n      await expect(workspaceManager.openProject(projectPath)).rejects.toThrow();\r\n    });\r\n\r\n    it('应该处理损坏的项目文件', async () => {\r\n      // Arrange\r\n      const projectPath = '/test/projects/corrupted-project';\r\n      mockFS.readFile.mockResolvedValue('无效的JSON');\r\n      mockFS.access.mockResolvedValue(undefined);\r\n\r\n      // Act & Assert\r\n      await expect(workspaceManager.openProject(projectPath)).rejects.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('项目管理功能', () => {\r\n    beforeEach(async () => {\r\n      // 设置当前项目\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      await workspaceManager.openProject('/test/projects/test-project');\r\n    });\r\n\r\n    it('应该能够更新项目配置', async () => {\r\n      // Arrange\r\n      const updates = { name: '更新后的项目名称' };\r\n      mockFS.writeFile.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await workspaceManager.updateProject(updates);\r\n\r\n      // Assert\r\n      expect(mockFS.writeFile).toHaveBeenCalledWith(\r\n        expect.stringContaining('project.json'),\r\n        expect.stringContaining(updates.name),\r\n        'utf8'\r\n      );\r\n    });\r\n\r\n    it('应该能够获取项目文件列表', async () => {\r\n      // Arrange\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        if (options && options.withFileTypes) {\r\n          return Promise.resolve([\r\n            {\r\n              name: 'session1.lacsession',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            },\r\n            {\r\n              name: 'session2.lacsession',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            }\r\n          ]);\r\n        }\r\n        return Promise.resolve(['session1.lacsession', 'session2.lacsession']);\r\n      });\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      const files = await workspaceManager.getProjectFiles(FileType.Session);\r\n\r\n      // Assert\r\n      expect(Array.isArray(files)).toBe(true);\r\n      expect(mockFS.readdir).toHaveBeenCalled();\r\n    });\r\n\r\n    it('应该能够关闭当前项目', async () => {\r\n      // Arrange - 先创建一个项目\r\n      const options = createTestProjectOptions();\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n      mockFS.writeFile.mockResolvedValue(undefined);\r\n      await workspaceManager.createProject(options);\r\n      \r\n      // Act\r\n      await workspaceManager.closeProject();\r\n\r\n      // Assert\r\n      expect(workspaceManager.getCurrentProject()).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('文件管理功能', () => {\r\n    beforeEach(async () => {\r\n      // 重置所有mock状态\r\n      jest.clearAllMocks();\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n      mockFS.writeFile.mockResolvedValue(undefined);\r\n      mockFS.copyFile.mockResolvedValue(undefined);\r\n      \r\n      // 设置当前项目\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      await workspaceManager.openProject('/test/projects/test-project');\r\n    });\r\n\r\n    it('应该能够添加文件到项目', async () => {\r\n      // Arrange\r\n      const sourceFile = '/test/external/data.lacs';\r\n      const targetPath = 'sessions/imported-data.lacs';\r\n      mockFS.copyFile.mockResolvedValue(undefined);\r\n      mockFS.writeFile.mockResolvedValue(undefined);\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n\r\n      // Act\r\n      const fileId = await workspaceManager.addFileToProject(\r\n        sourceFile,\r\n        FileType.Session,\r\n        targetPath\r\n      );\r\n\r\n      // Assert\r\n      expect(fileId).toBeDefined();\r\n      expect(mockFS.copyFile).toHaveBeenCalledWith(\r\n        sourceFile,\r\n        expect.stringContaining(targetPath)\r\n      );\r\n    });\r\n\r\n    it('应该能够从项目中删除文件', async () => {\r\n      // Arrange\r\n      const fileId = 'test-file-id';\r\n      \r\n      // 模拟文件系统结构\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        if (options && options.withFileTypes) {\r\n          return Promise.resolve([\r\n            {\r\n              name: 'test.lac',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            }\r\n          ]);\r\n        }\r\n        return Promise.resolve(['test.lac']);\r\n      });\r\n      \r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      mockFS.rm.mockResolvedValue(undefined);\r\n\r\n      // 模拟生成的文件ID与实际文件的匹配\r\n      // 注意：由于generateFileId是基于时间戳和随机数的，我们需要使用spy来控制它\r\n      const originalGenerateId = (workspaceManager as any).generateFileId;\r\n      const generateIdSpy = jest.spyOn(workspaceManager as any, 'generateFileId');\r\n      generateIdSpy.mockReturnValue(fileId);\r\n\r\n      // 先添加一个文件，然后删除它\r\n      const sourceFile = '/test/source.lac';\r\n      await workspaceManager.addFileToProject(sourceFile, FileType.Data);\r\n\r\n      // Act\r\n      await workspaceManager.removeFileFromProject(fileId);\r\n\r\n      // Assert\r\n      expect(mockFS.rm).toHaveBeenCalled();\r\n      \r\n      // Cleanup\r\n      generateIdSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe('备份和恢复功能', () => {\r\n    beforeEach(async () => {\r\n      // 设置当前项目\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      await workspaceManager.openProject('/test/projects/test-project');\r\n    });\r\n\r\n    it('应该能够创建项目备份', async () => {\r\n      // Arrange\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n      mockFS.copyFile.mockResolvedValue(undefined);\r\n      mockFS.writeFile.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      const backupPath = await workspaceManager.createBackup(true);\r\n\r\n      // Assert\r\n      expect(backupPath).toBeDefined();\r\n      expect(mockFS.mkdir).toHaveBeenCalled();\r\n    });\r\n\r\n    it('应该能够恢复项目备份', async () => {\r\n      // Arrange\r\n      const backupPath = '/test/backups/project-backup-20250730.zip';\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      mockFS.copyFile.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await workspaceManager.restoreBackup(backupPath);\r\n\r\n      // Assert\r\n      expect(mockFS.access).toHaveBeenCalledWith(backupPath);\r\n    });\r\n\r\n    it('应该处理备份文件不存在的情况', async () => {\r\n      // Arrange\r\n      const invalidBackupPath = '/test/backups/nonexistent-backup.zip';\r\n      mockFS.access.mockRejectedValue(new Error('ENOENT'));\r\n\r\n      // Act & Assert\r\n      await expect(workspaceManager.restoreBackup(invalidBackupPath)).rejects.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('项目状态管理', () => {\r\n    it('应该正确报告项目状态', () => {\r\n      // Act\r\n      const hasProject = workspaceManager.hasActiveProject();\r\n      const currentProject = workspaceManager.getCurrentProject();\r\n\r\n      // Assert\r\n      expect(typeof hasProject).toBe('boolean');\r\n      expect(currentProject).toBeNull(); // 没有打开的项目\r\n    });\r\n\r\n    it('应该能够获取项目信息', async () => {\r\n      // Arrange\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      await workspaceManager.openProject('/test/projects/test-project');\r\n\r\n      // Act\r\n      const projectInfo = workspaceManager.getProjectInfo();\r\n\r\n      // Assert\r\n      expect(projectInfo).toBeDefined();\r\n      expect(projectInfo?.name).toBe('测试项目');\r\n    });\r\n  });\r\n\r\n  describe('错误处理和边界情况', () => {\r\n    it('应该处理工作区不存在的情况', async () => {\r\n      // Arrange\r\n      const originalWorkspaceFolders = mockVSCode.workspace.workspaceFolders;\r\n      mockVSCode.workspace.workspaceFolders = undefined;\r\n      const options = createTestProjectOptions();\r\n      \r\n      // 设置一个会失败的操作，比如创建目录失败\r\n      mockFS.mkdir.mockRejectedValue(new Error('工作区不存在'));\r\n\r\n      // Act & Assert\r\n      await expect(workspaceManager.createProject(options)).rejects.toThrow();\r\n      \r\n      // Cleanup\r\n      mockVSCode.workspace.workspaceFolders = originalWorkspaceFolders;\r\n    });\r\n\r\n    it('应该处理文件权限错误', async () => {\r\n      // Arrange\r\n      const options = createTestProjectOptions();\r\n      mockFS.mkdir.mockRejectedValue(new Error('EACCES: permission denied'));\r\n\r\n      // Act & Assert\r\n      await expect(workspaceManager.createProject(options)).rejects.toThrow('permission denied');\r\n    });\r\n\r\n    it('应该处理磁盘空间不足', async () => {\r\n      // Arrange\r\n      const options = createTestProjectOptions();\r\n      mockFS.mkdir.mockRejectedValue(new Error('ENOSPC: no space left on device'));\r\n\r\n      // Act & Assert\r\n      await expect(workspaceManager.createProject(options)).rejects.toThrow('no space left');\r\n    });\r\n  });\r\n\r\n  describe('项目模板功能', () => {\r\n    it('应该能够获取项目模板列表', () => {\r\n      // Act\r\n      const templates = workspaceManager.getProjectTemplates();\r\n\r\n      // Assert\r\n      expect(Array.isArray(templates)).toBe(true);\r\n      expect(templates.length).toBeGreaterThan(0);\r\n      expect(templates[0]).toHaveProperty('name');\r\n      expect(templates[0]).toHaveProperty('displayName');\r\n      expect(templates[0]).toHaveProperty('description');\r\n      expect(templates[0]).toHaveProperty('structure');\r\n      expect(templates[0]).toHaveProperty('files');\r\n    });\r\n\r\n    it('应该包含基础项目模板', () => {\r\n      // Act\r\n      const templates = workspaceManager.getProjectTemplates();\r\n      const basicTemplate = templates.find(t => t.name === 'basic');\r\n\r\n      // Assert\r\n      expect(basicTemplate).toBeDefined();\r\n      expect(basicTemplate?.displayName).toBe('基础项目');\r\n      expect(basicTemplate?.structure).toContain('sessions');\r\n      expect(basicTemplate?.structure).toContain('data');\r\n      expect(basicTemplate?.files.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该包含协议分析项目模板', () => {\r\n      // Act\r\n      const templates = workspaceManager.getProjectTemplates();\r\n      const protocolTemplate = templates.find(t => t.name === 'protocol-analysis');\r\n\r\n      // Assert\r\n      expect(protocolTemplate).toBeDefined();\r\n      expect(protocolTemplate?.displayName).toBe('协议分析项目');\r\n      expect(protocolTemplate?.structure).toContain('protocols');\r\n      expect(protocolTemplate?.structure).toContain('decoders');\r\n    });\r\n\r\n    it('应该包含团队协作项目模板', () => {\r\n      // Act\r\n      const templates = workspaceManager.getProjectTemplates();\r\n      const collaborationTemplate = templates.find(t => t.name === 'team-collaboration');\r\n\r\n      // Assert\r\n      expect(collaborationTemplate).toBeDefined();\r\n      expect(collaborationTemplate?.displayName).toBe('团队协作项目');\r\n      expect(collaborationTemplate?.structure).toContain('shared');\r\n      expect(collaborationTemplate?.structure).toContain('docs');\r\n      expect(collaborationTemplate?.settings.collaborationEnabled).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('项目统计功能', () => {\r\n    beforeEach(async () => {\r\n      // 设置当前项目\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      await workspaceManager.openProject('/test/projects/test-project');\r\n    });\r\n\r\n    it('应该能够获取项目统计信息', async () => {\r\n      // Arrange\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        if (options && options.withFileTypes) {\r\n          return Promise.resolve([\r\n            {\r\n              name: 'session1.lacsession',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            },\r\n            {\r\n              name: 'data1.lac',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            }\r\n          ]);\r\n        }\r\n        return Promise.resolve(['session1.lacsession', 'data1.lac']);\r\n      });\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date('2025-07-30T10:00:00Z'),\r\n        mtime: new Date('2025-07-30T12:00:00Z'),\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      const stats = await workspaceManager.getProjectStatistics();\r\n\r\n      // Assert\r\n      expect(stats).toHaveProperty('fileCount');\r\n      expect(stats).toHaveProperty('totalSize');\r\n      expect(stats).toHaveProperty('sessionCount');\r\n      expect(stats).toHaveProperty('lastActivity');\r\n      expect(stats).toHaveProperty('storageUsage');\r\n      expect(typeof stats.fileCount).toBe('number');\r\n      expect(typeof stats.totalSize).toBe('number');\r\n    });\r\n\r\n    it('应该处理空项目的统计', async () => {\r\n      // Arrange\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        return Promise.resolve([]); // 空目录\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      const stats = await workspaceManager.getProjectStatistics();\r\n\r\n      // Assert\r\n      expect(stats.fileCount).toBe(0);\r\n      expect(stats.totalSize).toBe(0);\r\n      expect(stats.sessionCount).toBe(0);\r\n    });\r\n\r\n    it('应该处理统计获取失败的情况', async () => {\r\n      // Arrange - 创建一个新的实例来避免状态污染\r\n      const cleanWorkspaceManager = new WorkspaceManager();\r\n      \r\n      // Act & Assert\r\n      await expect(cleanWorkspaceManager.getProjectStatistics()).rejects.toThrow('没有打开的项目');\r\n      \r\n      // Cleanup\r\n      cleanWorkspaceManager.dispose();\r\n    });\r\n  });\r\n\r\n  describe('文件类型检测功能', () => {\r\n    beforeEach(async () => {\r\n      // 设置当前项目\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      await workspaceManager.openProject('/test/projects/test-project');\r\n    });\r\n\r\n    it('应该正确检测会话文件类型', async () => {\r\n      // Arrange\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        if (options && options.withFileTypes) {\r\n          return Promise.resolve([\r\n            {\r\n              name: 'test.lacsession',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            }\r\n          ]);\r\n        }\r\n        return Promise.resolve(['test.lacsession']);\r\n      });\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined); // 目录存在\r\n\r\n      // Act\r\n      const files = await workspaceManager.getProjectFiles(FileType.Session);\r\n\r\n      // Assert\r\n      expect(files.length).toBeGreaterThan(0);\r\n      expect(files[0].type).toBe(FileType.Session);\r\n    });\r\n\r\n    it('应该正确检测数据文件类型', async () => {\r\n      // Arrange\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        if (options && options.withFileTypes) {\r\n          return Promise.resolve([\r\n            {\r\n              name: 'test.lac',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            },\r\n            {\r\n              name: 'test.csv',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            },\r\n            {\r\n              name: 'test.json',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            }\r\n          ]);\r\n        }\r\n        return Promise.resolve(['test.lac', 'test.csv', 'test.json']);\r\n      });\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined); // 目录存在\r\n\r\n      // Act\r\n      const files = await workspaceManager.getProjectFiles(FileType.Data);\r\n\r\n      // Assert\r\n      expect(files.length).toBeGreaterThan(0);\r\n      files.forEach(file => {\r\n        expect(file.type).toBe(FileType.Data);\r\n      });\r\n    });\r\n\r\n    it('应该正确检测报告文件类型', async () => {\r\n      // Arrange\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        if (options && options.withFileTypes) {\r\n          return Promise.resolve([\r\n            {\r\n              name: 'report.html',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            },\r\n            {\r\n              name: 'report.pdf',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            }\r\n          ]);\r\n        }\r\n        return Promise.resolve(['report.html', 'report.pdf']);\r\n      });\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined); // 目录存在\r\n\r\n      // Act\r\n      const files = await workspaceManager.getProjectFiles(FileType.Report);\r\n\r\n      // Assert\r\n      expect(files.length).toBeGreaterThan(0);\r\n      files.forEach(file => {\r\n        expect(file.type).toBe(FileType.Report);\r\n      });\r\n    });\r\n\r\n    it('应该正确检测脚本文件类型', async () => {\r\n      // Arrange\r\n      mockFS.readdir.mockImplementation((dirPath, options) => {\r\n        if (options && options.withFileTypes) {\r\n          return Promise.resolve([\r\n            {\r\n              name: 'script.js',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            },\r\n            {\r\n              name: 'script.ts',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            },\r\n            {\r\n              name: 'script.py',\r\n              isFile: () => true,\r\n              isDirectory: () => false\r\n            }\r\n          ]);\r\n        }\r\n        return Promise.resolve(['script.js', 'script.ts', 'script.py']);\r\n      });\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n      mockFS.access.mockResolvedValue(undefined); // 目录存在\r\n\r\n      // Act\r\n      const files = await workspaceManager.getProjectFiles(FileType.Script);\r\n\r\n      // Assert\r\n      expect(files.length).toBeGreaterThan(0);\r\n      files.forEach(file => {\r\n        expect(file.type).toBe(FileType.Script);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('高级项目管理功能', () => {\r\n    beforeEach(async () => {\r\n      // 设置当前项目\r\n      const projectConfig = createTestProjectConfig();\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(projectConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      await workspaceManager.openProject('/test/projects/test-project');\r\n    });\r\n\r\n    it('应该能够添加文件时自动创建目录', async () => {\r\n      // Arrange\r\n      const sourceFile = '/test/external/data.lac';\r\n      const targetPath = 'nested/deep/data.lac';\r\n      mockFS.copyFile.mockResolvedValue(undefined);\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 2048,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n\r\n      // Act\r\n      await workspaceManager.addFileToProject(\r\n        sourceFile,\r\n        FileType.Data,\r\n        targetPath\r\n      );\r\n\r\n      // Assert\r\n      expect(mockFS.mkdir).toHaveBeenCalledWith(\r\n        expect.stringContaining('nested/deep'),\r\n        { recursive: true }\r\n      );\r\n      expect(mockFS.copyFile).toHaveBeenCalled();\r\n    });\r\n\r\n    it('应该能够添加文件到默认目录', async () => {\r\n      // Arrange\r\n      const sourceFile = '/test/external/session.lacsession';\r\n      mockFS.copyFile.mockResolvedValue(undefined);\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n      mockFS.stat.mockResolvedValue({\r\n        size: 1024,\r\n        birthtime: new Date(),\r\n        mtime: new Date(),\r\n      });\r\n\r\n      // Act\r\n      await workspaceManager.addFileToProject(\r\n        sourceFile,\r\n        FileType.Session\r\n      );\r\n\r\n      // Assert\r\n      expect(mockFS.mkdir).toHaveBeenCalled();\r\n      expect(mockFS.copyFile).toHaveBeenCalledWith(\r\n        sourceFile,\r\n        expect.stringContaining('sessions')\r\n      );\r\n    });\r\n\r\n    it('应该处理添加文件时的IO错误', async () => {\r\n      // Arrange\r\n      const sourceFile = '/test/external/data.lac';\r\n      mockFS.copyFile.mockRejectedValue(new Error('IO error'));\r\n\r\n      // Act & Assert\r\n      await expect(\r\n        workspaceManager.addFileToProject(sourceFile, FileType.Data)\r\n      ).rejects.toThrow('IO error');\r\n    });\r\n\r\n    it('应该处理删除不存在的文件', async () => {\r\n      // Arrange\r\n      const nonExistentFileId = 'non-existent-file-id';\r\n      mockFS.readdir.mockResolvedValue([]);\r\n\r\n      // Act & Assert\r\n      await expect(\r\n        workspaceManager.removeFileFromProject(nonExistentFileId)\r\n      ).rejects.toThrow('文件不存在');\r\n    });\r\n  });\r\n\r\n  describe('项目配置兼容性测试', () => {\r\n    it('应该处理旧版本项目配置', async () => {\r\n      // Arrange\r\n      const legacyConfig = {\r\n        name: '旧版本项目',\r\n        version: '0.9.0',\r\n        description: '旧版本项目描述',\r\n        author: 'legacy-user',\r\n        createdAt: '2024-01-01T00:00:00Z',\r\n        updatedAt: '2024-01-01T00:00:00Z',\r\n        structure: {\r\n          sessionsDir: 'sessions',\r\n          dataDir: 'data',\r\n          analysisDir: 'analysis',\r\n          reportsDir: 'reports',\r\n          configDir: 'config',\r\n          tempDir: 'temp',\r\n        },\r\n        settings: {\r\n          defaultSampleRate: 1000000,\r\n          defaultChannelCount: 8,\r\n          autoBackup: true,\r\n          compressionEnabled: true,\r\n          collaborationEnabled: false,\r\n        },\r\n        metadata: {\r\n          totalSessions: 0,\r\n          totalDataSize: 0,\r\n          tags: [],\r\n        },\r\n      };\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(legacyConfig));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await workspaceManager.openProject('/test/projects/legacy-project');\r\n\r\n      // Assert\r\n      expect(workspaceManager.getCurrentProject()).toBeDefined();\r\n      expect(workspaceManager.getCurrentProject()?.name).toBe('旧版本项目');\r\n    });\r\n\r\n    it('应该处理项目配置中的特殊字符', async () => {\r\n      // Arrange\r\n      const configWithSpecialChars = {\r\n        name: '测试项目 (含特殊字符: @#$%)',\r\n        description: '包含中文和特殊字符的描述：测试！',\r\n        author: '张三 <zhangsan@example.com>',\r\n        version: '1.0.0',\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n        structure: {\r\n          sessionsDir: 'sessions',\r\n          dataDir: 'data',\r\n          analysisDir: 'analysis',\r\n          reportsDir: 'reports',\r\n          configDir: 'config',\r\n          tempDir: 'temp',\r\n        },\r\n        settings: {\r\n          defaultSampleRate: 1000000,\r\n          defaultChannelCount: 8,\r\n          autoBackup: true,\r\n          compressionEnabled: true,\r\n          collaborationEnabled: false,\r\n        },\r\n        metadata: {\r\n          totalSessions: 0,\r\n          totalDataSize: 0,\r\n          tags: ['特殊', '测试', 'UTF-8'],\r\n        },\r\n      };\r\n      mockFS.readFile.mockResolvedValue(JSON.stringify(configWithSpecialChars));\r\n      mockFS.access.mockResolvedValue(undefined);\r\n      mockFS.mkdir.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await workspaceManager.openProject('/test/projects/special-chars-project');\r\n\r\n      // Assert\r\n      const project = workspaceManager.getCurrentProject();\r\n      expect(project?.name).toContain('特殊字符');\r\n      expect(project?.description).toContain('中文');\r\n      expect(project?.metadata.tags).toContain('UTF-8');\r\n    });\r\n  });\r\n\r\n  describe('内存管理和资源清理', () => {\r\n    it('应该在dispose时清理所有资源', () => {\r\n      // Arrange & Act\r\n      workspaceManager.dispose();\r\n\r\n      // Assert - 确保dispose方法可以被调用而不抛出错误\r\n      expect(() => workspaceManager.dispose()).not.toThrow();\r\n    });\r\n\r\n    it('应该正确处理事件监听器', async () => {\r\n      // Arrange\r\n      const listener = jest.fn();\r\n      \r\n      // 检查事件系统是否工作 - 只测试基本的事件注册功能\r\n      expect(typeof workspaceManager.on).toBe('function');\r\n      expect(typeof workspaceManager.emit).toBe('function');\r\n      \r\n      // 手动触发事件测试监听器\r\n      workspaceManager.on('test', listener);\r\n      workspaceManager.emit('test', 'testData');\r\n\r\n      // Assert\r\n      expect(listener).toHaveBeenCalledWith('testData');\r\n    });\r\n\r\n    it('应该正确处理多个事件监听器', () => {\r\n      // Arrange\r\n      const listener1 = jest.fn();\r\n      const listener2 = jest.fn();\r\n      \r\n      // Act\r\n      workspaceManager.on('projectCreated', listener1);\r\n      workspaceManager.on('projectOpened', listener2);\r\n      workspaceManager.emit('projectCreated', { name: 'Test' });\r\n      workspaceManager.emit('projectOpened', { name: 'Test' });\r\n\r\n      // Assert\r\n      expect(listener1).toHaveBeenCalledWith({ name: 'Test' });\r\n      expect(listener2).toHaveBeenCalledWith({ name: 'Test' });\r\n    });\r\n\r\n    it('应该能够移除事件监听器', () => {\r\n      // Arrange\r\n      const listener = jest.fn();\r\n      \r\n      // Act\r\n      workspaceManager.on('test', listener);\r\n      workspaceManager.off('test', listener);\r\n      workspaceManager.emit('test', 'testData');\r\n\r\n      // Assert\r\n      expect(listener).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});"],"version":3}