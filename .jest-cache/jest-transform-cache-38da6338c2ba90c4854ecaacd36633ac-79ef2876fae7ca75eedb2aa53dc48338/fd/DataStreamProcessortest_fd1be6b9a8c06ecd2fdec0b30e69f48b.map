{"file":"/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/DataStreamProcessor.test.ts","mappings":";AAAA;;;GAGG;;AAEH,iFASiD;AACjD,qEAI2C;AAC3C,qEAE2C;AAE3C,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAE1C,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAEpC,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACrB,MAAM,CAAC,qCAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,MAAM,CAAC,qCAAe,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAClE,MAAM,CAAC,qCAAe,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC9D,MAAM,CAAC,qCAAe,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACpE,MAAM,CAAC,qCAAe,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC9D,MAAM,CAAC,qCAAe,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACpD,MAAM,CAAC,qCAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACrB,MAAM,CAAC,MAAM,CAAC,qCAAe,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC7C,MAAM,CAAC,OAAO,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAI,SAA8B,CAAC;QACnC,IAAI,UAAqC,CAAC;QAE1C,UAAU,CAAC,GAAG,EAAE;YACd,UAAU,GAAG;gBACX,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;gBACzB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;gBACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;aACnB,CAAC;YAEF,SAAS,GAAG,IAAI,yCAAmB,CAAC;gBAClC,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,SAAS,EAAE,GAAG;gBACd,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,EAAE;aACrB,EAAE,UAAU,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACrB,MAAM,gBAAgB,GAAG,IAAI,yCAAmB,EAAE,CAAC;YACnD,MAAM,MAAM,GAAI,gBAAwB,CAAC,MAAM,CAAC;YAEhD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;YACnB,MAAM,MAAM,GAAI,SAAiB,CAAC,MAAM,CAAC;YAEzC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;YACnB,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,qCAAe,CAAC,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,SAAS,CAAC,YAAY,CAAC;gBACrB,UAAU,EAAE,IAAI;gBAChB,cAAc,EAAE,KAAK;aACtB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAI,SAAiB,CAAC,MAAM,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACrB,MAAM,SAAS,GAAG;gBAChB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;aACnB,CAAC;YAEF,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAElC,MAAM,MAAM,GAAI,SAAiB,CAAC,MAAM,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,UAAU;YACT,SAAiB,CAAC,KAAK,GAAG,qCAAe,CAAC,cAAc,CAAC;YACzD,SAAiB,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;YAC/C,SAAiB,CAAC,cAAc,GAAG,EAAE,CAAC;YACtC,SAAiB,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE1C,SAAS,CAAC,KAAK,EAAE,CAAC;YAElB,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,qCAAe,CAAC,IAAI,CAAC,CAAC;YACxD,MAAM,CAAE,SAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAE,SAAiB,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAE,SAAiB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,IAAI,SAA8B,CAAC;QAEnC,UAAU,CAAC,GAAG,EAAE;YACd,SAAS,GAAG,IAAI,yCAAmB,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YACrC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,aAAa,GAAG,KAAK,CAAC;YAE9B,MAAM,YAAY,GAAI,SAAiB,CAAC,qBAAqB,CAAC,IAAI,EAAE,2BAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAErG,2CAA2C;YAC3C,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,MAAM,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YACrC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,aAAa,GAAG,KAAK,CAAC;YAE9B,MAAM,YAAY,GAAI,SAAiB,CAAC,qBAAqB,CAAC,IAAI,EAAE,2BAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAEtG,2CAA2C;YAC3C,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,MAAM,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YACrC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,aAAa,GAAG,KAAK,CAAC;YAE9B,MAAM,YAAY,GAAI,SAAiB,CAAC,qBAAqB,CAAC,IAAI,EAAE,2BAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAEtG,2CAA2C;YAC3C,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YACrC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;YAE7B,MAAM,YAAY,GAAI,SAAiB,CAAC,qBAAqB,CAAC,IAAI,EAAE,2BAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAErG,4DAA4D;YAC5D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,IAAI,SAA8B,CAAC;QACnC,IAAI,UAAqC,CAAC;QAE1C,UAAU,CAAC,GAAG,EAAE;YACd,UAAU,GAAG;gBACX,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;gBACzB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;gBACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;aACnB,CAAC;YAEF,SAAS,GAAG,IAAI,yCAAmB,CAAC;gBAClC,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,EAAE;aACrB,EAAE,UAAU,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,MAAM,QAAQ,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACjE,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;gBAChC,KAAK,CAAC,UAAU;oBACd,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC7B,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrB,CAAC;aACF,CAAC,CAAC;YAEH,MAAO,SAAiB,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEjE,MAAM,MAAM,GAAI,SAAiB,CAAC,MAAM,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,QAAQ,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;gBAChC,KAAK,CAAC,UAAU;oBACd,iBAAiB;oBACjB,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC5C,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC5C,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrB,CAAC;aACF,CAAC,CAAC;YAEH,MAAO,SAAiB,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEjE,MAAM,MAAM,GAAI,SAAiB,CAAC,MAAM,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,QAAQ,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;gBAChC,KAAK,CAAC,UAAU;oBACd,kBAAkB;oBAClB,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC7B,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrB,CAAC;aACF,CAAC,CAAC;YAEH,MAAO,SAAiB,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEjE,MAAM,MAAM,GAAI,SAAiB,CAAC,MAAM,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAEhD,MAAM,aAAa,GAAG;gBACpB,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;oBAC3B,MAAM,MAAM,CAAC;oBACb,MAAM,MAAM,CAAC;gBACf,CAAC;aACF,CAAC;YAEF,MAAO,SAAiB,CAAC,cAAc,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;YAE3D,MAAM,MAAM,GAAI,SAAiB,CAAC,MAAM,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YAC/B,MAAM,QAAQ,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;gBAChC,KAAK,CAAC,UAAU;oBACd,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC7B,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrB,CAAC;aACF,CAAC,CAAC;YAEH,MAAM,MAAM,CAAE,SAAiB,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;QACzG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,MAAM,aAAa,GAAG;gBACpB,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;oBAC3B,MAAM,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAChC,mBAAmB;gBACrB,CAAC;aACF,CAAC;YAEF,MAAM,MAAM,CAAE,SAAiB,CAAC,cAAc,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAEhD,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;gBAChC,KAAK,CAAC,UAAU;oBACd,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC3B,UAAU,CAAC,GAAG,EAAE;wBACd,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBAC3B,UAAU,CAAC,KAAK,EAAE,CAAC;oBACrB,CAAC,EAAE,EAAE,CAAC,CAAC;gBACT,CAAC;aACF,CAAC,CAAC;YAEH,MAAO,SAAiB,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAEpD,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACjD,MAAM,YAAY,GAAI,UAAU,CAAC,UAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,IAAI,SAA8B,CAAC;QACnC,IAAI,OAAuB,CAAC;QAE5B,UAAU,CAAC,GAAG,EAAE;YACd,SAAS,GAAG,IAAI,yCAAmB,EAAE,CAAC;YACtC,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YAC/B,OAAO,CAAC,eAAe,GAAG;gBACxB,IAAI,+BAAe,CAAC,CAAC,EAAE,KAAK,CAAC;gBAC7B,IAAI,+BAAe,CAAC,CAAC,EAAE,KAAK,CAAC;aAC9B,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,4CAA4C;YAC5C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO;YACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,aAAa;YAC3C,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,aAAa;YAC3C,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,oBAAoB;YAClD,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ;YAE5B,SAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;YAEnC,MAAM,SAAS,GAAG,MAAO,SAAiB,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,2BAAW,CAAC,UAAU,CAAC,CAAC;YAE5F,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,2BAAW,CAAC,UAAU,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,4CAA4C;YAC5C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO;YACnC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM;YACvC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM;YACvC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ;YAE5B,SAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;YAEnC,MAAM,SAAS,GAAG,MAAO,SAAiB,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,2BAAW,CAAC,WAAW,CAAC,CAAC;YAE7F,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,2BAAW,CAAC,WAAW,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,4CAA4C;YAC5C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;YAClC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO;YACnC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM;YAC3C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM;YAC3C,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ;YAE7B,SAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;YAEnC,MAAM,SAAS,GAAG,MAAO,SAAiB,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,2BAAW,CAAC,WAAW,CAAC,CAAC;YAE7F,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7E,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,2BAAW,CAAC,WAAW,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;YAE7B,yDAAyD;YACzD,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;YAClC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO;YACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B;YAEjD,4BAA4B;YAC5B,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAEhC,SAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;YAEnC,MAAM,SAAS,GAAG,MAAO,SAAiB,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,2BAAW,CAAC,UAAU,CAAC,CAAC;YAE5F,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YAC/B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAE5E,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B;YAC9D,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,UAAU;YACtC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ;YAE5B,SAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;YAEnC,MAAO,SAAiB,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,2BAAW,CAAC,UAAU,CAAC,CAAC;YAE1E,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,0CAA0C,CAAC,CAAC;YAEpF,UAAU,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,IAAI,SAA8B,CAAC;QACnC,IAAI,OAAuB,CAAC;QAC5B,IAAI,UAAqC,CAAC;QAE1C,UAAU,CAAC,GAAG,EAAE;YACd,UAAU,GAAG;gBACX,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;aAC1B,CAAC;YAEF,SAAS,GAAG,IAAI,yCAAmB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YACpD,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YAC/B,OAAO,CAAC,eAAe,GAAG;gBACxB,IAAI,+BAAe,CAAC,CAAC,EAAE,KAAK,CAAC;gBAC7B,IAAI,+BAAe,CAAC,CAAC,EAAE,KAAK,CAAC;gBAC7B,IAAI,+BAAe,CAAC,CAAC,EAAE,KAAK,CAAC;aAC9B,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,SAAS,GAAkB;gBAC/B,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,IAAI,WAAW,CAAC;oBACvB,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK,CAAE,sBAAsB;iBAC9B,CAAC;gBACF,UAAU,EAAE,IAAI,cAAc,CAAC,CAAC,CAAC;gBACjC,IAAI,EAAE,2BAAW,CAAC,UAAU;aAC7B,CAAC;YAEF,MAAO,SAAiB,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAE/D,UAAU;YACV,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjF,UAAU;YACV,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjF,UAAU;YACV,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjF,UAAU;YACV,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,SAAS,GAAkB;gBAC/B,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;gBAC3B,UAAU,EAAE,IAAI,cAAc,CAAC,CAAC,CAAC;gBACjC,IAAI,EAAE,2BAAW,CAAC,UAAU;aAC7B,CAAC;YAEF,MAAO,SAAiB,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAE/D,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACxC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,IAAI,SAA8B,CAAC;QACnC,IAAI,OAAuB,CAAC;QAE5B,UAAU,CAAC,GAAG,EAAE;YACd,SAAS,GAAG,IAAI,yCAAmB,EAAE,CAAC;YACtC,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YAC/B,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,OAAO;YACpC,OAAO,CAAC,iBAAiB,GAAG,GAAG,CAAC;YAChC,OAAO,CAAC,kBAAkB,GAAG,GAAG,CAAC;YACjC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,SAAS,GAAkB;gBAC/B,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;gBAC9B,UAAU,EAAE,IAAI,cAAc,CAAC;oBAC7B,MAAM,CAAC,MAAM,CAAC;oBACd,MAAM,CAAC,MAAM,CAAC;oBACd,MAAM,CAAC,MAAM,CAAC;oBACd,MAAM,CAAC,MAAM,CAAC;iBACf,CAAC;gBACF,IAAI,EAAE,2BAAW,CAAC,UAAU;aAC7B,CAAC;YAEF,MAAO,SAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAE9D,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB;YAExD,UAAU;YACV,MAAM,UAAU,GAAG,OAAO,CAAC,MAAO,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,yCAAyC;YACvF,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAExC,UAAU;YACV,MAAM,WAAW,GAAG,OAAO,CAAC,MAAO,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,oBAAoB;YACpE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,yCAAyC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,SAAS,GAAkB;gBAC/B,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;gBAC9B,UAAU,EAAE,IAAI,cAAc,CAAC;oBAC7B,MAAM,CAAC,UAAU,CAAC;oBAClB,MAAM,CAAC,UAAU,CAAC;iBACnB,CAAC;gBACF,IAAI,EAAE,2BAAW,CAAC,UAAU;aAC7B,CAAC;YAEF,MAAO,SAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAE9D,+BAA+B;YAC/B,0BAA0B;YAC1B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,SAAS,GAAkB;gBAC/B,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;gBAC9B,UAAU,EAAE,IAAI,cAAc,CAAC,CAAC,CAAC;gBACjC,IAAI,EAAE,2BAAW,CAAC,UAAU;aAC7B,CAAC;YAEF,MAAO,SAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAE9D,iBAAiB;YACjB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAI,SAA8B,CAAC;QACnC,IAAI,UAAqC,CAAC;QAE1C,UAAU,CAAC,GAAG,EAAE;YACd,UAAU,GAAG;gBACX,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;aACtB,CAAC;YAEF,SAAS,GAAG,IAAI,yCAAmB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YACnD,SAAiB,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,QAAQ;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACpB,SAAiB,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAE7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAChD,MAAM,CAAC,gBAAgB,CAAC;gBACtB,SAAS,EAAE,GAAG;gBACd,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,EAAE;gBACZ,WAAW,EAAE,GAAG;gBAChB,YAAY,EAAE,GAAG;gBACjB,sBAAsB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC3C,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACvB,SAAiB,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,SAAS;YAExD,MAAM,YAAY,GAAI,UAAU,CAAC,UAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;YACnB,SAAiB,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAE7C,MAAM,YAAY,GAAI,UAAU,CAAC,UAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,IAAI,SAA8B,CAAC;QACnC,IAAI,OAAuB,CAAC;QAC5B,IAAI,UAAqC,CAAC;QAE1C,UAAU,CAAC,GAAG,EAAE;YACd,UAAU,GAAG;gBACX,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;gBACzB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;gBACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;aACnB,CAAC;YAEF,SAAS,GAAG,IAAI,yCAAmB,CAAC;gBAClC,cAAc,EAAE,IAAI;aACrB,EAAE,UAAU,CAAC,CAAC;YAEf,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;YAC/B,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC;YAC5B,OAAO,CAAC,iBAAiB,GAAG,GAAG,CAAC;YAChC,OAAO,CAAC,kBAAkB,GAAG,GAAG,CAAC;YACjC,OAAO,CAAC,eAAe,GAAG;gBACxB,IAAI,+BAAe,CAAC,CAAC,EAAE,KAAK,CAAC;gBAC7B,IAAI,+BAAe,CAAC,CAAC,EAAE,KAAK,CAAC;aAC9B,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YAC/B,YAAY;YACZ,MAAM,eAAe,GAAG,IAAI,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe;YACpD,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;YAEzC,SAAS;YACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;gBACxC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;aACrC;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ;YAEhC,MAAM,MAAM,GAAG,uCAAiB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAE5D,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,2BAAW,CAAC,UAAU,CAAC,CAAC;YAEzG,OAAO;YACP,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7B,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,qCAAe,CAAC,SAAS,CAAC,CAAC;YAE7D,SAAS;YACT,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YACzE,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YAEzE,UAAU;YACV,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,WAAW,GAAG,IAAI,cAAc,CAAC;gBACrC,KAAK,CAAC,UAAU;oBACd,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC9C,CAAC;aACF,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,2BAAW,CAAC,UAAU,CAAC,CAAC;iBACxF,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAEnC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,qCAAe,CAAC,KAAK,CAAC,CAAC;YACzD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YAC/B,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;YAE7B,cAAc;YACd,MAAM,eAAe,GAAG,IAAI,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,gCAAgC;YACrE,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;YAEzC,SAAS;YACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;gBACxC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;aAC7B;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ;YACjC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAEnC,MAAM,MAAM,GAAG,uCAAiB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAE5D,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,2BAAW,CAAC,UAAU,CAAC,CAAC;YAEzG,YAAY;YACZ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB;YACvD,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IAEvC,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACrB,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,MAAM,GAAG,uCAAiB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAEhE,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,MAAM,GAAG,uCAAiB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAChE,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAElC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAE5C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAElC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzB,MAAM,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;QACjB,MAAM,UAAU,GAAG;YACjB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;SACd,CAAC;QAEF,MAAM,MAAM,GAAG,uCAAiB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAEjE,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC9C,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;QACjB,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,MAAM,GAAG,uCAAiB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAE9D,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,OAAO,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,MAAM,QAAQ,GAAG,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,MAAM,QAAQ,GAAG;YACf,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;gBACrB,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;oBAC3B,MAAM,IAAI,CAAC;iBACZ;YACH,CAAC;SACF,CAAC;QAEF,MAAM,MAAM,GAAG,uCAAiB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC9D,MAAM,OAAO,GAAiB,EAAE,CAAC;QAEjC,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,MAAM,EAAE;YAChC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACrB;QAED,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,IAAI,YAAsB,CAAC;QAC3B,IAAI,WAAqB,CAAC;QAE1B,MAAM,UAAU,GAAG;YACjB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;gBACnD,IAAI,KAAK,KAAK,MAAM,EAAE;oBACpB,YAAY,GAAG,QAAQ,CAAC;iBACzB;qBAAM,IAAI,KAAK,KAAK,KAAK,EAAE;oBAC1B,WAAW,GAAG,QAAQ,CAAC;iBACxB;YACH,CAAC,CAAC;SACH,CAAC;QAEF,MAAM,MAAM,GAAG,uCAAiB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACjE,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAElC,SAAS;QACT,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7C,YAAa,CAAC,UAAU,CAAC,CAAC;QAE1B,OAAO;QACP,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,MAAM;QACN,WAAY,EAAE,CAAC;QAEf,QAAQ;QACR,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,IAAI,OAA0B,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,GAAG,IAAI,uCAAiB,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;QAEtC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QAClB,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC/B,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE9B,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,UAAU,GAAG,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,SAAS;IACnF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE;QACxB,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAE1B,mBAAmB;QACnB,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;YAEtC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,+BAA+B;YACjE,IAAI,EAAE,CAAC;QACT,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC;QAC7B,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,UAAU;QAExC,0BAA0B;QAC1B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAChD,OAAO,CAAC,KAAK,EAAE,CAAC;QAEhB,yBAAyB;QACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;QACvD,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAE1B,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;QAEtC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,wBAAwB;QACjE,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,yBAAyB;QACnE,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa;QAE/C,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QAClB,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAErB,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;QAEtC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,SAA8B,CAAC;IAEnC,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,IAAI,yCAAmB,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;QACxB,MAAM,WAAW,GAAG,IAAI,cAAc,CAAC;YACrC,KAAK,CAAC,UAAU;gBACd,UAAU,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;SACF,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;QACrC,OAAO,CAAC,eAAe,GAAG,EAAE,CAAC;QAE7B,MAAM,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,EAAE,GAAG,EAAE,2BAAW,CAAC,UAAU,CAAC,CAAC;aACvF,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnB,SAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;QAEnC,MAAM,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;QAErC,YAAY;QACZ,MAAM,MAAM,GAAG,MAAO,SAAiB,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,GAAkB,CAAC,CAAC;QAErF,YAAY;QACZ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACtB,MAAM,OAAO,GAAG,IAAI,8BAAc,EAAE,CAAC;QACrC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,WAAW;QACxC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;QAE7B,MAAM,YAAY,GAAI,SAAiB,CAAC,qBAAqB,CAAC,OAAO,EAAE,2BAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAEzG,oBAAoB;QACpB,MAAM,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACtB,IAAI,aAAuB,CAAC;QAC5B,MAAM,UAAU,GAAG;YACjB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;gBACnD,IAAI,KAAK,KAAK,OAAO,EAAE;oBACrB,aAAa,GAAG,QAAQ,CAAC;iBAC1B;YACH,CAAC,CAAC;SACH,CAAC;QAEF,MAAM,MAAM,GAAG,uCAAiB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACjE,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAElC,SAAS;QACT,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACvD,aAAc,CAAC,SAAS,CAAC,CAAC;QAE1B,UAAU;QACV,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE1E,MAAM,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/share/samba/vscode-extension/pico-logicanalyzer/utest/unit/models/DataStreamProcessor.test.ts"],"sourcesContent":["/**\r\n * DataStreamProcessor 模块单元测试套件\r\n * 全面测试实时数据流处理和缓冲系统的功能\r\n */\r\n\r\nimport {\r\n  DataStreamProcessor,\r\n  DataStreamFactory,\r\n  DataStreamMonitor,\r\n  DataStreamState,\r\n  DataStreamProgress,\r\n  DataStreamConfig,\r\n  RawDataPacket,\r\n  DataStreamEvents\r\n} from '../../../src/models/DataStreamProcessor';\r\nimport {\r\n  CaptureSession,\r\n  AnalyzerChannel,\r\n  BurstInfo\r\n} from '../../../src/models/CaptureModels';\r\nimport {\r\n  CaptureMode\r\n} from '../../../src/models/AnalyzerTypes';\r\n\r\ndescribe('DataStreamProcessor 模块测试套件', () => {\r\n  \r\n  describe('DataStreamState 枚举测试', () => {\r\n    \r\n    it('应该定义所有数据流状态', () => {\r\n      expect(DataStreamState.Idle).toBe('Idle');\r\n      expect(DataStreamState.WaitingForHeader).toBe('WaitingForHeader');\r\n      expect(DataStreamState.ReadingSamples).toBe('ReadingSamples');\r\n      expect(DataStreamState.ReadingTimestamps).toBe('ReadingTimestamps');\r\n      expect(DataStreamState.ProcessingData).toBe('ProcessingData');\r\n      expect(DataStreamState.Completed).toBe('Completed');\r\n      expect(DataStreamState.Error).toBe('Error');\r\n    });\r\n    \r\n    it('枚举值应该是字符串类型', () => {\r\n      Object.values(DataStreamState).forEach(state => {\r\n        expect(typeof state).toBe('string');\r\n      });\r\n    });\r\n  });\r\n  \r\n  describe('DataStreamProcessor 基础功能测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    let mockEvents: Partial<DataStreamEvents>;\r\n    \r\n    beforeEach(() => {\r\n      mockEvents = {\r\n        onProgress: jest.fn(),\r\n        onDataReceived: jest.fn(),\r\n        onCompleted: jest.fn(),\r\n        onError: jest.fn()\r\n      };\r\n      \r\n      processor = new DataStreamProcessor({\r\n        bufferSize: 1024,\r\n        readTimeout: 5000,\r\n        chunkSize: 256,\r\n        enableProgress: true,\r\n        progressInterval: 50\r\n      }, mockEvents);\r\n    });\r\n    \r\n    it('应该正确初始化默认配置', () => {\r\n      const defaultProcessor = new DataStreamProcessor();\r\n      const config = (defaultProcessor as any).config;\r\n      \r\n      expect(config.bufferSize).toBe(1024 * 1024);\r\n      expect(config.readTimeout).toBe(30000);\r\n      expect(config.chunkSize).toBe(64 * 1024);\r\n      expect(config.enableProgress).toBe(true);\r\n      expect(config.progressInterval).toBe(100);\r\n    });\r\n    \r\n    it('应该接受自定义配置', () => {\r\n      const config = (processor as any).config;\r\n      \r\n      expect(config.bufferSize).toBe(1024);\r\n      expect(config.readTimeout).toBe(5000);\r\n      expect(config.chunkSize).toBe(256);\r\n      expect(config.enableProgress).toBe(true);\r\n      expect(config.progressInterval).toBe(50);\r\n    });\r\n    \r\n    it('应该正确初始化状态', () => {\r\n      expect(processor.getState()).toBe(DataStreamState.Idle);\r\n    });\r\n    \r\n    it('应该正确更新配置', () => {\r\n      processor.updateConfig({\r\n        bufferSize: 2048,\r\n        enableProgress: false\r\n      });\r\n      \r\n      const config = (processor as any).config;\r\n      expect(config.bufferSize).toBe(2048);\r\n      expect(config.enableProgress).toBe(false);\r\n      expect(config.readTimeout).toBe(5000); // 保持不变\r\n    });\r\n    \r\n    it('应该正确更新事件处理器', () => {\r\n      const newEvents = {\r\n        onProgress: jest.fn(),\r\n        onError: jest.fn()\r\n      };\r\n      \r\n      processor.updateEvents(newEvents);\r\n      \r\n      const events = (processor as any).events;\r\n      expect(events.onProgress).toBe(newEvents.onProgress);\r\n      expect(events.onError).toBe(newEvents.onError);\r\n      expect(events.onCompleted).toBe(mockEvents.onCompleted); // 保持原有的\r\n    });\r\n    \r\n    it('应该正确重置状态', () => {\r\n      // 先设置一些状态\r\n      (processor as any).state = DataStreamState.ReadingSamples;\r\n      (processor as any).buffer = new Uint8Array(100);\r\n      (processor as any).bufferPosition = 50;\r\n      (processor as any).startTime = Date.now();\r\n      \r\n      processor.reset();\r\n      \r\n      expect(processor.getState()).toBe(DataStreamState.Idle);\r\n      expect((processor as any).buffer.length).toBe(0);\r\n      expect((processor as any).bufferPosition).toBe(0);\r\n      expect((processor as any).startTime).toBe(0);\r\n    });\r\n  });\r\n  \r\n  describe('缓冲区长度计算测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    \r\n    beforeEach(() => {\r\n      processor = new DataStreamProcessor();\r\n    });\r\n    \r\n    it('应该正确计算8通道模式的缓冲区长度', () => {\r\n      const session = new CaptureSession();\r\n      session.loopCount = 0;\r\n      session.measureBursts = false;\r\n      \r\n      const bufferLength = (processor as any).calculateBufferLength(1000, CaptureMode.Channels_8, session);\r\n      \r\n      // 1000样本 * 1字节 + 4字节长度 + 1字节时间戳长度 = 1005字节\r\n      expect(bufferLength).toBe(1005);\r\n    });\r\n    \r\n    it('应该正确计算16通道模式的缓冲区长度', () => {\r\n      const session = new CaptureSession();\r\n      session.loopCount = 0;\r\n      session.measureBursts = false;\r\n      \r\n      const bufferLength = (processor as any).calculateBufferLength(1000, CaptureMode.Channels_16, session);\r\n      \r\n      // 1000样本 * 2字节 + 4字节长度 + 1字节时间戳长度 = 2005字节\r\n      expect(bufferLength).toBe(2005);\r\n    });\r\n    \r\n    it('应该正确计算24通道模式的缓冲区长度', () => {\r\n      const session = new CaptureSession();\r\n      session.loopCount = 0;\r\n      session.measureBursts = false;\r\n      \r\n      const bufferLength = (processor as any).calculateBufferLength(1000, CaptureMode.Channels_24, session);\r\n      \r\n      // 1000样本 * 4字节 + 4字节长度 + 1字节时间戳长度 = 4005字节\r\n      expect(bufferLength).toBe(4005);\r\n    });\r\n    \r\n    it('应该正确计算带突发模式的缓冲区长度', () => {\r\n      const session = new CaptureSession();\r\n      session.loopCount = 3;\r\n      session.measureBursts = true;\r\n      \r\n      const bufferLength = (processor as any).calculateBufferLength(1000, CaptureMode.Channels_8, session);\r\n      \r\n      // 1000样本 * 1字节 + 4字节长度 + 1字节时间戳长度 + (3+2)*4字节时间戳数据 = 1025字节\r\n      expect(bufferLength).toBe(1025);\r\n    });\r\n  });\r\n  \r\n  describe('数据流读取测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    let mockEvents: Partial<DataStreamEvents>;\r\n    \r\n    beforeEach(() => {\r\n      mockEvents = {\r\n        onProgress: jest.fn(),\r\n        onDataReceived: jest.fn(),\r\n        onCompleted: jest.fn(),\r\n        onError: jest.fn()\r\n      };\r\n      \r\n      processor = new DataStreamProcessor({\r\n        enableProgress: true,\r\n        progressInterval: 10\r\n      }, mockEvents);\r\n    });\r\n    \r\n    it('应该正确从ReadableStream读取数据', async () => {\r\n      const testData = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n      const stream = new ReadableStream({\r\n        start(controller) {\r\n          controller.enqueue(testData);\r\n          controller.close();\r\n        }\r\n      });\r\n      \r\n      await (processor as any).readDataStream(stream, testData.length);\r\n      \r\n      const buffer = (processor as any).buffer;\r\n      expect(buffer.subarray(0, testData.length)).toEqual(testData);\r\n    });\r\n\r\n    it('应该正确处理ReadableStream的完全读取完成情况', async () => {\r\n      const testData = new Uint8Array([1, 2, 3, 4, 5]);\r\n      const stream = new ReadableStream({\r\n        start(controller) {\r\n          // 分两次发送数据，然后正常结束\r\n          controller.enqueue(testData.subarray(0, 3));\r\n          controller.enqueue(testData.subarray(3, 5));\r\n          controller.close();\r\n        }\r\n      });\r\n      \r\n      await (processor as any).readDataStream(stream, testData.length);\r\n      \r\n      const buffer = (processor as any).buffer;\r\n      expect(buffer.subarray(0, testData.length)).toEqual(testData);\r\n    });\r\n\r\n    it('应该正确处理ReadableStream恰好读取完所需数据后结束', async () => {\r\n      const testData = new Uint8Array([1, 2, 3, 4, 5]);\r\n      const stream = new ReadableStream({\r\n        start(controller) {\r\n          // 恰好发送所需的数据量，然后结束\r\n          controller.enqueue(testData);\r\n          controller.close();\r\n        }\r\n      });\r\n      \r\n      await (processor as any).readDataStream(stream, testData.length);\r\n      \r\n      const buffer = (processor as any).buffer;\r\n      expect(buffer.subarray(0, testData.length)).toEqual(testData);\r\n    });\r\n    \r\n    it('应该正确从AsyncIterable读取数据', async () => {\r\n      const chunk1 = new Uint8Array([1, 2, 3, 4, 5]);\r\n      const chunk2 = new Uint8Array([6, 7, 8, 9, 10]);\r\n      \r\n      const asyncIterable = {\r\n        async *[Symbol.asyncIterator]() {\r\n          yield chunk1;\r\n          yield chunk2;\r\n        }\r\n      };\r\n      \r\n      await (processor as any).readDataStream(asyncIterable, 10);\r\n      \r\n      const buffer = (processor as any).buffer;\r\n      expect(buffer.subarray(0, 10)).toEqual(new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\r\n    });\r\n    \r\n    it('应该在数据流提前结束时抛出错误', async () => {\r\n      const testData = new Uint8Array([1, 2, 3]);\r\n      const stream = new ReadableStream({\r\n        start(controller) {\r\n          controller.enqueue(testData);\r\n          controller.close();\r\n        }\r\n      });\r\n      \r\n      await expect((processor as any).readDataStream(stream, 10)).rejects.toThrow('Premature end of stream');\r\n    });\r\n    \r\n    it('应该在数据不完整时抛出错误', async () => {\r\n      const asyncIterable = {\r\n        async *[Symbol.asyncIterator]() {\r\n          yield new Uint8Array([1, 2, 3]);\r\n          // 数据流结束，但没有提供足够的数据\r\n        }\r\n      };\r\n      \r\n      await expect((processor as any).readDataStream(asyncIterable, 10)).rejects.toThrow('Incomplete data read');\r\n    });\r\n    \r\n    it('应该报告读取进度', async () => {\r\n      const chunk1 = new Uint8Array([1, 2, 3, 4, 5]);\r\n      const chunk2 = new Uint8Array([6, 7, 8, 9, 10]);\r\n      \r\n      const stream = new ReadableStream({\r\n        start(controller) {\r\n          controller.enqueue(chunk1);\r\n          setTimeout(() => {\r\n            controller.enqueue(chunk2);\r\n            controller.close();\r\n          }, 10);\r\n        }\r\n      });\r\n      \r\n      await (processor as any).readDataStream(stream, 10);\r\n      \r\n      expect(mockEvents.onProgress).toHaveBeenCalled();\r\n      const progressCall = (mockEvents.onProgress as jest.Mock).mock.calls[0][0];\r\n      expect(progressCall.bytesRead).toBeGreaterThan(0);\r\n      expect(progressCall.totalBytes).toBe(10);\r\n    });\r\n  });\r\n  \r\n  describe('原始数据解析测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    let session: CaptureSession;\r\n    \r\n    beforeEach(() => {\r\n      processor = new DataStreamProcessor();\r\n      session = new CaptureSession();\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n    });\r\n    \r\n    it('应该正确解析8通道模式数据', async () => {\r\n      // 构造测试数据：样本数量(4字节) + 样本数据(3字节) + 时间戳长度(1字节)\r\n      const buffer = new Uint8Array(8);\r\n      const view = new DataView(buffer.buffer);\r\n      \r\n      view.setUint32(0, 3, true); // 3个样本\r\n      view.setUint8(4, 0b00000001); // 样本1: CH0=1\r\n      view.setUint8(5, 0b00000010); // 样本2: CH1=1\r\n      view.setUint8(6, 0b00000011); // 样本3: CH0=1, CH1=1\r\n      view.setUint8(7, 0); // 时间戳长度\r\n      \r\n      (processor as any).buffer = buffer;\r\n      \r\n      const rawPacket = await (processor as any).parseRawData(session, 3, CaptureMode.Channels_8);\r\n      \r\n      expect(rawPacket.length).toBe(3);\r\n      expect(rawPacket.samples).toEqual(new Uint32Array([1, 2, 3]));\r\n      expect(rawPacket.timestamps.length).toBe(0);\r\n      expect(rawPacket.mode).toBe(CaptureMode.Channels_8);\r\n    });\r\n    \r\n    it('应该正确解析16通道模式数据', async () => {\r\n      // 构造测试数据：样本数量(4字节) + 样本数据(4字节) + 时间戳长度(1字节)\r\n      const buffer = new Uint8Array(9);\r\n      const view = new DataView(buffer.buffer);\r\n      \r\n      view.setUint32(0, 2, true); // 2个样本\r\n      view.setUint16(4, 0x0101, true); // 样本1\r\n      view.setUint16(6, 0x0202, true); // 样本2\r\n      view.setUint8(8, 0); // 时间戳长度\r\n      \r\n      (processor as any).buffer = buffer;\r\n      \r\n      const rawPacket = await (processor as any).parseRawData(session, 2, CaptureMode.Channels_16);\r\n      \r\n      expect(rawPacket.length).toBe(2);\r\n      expect(rawPacket.samples).toEqual(new Uint32Array([0x0101, 0x0202]));\r\n      expect(rawPacket.mode).toBe(CaptureMode.Channels_16);\r\n    });\r\n    \r\n    it('应该正确解析24通道模式数据', async () => {\r\n      // 构造测试数据：样本数量(4字节) + 样本数据(8字节) + 时间戳长度(1字节)\r\n      const buffer = new Uint8Array(13);\r\n      const view = new DataView(buffer.buffer);\r\n      \r\n      view.setUint32(0, 2, true); // 2个样本\r\n      view.setUint32(4, 0x01010101, true); // 样本1\r\n      view.setUint32(8, 0x02020202, true); // 样本2\r\n      view.setUint8(12, 0); // 时间戳长度\r\n      \r\n      (processor as any).buffer = buffer;\r\n      \r\n      const rawPacket = await (processor as any).parseRawData(session, 2, CaptureMode.Channels_24);\r\n      \r\n      expect(rawPacket.length).toBe(2);\r\n      expect(rawPacket.samples).toEqual(new Uint32Array([0x01010101, 0x02020202]));\r\n      expect(rawPacket.mode).toBe(CaptureMode.Channels_24);\r\n    });\r\n    \r\n    it('应该正确解析带时间戳的数据', async () => {\r\n      session.loopCount = 2;\r\n      session.measureBursts = true;\r\n      \r\n      // 构造测试数据：样本数量(4) + 样本数据(2) + 时间戳长度(1) + 时间戳数据(16) = 23字节\r\n      const buffer = new Uint8Array(23);\r\n      const view = new DataView(buffer.buffer);\r\n      \r\n      view.setUint32(0, 2, true); // 2个样本\r\n      view.setUint8(4, 0x01);\r\n      view.setUint8(5, 0x02);\r\n      view.setUint8(6, 16); // 时间戳长度：4个时间戳 * 4字节 = 16字节\r\n      \r\n      // 4个时间戳 (loopCount + 2 = 4)\r\n      view.setUint32(7, 0x1000, true);\r\n      view.setUint32(11, 0x2000, true);\r\n      view.setUint32(15, 0x3000, true);\r\n      view.setUint32(19, 0x4000, true);\r\n      \r\n      (processor as any).buffer = buffer;\r\n      \r\n      const rawPacket = await (processor as any).parseRawData(session, 2, CaptureMode.Channels_8);\r\n      \r\n      expect(rawPacket.timestamps.length).toBe(4);\r\n      expect(rawPacket.timestamps[0]).toBe(BigInt(0x1000));\r\n      expect(rawPacket.timestamps[1]).toBe(BigInt(0x2000));\r\n      expect(rawPacket.timestamps[2]).toBe(BigInt(0x3000));\r\n      expect(rawPacket.timestamps[3]).toBe(BigInt(0x4000));\r\n    });\r\n    \r\n    it('应该在样本数量不匹配时发出警告', async () => {\r\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\r\n      \r\n      const buffer = new Uint8Array(10); // 4字节长度 + 5字节样本 + 1字节时间戳长度\r\n      const view = new DataView(buffer.buffer);\r\n      \r\n      view.setUint32(0, 5, true); // 声明有5个样本\r\n      view.setUint8(4, 0x01);\r\n      view.setUint8(5, 0x02);\r\n      view.setUint8(6, 0x03);\r\n      view.setUint8(7, 0x04);\r\n      view.setUint8(8, 0x05);\r\n      view.setUint8(9, 0); // 时间戳长度\r\n      \r\n      (processor as any).buffer = buffer;\r\n      \r\n      await (processor as any).parseRawData(session, 2, CaptureMode.Channels_8);\r\n      \r\n      expect(consoleSpy).toHaveBeenCalledWith('Sample count mismatch. Expected 2, got 5');\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n  \r\n  describe('样本数据处理测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    let session: CaptureSession;\r\n    let mockEvents: Partial<DataStreamEvents>;\r\n    \r\n    beforeEach(() => {\r\n      mockEvents = {\r\n        onDataReceived: jest.fn()\r\n      };\r\n      \r\n      processor = new DataStreamProcessor({}, mockEvents);\r\n      session = new CaptureSession();\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1'),\r\n        new AnalyzerChannel(2, 'CH2')\r\n      ];\r\n    });\r\n    \r\n    it('应该正确提取通道样本', async () => {\r\n      const rawPacket: RawDataPacket = {\r\n        length: 4,\r\n        samples: new Uint32Array([\r\n          0b001, // CH0=1\r\n          0b010, // CH1=1\r\n          0b100, // CH2=1\r\n          0b111  // CH0=1, CH1=1, CH2=1\r\n        ]),\r\n        timestamps: new BigUint64Array(0),\r\n        mode: CaptureMode.Channels_8\r\n      };\r\n      \r\n      await (processor as any).processSampleData(session, rawPacket);\r\n      \r\n      // 验证CH0样本\r\n      expect(session.captureChannels[0].samples).toEqual(new Uint8Array([1, 0, 0, 1]));\r\n      \r\n      // 验证CH1样本\r\n      expect(session.captureChannels[1].samples).toEqual(new Uint8Array([0, 1, 0, 1]));\r\n      \r\n      // 验证CH2样本\r\n      expect(session.captureChannels[2].samples).toEqual(new Uint8Array([0, 0, 1, 1]));\r\n      \r\n      // 验证事件被触发\r\n      expect(mockEvents.onDataReceived).toHaveBeenCalledWith(rawPacket);\r\n    });\r\n    \r\n    it('应该正确处理空样本数据', async () => {\r\n      const rawPacket: RawDataPacket = {\r\n        length: 0,\r\n        samples: new Uint32Array(0),\r\n        timestamps: new BigUint64Array(0),\r\n        mode: CaptureMode.Channels_8\r\n      };\r\n      \r\n      await (processor as any).processSampleData(session, rawPacket);\r\n      \r\n      session.captureChannels.forEach(channel => {\r\n        expect(channel.samples).toEqual(new Uint8Array(0));\r\n      });\r\n    });\r\n  });\r\n  \r\n  describe('突发数据处理测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    let session: CaptureSession;\r\n    \r\n    beforeEach(() => {\r\n      processor = new DataStreamProcessor();\r\n      session = new CaptureSession();\r\n      session.frequency = 1000000; // 1MHz\r\n      session.preTriggerSamples = 100;\r\n      session.postTriggerSamples = 900;\r\n      session.loopCount = 2;\r\n      session.measureBursts = true;\r\n    });\r\n    \r\n    it('应该正确处理突发数据', async () => {\r\n      const rawPacket: RawDataPacket = {\r\n        length: 3000,\r\n        samples: new Uint32Array(3000),\r\n        timestamps: new BigUint64Array([\r\n          BigInt(0x1000),\r\n          BigInt(0x2000),\r\n          BigInt(0x3000),\r\n          BigInt(0x4000)\r\n        ]),\r\n        mode: CaptureMode.Channels_8\r\n      };\r\n      \r\n      await (processor as any).processBurstData(session, rawPacket);\r\n      \r\n      expect(session.bursts).toHaveLength(3); // loopCount + 1\r\n      \r\n      // 验证第一个突发\r\n      const firstBurst = session.bursts![0];\r\n      expect(firstBurst.burstSampleStart).toBe(0);\r\n      expect(firstBurst.burstSampleEnd).toBe(1000); // preTriggerSamples + postTriggerSamples\r\n      expect(firstBurst.burstSampleGap).toBe(0);\r\n      expect(firstBurst.burstTimeGap).toBe(0);\r\n      \r\n      // 验证第二个突发\r\n      const secondBurst = session.bursts![1];\r\n      expect(secondBurst.burstSampleStart).toBe(100); // preTriggerSamples\r\n      expect(secondBurst.burstSampleEnd).toBe(1000); // preTriggerSamples + postTriggerSamples\r\n    });\r\n    \r\n    it('应该正确调整时间戳', async () => {\r\n      const rawPacket: RawDataPacket = {\r\n        length: 1000,\r\n        samples: new Uint32Array(1000),\r\n        timestamps: new BigUint64Array([\r\n          BigInt(0xFF123456), // 需要调整低24位\r\n          BigInt(0xFE654321)\r\n        ]),\r\n        mode: CaptureMode.Channels_8\r\n      };\r\n      \r\n      await (processor as any).processBurstData(session, rawPacket);\r\n      \r\n      // 时间戳调整逻辑已在processBurstData中实现\r\n      // 这里主要验证不会抛出错误且生成了正确数量的突发\r\n      expect(session.bursts).toHaveLength(3);\r\n    });\r\n    \r\n    it('应该处理空时间戳数据', async () => {\r\n      const rawPacket: RawDataPacket = {\r\n        length: 1000,\r\n        samples: new Uint32Array(1000),\r\n        timestamps: new BigUint64Array(0), // 空时间戳\r\n        mode: CaptureMode.Channels_8\r\n      };\r\n      \r\n      await (processor as any).processBurstData(session, rawPacket);\r\n      \r\n      // 应该直接返回，不处理突发数据\r\n      expect(session.bursts).toBeUndefined();\r\n    });\r\n  });\r\n  \r\n  describe('进度报告测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    let mockEvents: Partial<DataStreamEvents>;\r\n    \r\n    beforeEach(() => {\r\n      mockEvents = {\r\n        onProgress: jest.fn()\r\n      };\r\n      \r\n      processor = new DataStreamProcessor({}, mockEvents);\r\n      (processor as any).startTime = Date.now() - 1000; // 1秒前开始\r\n    });\r\n    \r\n    it('应该正确计算和报告进度', () => {\r\n      (processor as any).reportProgress(500, 1000);\r\n      \r\n      expect(mockEvents.onProgress).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          bytesRead: 500,\r\n          totalBytes: 1000,\r\n          progress: 50,\r\n          samplesRead: 125, // 500 / 4\r\n          totalSamples: 250, // 1000 / 4\r\n          estimatedTimeRemaining: expect.any(Number)\r\n        })\r\n      );\r\n    });\r\n    \r\n    it('应该将进度限制在100%以内', () => {\r\n      (processor as any).reportProgress(1500, 1000); // 超过总字节数\r\n      \r\n      const progressCall = (mockEvents.onProgress as jest.Mock).mock.calls[0][0];\r\n      expect(progressCall.progress).toBe(100);\r\n    });\r\n    \r\n    it('应该正确计算剩余时间', () => {\r\n      (processor as any).reportProgress(250, 1000);\r\n      \r\n      const progressCall = (mockEvents.onProgress as jest.Mock).mock.calls[0][0];\r\n      expect(progressCall.estimatedTimeRemaining).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n  \r\n  describe('完整数据流处理测试', () => {\r\n    let processor: DataStreamProcessor;\r\n    let session: CaptureSession;\r\n    let mockEvents: Partial<DataStreamEvents>;\r\n    \r\n    beforeEach(() => {\r\n      mockEvents = {\r\n        onProgress: jest.fn(),\r\n        onDataReceived: jest.fn(),\r\n        onCompleted: jest.fn(),\r\n        onError: jest.fn()\r\n      };\r\n      \r\n      processor = new DataStreamProcessor({\r\n        enableProgress: true\r\n      }, mockEvents);\r\n      \r\n      session = new CaptureSession();\r\n      session.frequency = 1000000;\r\n      session.preTriggerSamples = 100;\r\n      session.postTriggerSamples = 900;\r\n      session.captureChannels = [\r\n        new AnalyzerChannel(0, 'CH0'),\r\n        new AnalyzerChannel(1, 'CH1')\r\n      ];\r\n    });\r\n    \r\n    it('应该完成完整的数据流处理工作流', async () => {\r\n      // 构造完整的测试数据\r\n      const expectedSamples = 1000;\r\n      const buffer = new Uint8Array(1005); // 4 + 1000 + 1\r\n      const view = new DataView(buffer.buffer);\r\n      \r\n      view.setUint32(0, expectedSamples, true);\r\n      \r\n      // 填充样本数据\r\n      for (let i = 0; i < expectedSamples; i++) {\r\n        view.setUint8(4 + i, i % 4); // 循环模式\r\n      }\r\n      \r\n      view.setUint8(1004, 0); // 时间戳长度\r\n      \r\n      const stream = DataStreamFactory.createBufferStream(buffer);\r\n      \r\n      const result = await processor.readCaptureData(stream, session, expectedSamples, CaptureMode.Channels_8);\r\n      \r\n      // 验证结果\r\n      expect(result).toBe(session);\r\n      expect(processor.getState()).toBe(DataStreamState.Completed);\r\n      \r\n      // 验证通道数据\r\n      expect(session.captureChannels[0].samples).toHaveLength(expectedSamples);\r\n      expect(session.captureChannels[1].samples).toHaveLength(expectedSamples);\r\n      \r\n      // 验证事件被调用\r\n      expect(mockEvents.onCompleted).toHaveBeenCalledWith(session);\r\n      expect(mockEvents.onDataReceived).toHaveBeenCalled();\r\n    });\r\n    \r\n    it('应该处理数据流错误', async () => {\r\n      const errorStream = new ReadableStream({\r\n        start(controller) {\r\n          controller.error(new Error('Stream error'));\r\n        }\r\n      });\r\n      \r\n      await expect(processor.readCaptureData(errorStream, session, 1000, CaptureMode.Channels_8))\r\n        .rejects.toThrow('Stream error');\r\n      \r\n      expect(processor.getState()).toBe(DataStreamState.Error);\r\n      expect(mockEvents.onError).toHaveBeenCalled();\r\n    });\r\n    \r\n    it('应该处理带突发模式的完整工作流', async () => {\r\n      session.loopCount = 1;\r\n      session.measureBursts = true;\r\n      \r\n      // 构造带时间戳的测试数据\r\n      const expectedSamples = 1000;\r\n      const buffer = new Uint8Array(1017); // 4 + 1000 + 1 + 12 (3个时间戳*4字节)\r\n      const view = new DataView(buffer.buffer);\r\n      \r\n      view.setUint32(0, expectedSamples, true);\r\n      \r\n      // 填充样本数据\r\n      for (let i = 0; i < expectedSamples; i++) {\r\n        view.setUint8(4 + i, i % 2);\r\n      }\r\n      \r\n      view.setUint8(1004, 12); // 时间戳长度\r\n      view.setUint32(1005, 0x1000, true);\r\n      view.setUint32(1009, 0x2000, true);\r\n      view.setUint32(1013, 0x3000, true);\r\n      \r\n      const stream = DataStreamFactory.createBufferStream(buffer);\r\n      \r\n      const result = await processor.readCaptureData(stream, session, expectedSamples, CaptureMode.Channels_8);\r\n      \r\n      // 验证突发数据被处理\r\n      expect(result.bursts).toHaveLength(2); // loopCount + 1\r\n      expect(mockEvents.onCompleted).toHaveBeenCalledWith(session);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('DataStreamFactory 工厂类测试', () => {\r\n  \r\n  it('应该创建Buffer流', () => {\r\n    const testBuffer = new Uint8Array([1, 2, 3, 4, 5]);\r\n    const stream = DataStreamFactory.createBufferStream(testBuffer);\r\n    \r\n    expect(stream).toBeInstanceOf(ReadableStream);\r\n  });\r\n  \r\n  it('Buffer流应该正确提供数据', async () => {\r\n    const testBuffer = new Uint8Array([1, 2, 3, 4, 5]);\r\n    const stream = DataStreamFactory.createBufferStream(testBuffer);\r\n    const reader = stream.getReader();\r\n    \r\n    const { done, value } = await reader.read();\r\n    \r\n    expect(done).toBe(false);\r\n    expect(value).toEqual(testBuffer);\r\n    \r\n    const { done: done2 } = await reader.read();\r\n    expect(done2).toBe(true);\r\n    \r\n    reader.releaseLock();\r\n  });\r\n  \r\n  it('应该创建网络流', () => {\r\n    const mockSocket = {\r\n      on: jest.fn()\r\n    };\r\n    \r\n    const stream = DataStreamFactory.createNetworkStream(mockSocket);\r\n    \r\n    expect(stream).toBeInstanceOf(ReadableStream);\r\n    expect(mockSocket.on).toHaveBeenCalledWith('data', expect.any(Function));\r\n    expect(mockSocket.on).toHaveBeenCalledWith('end', expect.any(Function));\r\n    expect(mockSocket.on).toHaveBeenCalledWith('error', expect.any(Function));\r\n  });\r\n  \r\n  it('应该创建串口流', () => {\r\n    const mockPort = {};\r\n    const stream = DataStreamFactory.createSerialStream(mockPort);\r\n    \r\n    expect(stream).toBeDefined();\r\n    expect(typeof stream[Symbol.asyncIterator]).toBe('function');\r\n  });\r\n\r\n  it('串口流应该正确处理数据', async () => {\r\n    const testData = [new Uint8Array([1, 2, 3]), new Uint8Array([4, 5, 6])];\r\n    const mockPort = {\r\n      *[Symbol.asyncIterator]() {\r\n        for (const data of testData) {\r\n          yield data;\r\n        }\r\n      }\r\n    };\r\n    \r\n    const stream = DataStreamFactory.createSerialStream(mockPort);\r\n    const results: Uint8Array[] = [];\r\n    \r\n    for await (const chunk of stream) {\r\n      results.push(chunk);\r\n    }\r\n    \r\n    expect(results).toHaveLength(2);\r\n    expect(results[0]).toEqual(testData[0]);\r\n    expect(results[1]).toEqual(testData[1]);\r\n  });\r\n\r\n  it('网络流应该正确处理数据和结束事件', async () => {\r\n    let dataCallback: Function;\r\n    let endCallback: Function;\r\n    \r\n    const mockSocket = {\r\n      on: jest.fn().mockImplementation((event, callback) => {\r\n        if (event === 'data') {\r\n          dataCallback = callback;\r\n        } else if (event === 'end') {\r\n          endCallback = callback;\r\n        }\r\n      })\r\n    };\r\n    \r\n    const stream = DataStreamFactory.createNetworkStream(mockSocket);\r\n    const reader = stream.getReader();\r\n    \r\n    // 模拟接收数据\r\n    const testBuffer = Buffer.from([1, 2, 3, 4]);\r\n    dataCallback!(testBuffer);\r\n    \r\n    // 验证数据\r\n    const { done, value } = await reader.read();\r\n    expect(done).toBe(false);\r\n    expect(value).toEqual(new Uint8Array([1, 2, 3, 4]));\r\n    \r\n    // 结束流\r\n    endCallback!();\r\n    \r\n    // 验证流结束\r\n    const { done: done2 } = await reader.read();\r\n    expect(done2).toBe(true);\r\n    reader.releaseLock();\r\n  });\r\n});\r\n\r\ndescribe('DataStreamMonitor 监控器测试', () => {\r\n  let monitor: DataStreamMonitor;\r\n  \r\n  beforeEach(() => {\r\n    monitor = new DataStreamMonitor();\r\n  });\r\n  \r\n  it('应该正确初始化监控器', () => {\r\n    const stats = monitor.getStatistics();\r\n    \r\n    expect(stats.elapsedTime).toBe(0);\r\n    expect(stats.bytesPerSecond).toBe(0);\r\n    expect(stats.samplesPerSecond).toBe(0);\r\n    expect(stats.efficiency).toBe(0);\r\n  });\r\n  \r\n  it('应该正确启动监控', () => {\r\n    const beforeStart = Date.now();\r\n    monitor.start();\r\n    const afterStart = Date.now();\r\n    \r\n    const stats = monitor.getStatistics();\r\n    expect(stats.elapsedTime).toBeGreaterThanOrEqual(0);\r\n    expect(stats.elapsedTime).toBeLessThan(afterStart - beforeStart + 100); // 允许一些误差\r\n  });\r\n  \r\n  it('应该正确更新监控数据', (done) => {\r\n    monitor.start();\r\n    monitor.update(1000, 250);\r\n    \r\n    // 等待一小段时间以获得有意义的统计\r\n    setTimeout(() => {\r\n      const stats = monitor.getStatistics();\r\n      \r\n      expect(stats.elapsedTime).toBeGreaterThan(0);\r\n      expect(stats.bytesPerSecond).toBeGreaterThan(0);\r\n      expect(stats.samplesPerSecond).toBeGreaterThan(0);\r\n      expect(stats.efficiency).toBe(4); // 1000 bytes / 250 samples = 4\r\n      done();\r\n    }, 10);\r\n  });\r\n  \r\n  it('应该正确计算性能统计', () => {\r\n    const originalNow = Date.now;\r\n    const startTime = 1000000000; // 固定的开始时间\r\n    \r\n    // Mock Date.now 返回固定的开始时间\r\n    Date.now = jest.fn().mockReturnValue(startTime);\r\n    monitor.start();\r\n    \r\n    // Mock Date.now 返回1秒后的时间\r\n    Date.now = jest.fn().mockReturnValue(startTime + 1000);\r\n    monitor.update(2000, 500);\r\n    \r\n    const stats = monitor.getStatistics();\r\n    \r\n    expect(stats.elapsedTime).toBe(1000);\r\n    expect(stats.bytesPerSecond).toBe(2000); // 2000 bytes / 1 second\r\n    expect(stats.samplesPerSecond).toBe(500); // 500 samples / 1 second\r\n    expect(stats.efficiency).toBe(4); // 2000 / 500\r\n    \r\n    Date.now = originalNow;\r\n  });\r\n  \r\n  it('应该处理零除情况', () => {\r\n    monitor.start();\r\n    monitor.update(0, 0);\r\n    \r\n    const stats = monitor.getStatistics();\r\n    \r\n    expect(stats.bytesPerSecond).toBe(0);\r\n    expect(stats.samplesPerSecond).toBe(0);\r\n    expect(stats.efficiency).toBe(0);\r\n  });\r\n});\r\n\r\ndescribe('边界条件和错误处理测试', () => {\r\n  let processor: DataStreamProcessor;\r\n  \r\n  beforeEach(() => {\r\n    processor = new DataStreamProcessor();\r\n  });\r\n  \r\n  it('应该处理空数据流', async () => {\r\n    const emptyStream = new ReadableStream({\r\n      start(controller) {\r\n        controller.close();\r\n      }\r\n    });\r\n    \r\n    const session = new CaptureSession();\r\n    session.captureChannels = [];\r\n    \r\n    await expect(processor.readCaptureData(emptyStream, session, 100, CaptureMode.Channels_8))\r\n      .rejects.toThrow('Premature end of stream');\r\n  });\r\n  \r\n  it('应该处理无效的采集模式', async () => {\r\n    const buffer = new Uint8Array(9);\r\n    const view = new DataView(buffer.buffer);\r\n    view.setUint32(0, 1, true);\r\n    view.setUint8(4, 0x01);\r\n    view.setUint8(5, 0);\r\n    \r\n    (processor as any).buffer = buffer;\r\n    \r\n    const session = new CaptureSession();\r\n    \r\n    // 使用无效的采集模式\r\n    const result = await (processor as any).parseRawData(session, 1, 999 as CaptureMode);\r\n    \r\n    // 应该能处理而不崩溃\r\n    expect(result.length).toBe(1);\r\n    expect(result.samples).toBeDefined();\r\n  });\r\n  \r\n  it('应该处理超大的缓冲区长度', () => {\r\n    const session = new CaptureSession();\r\n    session.loopCount = 1000000; // 非常大的循环计数\r\n    session.measureBursts = true;\r\n    \r\n    const bufferLength = (processor as any).calculateBufferLength(1000000, CaptureMode.Channels_24, session);\r\n    \r\n    // 应该计算出合理的缓冲区长度而不崩溃\r\n    expect(bufferLength).toBeGreaterThan(0);\r\n    expect(typeof bufferLength).toBe('number');\r\n  });\r\n  \r\n  it('应该处理网络流的错误事件', () => {\r\n    let errorCallback: Function;\r\n    const mockSocket = {\r\n      on: jest.fn().mockImplementation((event, callback) => {\r\n        if (event === 'error') {\r\n          errorCallback = callback;\r\n        }\r\n      })\r\n    };\r\n    \r\n    const stream = DataStreamFactory.createNetworkStream(mockSocket);\r\n    const reader = stream.getReader();\r\n    \r\n    // 模拟网络错误\r\n    const testError = new Error('Network connection lost');\r\n    errorCallback!(testError);\r\n    \r\n    // 验证流错误处理\r\n    expect(mockSocket.on).toHaveBeenCalledWith('error', expect.any(Function));\r\n    \r\n    reader.releaseLock();\r\n  });\r\n});"],"version":3}