{
  "timestamp": "2025-08-13T03:23:03.613Z",
  "layer": {
    "name": "full",
    "description": "完整测试层 - 30分钟内完成所有测试，包括长期压力测试",
    "executionTime": 2.0612333333333335,
    "maxDuration": 30
  },
  "environment": {
    "nodeVersion": "v22.17.1",
    "platform": "linux"
  },
  "testResults": [
    {
      "success": true,
      "testFile": "utest/unit/drivers/LogicAnalyzerDriver.core.test.ts"
    },
    {
      "success": true,
      "testFile": "utest/unit/models/LACFileFormat.test.ts"
    },
    {
      "success": true,
      "testFile": "tests/integration/core-flows/hardware-capture.integration.test.ts"
    },
    {
      "success": true,
      "testFile": "tests/performance/benchmarks/LogicAnalyzerDriver.perf.test.ts"
    },
    {
      "success": false,
      "testFile": "tests/performance/benchmarks/LACFileFormat.perf.test.ts",
      "error": "Command failed: npx jest \"tests/performance/benchmarks/LACFileFormat.perf.test.ts\" --verbose --ci --json --coverage=false --forceExit\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new SmallFileReadPerformanceTest (tests/performance/benchmarks/LACFileFormat.perf.test.ts:67:5)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:333:26)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new LargeFileWritePerformanceTest (tests/performance/benchmarks/LACFileFormat.perf.test.ts:119:5)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:334:27)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new ConcurrentFileOperationsTest (tests/performance/benchmarks/LACFileFormat.perf.test.ts:182:5)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:335:32)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new MemoryOptimizationTest (tests/performance/benchmarks/LACFileFormat.perf.test.ts:260:5)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:336:30)\n\n  console.log\n    🚀 开始运行 4 个性能测试...\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:279:13)\n\n  console.log\n    \n    🔧 执行测试: small-file-read\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:289:15)\n\n  console.log\n    🔥 开始性能测试: LACFileFormat-小文件读取性能\n\n      at SmallFileReadPerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:208:15)\n\n  console.log\n       配置: 15次测量, 3次预热\n\n      at SmallFileReadPerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:209:15)\n\n  console.warn\n    ⚠️ 预热运行 1 失败: JestAssertionError: expect(received).toBe(expected) // Object.is equality\n    \n    Expected: true\n    Received: false\n        at SmallFileReadPerformanceTest.performOperation (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:94:26)\n        at SmallFileReadPerformanceTest.performWarmup (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:110:9)\n        at SmallFileReadPerformanceTest.runTest (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:212:7)\n        at BenchmarkRunner.runAllTests (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/BenchmarkRunner.ts:290:22)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20) {\n      matcherResult: {\n        actual: false,\n        expected: true,\n        message: 'expect(received).toBe(expected) // Object.is equality\\n' +\n          '\\n' +\n          'Expected: true\\n' +\n          'Received: false',\n        name: 'toBe',\n        pass: false\n      }\n    }\n\n      111 |       } catch (error) {\n      112 |         // 预热期间忽略错误，但记录警告\n    > 113 |         console.warn(`⚠️ 预热运行 ${i + 1} 失败:`, error);\n          |                 ^\n      114 |       }\n      115 |     }\n      116 |     \n\n      at SmallFileReadPerformanceTest.performWarmup (tests/performance/framework/PerformanceTestBase.ts:113:17)\n      at SmallFileReadPerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:212:7)\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:290:22)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20)\n\n  console.warn\n    ⚠️ 预热运行 2 失败: JestAssertionError: expect(received).toBe(expected) // Object.is equality\n    \n    Expected: true\n    Received: false\n        at SmallFileReadPerformanceTest.performOperation (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:94:26)\n        at SmallFileReadPerformanceTest.performWarmup (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:110:9)\n        at SmallFileReadPerformanceTest.runTest (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:212:7)\n        at BenchmarkRunner.runAllTests (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/BenchmarkRunner.ts:290:22)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20) {\n      matcherResult: {\n        actual: false,\n        expected: true,\n        message: 'expect(received).toBe(expected) // Object.is equality\\n' +\n          '\\n' +\n          'Expected: true\\n' +\n          'Received: false',\n        name: 'toBe',\n        pass: false\n      }\n    }\n\n      111 |       } catch (error) {\n      112 |         // 预热期间忽略错误，但记录警告\n    > 113 |         console.warn(`⚠️ 预热运行 ${i + 1} 失败:`, error);\n          |                 ^\n      114 |       }\n      115 |     }\n      116 |     \n\n      at SmallFileReadPerformanceTest.performWarmup (tests/performance/framework/PerformanceTestBase.ts:113:17)\n      at SmallFileReadPerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:212:7)\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:290:22)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20)\n\n  console.warn\n    ⚠️ 预热运行 3 失败: JestAssertionError: expect(received).toBe(expected) // Object.is equality\n    \n    Expected: true\n    Received: false\n        at SmallFileReadPerformanceTest.performOperation (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:94:26)\n        at SmallFileReadPerformanceTest.performWarmup (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:110:9)\n        at SmallFileReadPerformanceTest.runTest (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:212:7)\n        at BenchmarkRunner.runAllTests (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/BenchmarkRunner.ts:290:22)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20) {\n      matcherResult: {\n        actual: false,\n        expected: true,\n        message: 'expect(received).toBe(expected) // Object.is equality\\n' +\n          '\\n' +\n          'Expected: true\\n' +\n          'Received: false',\n        name: 'toBe',\n        pass: false\n      }\n    }\n\n      111 |       } catch (error) {\n      112 |         // 预热期间忽略错误，但记录警告\n    > 113 |         console.warn(`⚠️ 预热运行 ${i + 1} 失败:`, error);\n          |                 ^\n      114 |       }\n      115 |     }\n      116 |     \n\n      at SmallFileReadPerformanceTest.performWarmup (tests/performance/framework/PerformanceTestBase.ts:113:17)\n      at SmallFileReadPerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:212:7)\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:290:22)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20)\n\n  console.log\n       ✅ 预热完成\n\n      at SmallFileReadPerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:213:15)\n\n  console.log\n       ❌ 性能测试失败: 没有成功的测量结果\n\n      at SmallFileReadPerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:253:15)\n\n  console.log\n    \n    🔧 执行测试: large-file-write\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:289:15)\n\n  console.log\n    🔥 开始性能测试: LACFileFormat-大文件写入性能\n\n      at LargeFileWritePerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:208:15)\n\n  console.log\n       配置: 5次测量, 1次预热\n\n      at LargeFileWritePerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:209:15)\n\n  console.warn\n    ⚠️ 预热运行 1 失败: TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n        at Object.stat (node:fs:1663:16)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/node_modules/graceful-fs/polyfills.js:309:16)\n        at /home/share/samba/vscode-extension/pico-logicanalyzer/node_modules/universalify/index.js:9:12\n        at new Promise (<anonymous>)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/node_modules/universalify/index.js:7:14)\n        at LargeFileWritePerformanceTest.performOperation (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:153:28)\n        at LargeFileWritePerformanceTest.performWarmup (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:110:9)\n        at LargeFileWritePerformanceTest.runTest (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:212:7)\n        at BenchmarkRunner.runAllTests (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/BenchmarkRunner.ts:290:22)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20) {\n      code: 'ERR_INVALID_ARG_TYPE'\n    }\n\n      111 |       } catch (error) {\n      112 |         // 预热期间忽略错误，但记录警告\n    > 113 |         console.warn(`⚠️ 预热运行 ${i + 1} 失败:`, error);\n          |                 ^\n      114 |       }\n      115 |     }\n      116 |     \n\n      at LargeFileWritePerformanceTest.performWarmup (tests/performance/framework/PerformanceTestBase.ts:113:17)\n      at LargeFileWritePerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:212:7)\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:290:22)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20)\n\n  console.log\n       ✅ 预热完成\n\n      at LargeFileWritePerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:213:15)\n\n  console.log\n       ❌ 性能测试失败: 没有成功的测量结果\n\n      at LargeFileWritePerformanceTest.runTest (tests/performance/framework/PerformanceTestBase.ts:253:15)\n\n  console.log\n    \n    🔧 执行测试: concurrent-operations\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:289:15)\n\n  console.log\n    🔥 开始性能测试: LACFileFormat-并发文件操作\n\n      at ConcurrentFileOperationsTest.runTest (tests/performance/framework/PerformanceTestBase.ts:208:15)\n\n  console.log\n       配置: 8次测量, 2次预热\n\n      at ConcurrentFileOperationsTest.runTest (tests/performance/framework/PerformanceTestBase.ts:209:15)\n\n  console.warn\n    ⚠️ 预热运行 1 失败: TypeError: The \"path\" argument must be of type string. Received undefined\n        at Object.join (node:path:1304:7)\n        at /home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:206:29\n        at Function.from (<anonymous>)\n        at ConcurrentFileOperationsTest.performOperation (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:204:33)\n        at ConcurrentFileOperationsTest.performWarmup (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:110:20)\n        at ConcurrentFileOperationsTest.runTest (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:212:18)\n        at BenchmarkRunner.runAllTests (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/BenchmarkRunner.ts:290:33)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20) {\n      code: 'ERR_INVALID_ARG_TYPE'\n    }\n\n      111 |       } catch (error) {\n      112 |         // 预热期间忽略错误，但记录警告\n    > 113 |         console.warn(`⚠️ 预热运行 ${i + 1} 失败:`, error);\n          |                 ^\n      114 |       }\n      115 |     }\n      116 |     \n\n      at ConcurrentFileOperationsTest.performWarmup (tests/performance/framework/PerformanceTestBase.ts:113:17)\n      at ConcurrentFileOperationsTest.runTest (tests/performance/framework/PerformanceTestBase.ts:212:7)\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:290:22)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20)\n\n  console.warn\n    ⚠️ 预热运行 2 失败: TypeError: The \"path\" argument must be of type string. Received undefined\n        at Object.join (node:path:1304:7)\n        at /home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:206:29\n        at Function.from (<anonymous>)\n        at ConcurrentFileOperationsTest.performOperation (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:204:33)\n        at ConcurrentFileOperationsTest.performWarmup (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:110:20)\n        at ConcurrentFileOperationsTest.runTest (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/PerformanceTestBase.ts:212:7)\n        at BenchmarkRunner.runAllTests (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/framework/BenchmarkRunner.ts:290:22)\n        at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20) {\n      code: 'ERR_INVALID_ARG_TYPE'\n    }\n\n      111 |       } catch (error) {\n      112 |         // 预热期间忽略错误，但记录警告\n    > 113 |         console.warn(`⚠️ 预热运行 ${i + 1} 失败:`, error);\n          |                 ^\n      114 |       }\n      115 |     }\n      116 |     \n\n      at ConcurrentFileOperationsTest.performWarmup (tests/performance/framework/PerformanceTestBase.ts:113:17)\n      at ConcurrentFileOperationsTest.runTest (tests/performance/framework/PerformanceTestBase.ts:212:7)\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:290:22)\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:341:20)\n\n  console.log\n       ✅ 预热完成\n\n      at ConcurrentFileOperationsTest.runTest (tests/performance/framework/PerformanceTestBase.ts:213:15)\n\n  console.log\n       ❌ 性能测试失败: 没有成功的测量结果\n\n      at ConcurrentFileOperationsTest.runTest (tests/performance/framework/PerformanceTestBase.ts:253:15)\n\n  console.log\n    \n    🔧 执行测试: memory-optimization\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:289:15)\n\n  console.log\n    🔥 开始性能测试: LACFileFormat-内存优化\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:208:15)\n\n  console.log\n       配置: 6次测量, 2次预热\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:209:15)\n\n  console.log\n       ✅ 预热完成\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:213:15)\n\n  console.log\n       📊 测量 1/6: 49.65ms\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:220:19)\n\n  console.log\n       📊 测量 2/6: 48.754ms\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:220:19)\n\n  console.log\n       📊 测量 3/6: 51.811ms\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:220:19)\n\n  console.log\n       📊 测量 4/6: 52.121ms\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:220:19)\n\n  console.log\n       📊 测量 5/6: 50.559ms\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:220:19)\n\n  console.log\n       📊 测量 6/6: 51.905ms\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:220:19)\n\n  console.log\n       🎉 性能测试通过: 平均 50.8ms\n\n      at MemoryOptimizationTest.runTest (tests/performance/framework/PerformanceTestBase.ts:241:15)\n\n  console.log\n    📄 JSON报告已保存: tests/performance/reports/performance-report.json\n\n      at BenchmarkRunner.generateJsonReport (tests/performance/framework/BenchmarkRunner.ts:205:13)\n\n  console.log\n    \n    🏆 性能测试完成:\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:319:13)\n\n  console.log\n       总测试: 4 | 通过: 1 | 失败: 3\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:320:13)\n\n  console.log\n       平均时间: 12.7ms\n\n      at BenchmarkRunner.runAllTests (tests/performance/framework/BenchmarkRunner.ts:321:13)\n\nFAIL node tests/performance/benchmarks/LACFileFormat.perf.test.ts\n  LACFileFormat性能基准测试\n    ✕ 应该运行所有LACFileFormat性能基准测试 (692 ms)\n\n  ● LACFileFormat性能基准测试 › 应该运行所有LACFileFormat性能基准测试\n\n    expect(received).toBeGreaterThanOrEqual(expected)\n\n    Expected: >= 3\n    Received:    1\n\n      346 |     \n      347 |     // 验证至少有大部分测试通过\n    > 348 |     expect(report.summary.passedTests).toBeGreaterThanOrEqual(3);\n          |                                        ^\n      349 |     \n      350 |     // 验证报告包含性能指标\n      351 |     report.testResults.forEach(result => {\n\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:348:40)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   0 total\nTime:        4.603 s\nRan all test suites matching /tests\\/performance\\/benchmarks\\/LACFileFormat.perf.test.ts/i.\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
      "output": "{\"numFailedTestSuites\":1,\"numFailedTests\":1,\"numPassedTestSuites\":0,\"numPassedTests\":0,\"numPendingTestSuites\":0,\"numPendingTests\":0,\"numRuntimeErrorTestSuites\":0,\"numTodoTests\":0,\"numTotalTestSuites\":1,\"numTotalTests\":1,\"openHandles\":[],\"snapshot\":{\"added\":0,\"didUpdate\":false,\"failure\":false,\"filesAdded\":0,\"filesRemoved\":0,\"filesRemovedList\":[],\"filesUnmatched\":0,\"filesUpdated\":0,\"matched\":0,\"total\":0,\"unchecked\":0,\"uncheckedKeysByFile\":[],\"unmatched\":0,\"updated\":0},\"startTime\":1755055287841,\"success\":false,\"testResults\":[{\"assertionResults\":[{\"ancestorTitles\":[\"LACFileFormat性能基准测试\"],\"duration\":692,\"failureDetails\":[{\"matcherResult\":{\"message\":\"expect(received).toBeGreaterThanOrEqual(expected)\\n\\nExpected: >= 3\\nReceived:    1\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBeGreaterThanOrEqual(expected)\\n\\nExpected: >= 3\\nReceived:    1\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts:348:40)\"],\"fullName\":\"LACFileFormat性能基准测试 应该运行所有LACFileFormat性能基准测试\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":2,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该运行所有LACFileFormat性能基准测试\"}],\"endTime\":1755055292441,\"message\":\"  ● LACFileFormat性能基准测试 › 应该运行所有LACFileFormat性能基准测试\\n\\n    expect(received).toBeGreaterThanOrEqual(expected)\\n\\n    Expected: >= 3\\n    Received:    1\\n\\n      346 |     \\n      347 |     // 验证至少有大部分测试通过\\n    > 348 |     expect(report.summary.passedTests).toBeGreaterThanOrEqual(3);\\n          |                                        ^\\n      349 |     \\n      350 |     // 验证报告包含性能指标\\n      351 |     report.testResults.forEach(result => {\\n\\n      at Object.<anonymous> (tests/performance/benchmarks/LACFileFormat.perf.test.ts:348:40)\\n\",\"name\":\"/home/share/samba/vscode-extension/pico-logicanalyzer/tests/performance/benchmarks/LACFileFormat.perf.test.ts\",\"startTime\":1755055288140,\"status\":\"failed\",\"summary\":\"\"}],\"wasInterrupted\":false}\n"
    },
    {
      "success": false,
      "testFile": "tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts",
      "error": "Command failed: npx jest \"tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts\" --verbose --ci --json --coverage=false --forceExit\n  console.log\n    🚀 开始运行E2E测试套件: 数据采集工作流E2E测试\n\n      at DataCaptureWorkflowE2E.runE2ETests (tests/e2e/framework/E2ETestBase.ts:271:13)\n\n  console.log\n    ❌ E2E测试执行失败: Error: ENOENT: no such file or directory, open '/tmp/tmp-184462-XQ2SKU0O6LT2/data/tmp/tmp-184462-XQ2SKU0O6LT2/test-data/test.txt'\n\n      at DataCaptureWorkflowE2E.runE2ETests (tests/e2e/framework/E2ETestBase.ts:292:15)\n\n  console.log\n    🚀 开始执行场景批次: batch-1755055303401\n\n      at ScenarioRunner.executeBatch (tests/e2e/framework/ScenarioRunner.ts:90:13)\n\n  console.log\n    📋 包含 4 个场景\n\n      at ScenarioRunner.executeBatch (tests/e2e/framework/ScenarioRunner.ts:91:13)\n\n  console.log\n    🔗 分析得到 0 个并行执行组\n\n      at ScenarioRunner.executeBatch (tests/e2e/framework/ScenarioRunner.ts:97:13)\n\n  console.log\n    📄 批次报告已保存: tests/e2e/reports/batch-batch-1755055303401.json\n\n      at ScenarioRunner.generateBatchReport (tests/e2e/framework/ScenarioRunner.ts:364:13)\n\n  console.log\n    \n    🏆 批次执行完成:\n\n      at ScenarioRunner.executeBatch (tests/e2e/framework/ScenarioRunner.ts:151:13)\n\n  console.log\n       成功: 0/4\n\n      at ScenarioRunner.executeBatch (tests/e2e/framework/ScenarioRunner.ts:152:13)\n\n  console.log\n       用时: 5ms\n\n      at ScenarioRunner.executeBatch (tests/e2e/framework/ScenarioRunner.ts:153:13)\n\nFAIL node tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts\n  数据采集工作流E2E测试\n    ✕ 应该完成所有数据采集工作流场景 (39 ms)\n    ✕ 应该支持场景批次执行和并行优化 (11 ms)\n\n  ● 数据采集工作流E2E测试 › 应该完成所有数据采集工作流场景\n\n    expect(received).toHaveLength(expected)\n\n    Expected length: 4\n    Received length: 0\n    Received array:  []\n\n      357 |     \n      358 |     // 验证基本结果\n    > 359 |     expect(results).toHaveLength(4);\n          |                     ^\n      360 |     \n      361 |     // 验证至少有大部分场景成功\n      362 |     const successfulScenarios = results.filter(r => r.success).length;\n\n      at Object.<anonymous> (tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts:359:21)\n\n  ● 数据采集工作流E2E测试 › 应该支持场景批次执行和并行优化\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4\n    Received: 0\n\n      415 |     // 验证批次执行结果\n      416 |     expect(batchResult.totalScenarios).toBe(4);\n    > 417 |     expect(batchResult.completedScenarios).toBe(4);\n          |                                            ^\n      418 |     expect(batchResult.results).toHaveLength(4);\n      419 |     expect(batchResult.totalDuration).toBeGreaterThan(0);\n      420 |     \n\n      at Object.<anonymous> (tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts:417:44)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 2 total\nSnapshots:   0 total\nTime:        2.929 s, estimated 3 s\nRan all test suites matching /tests\\/e2e\\/scenarios\\/DataCaptureWorkflow.e2e.test.ts/i.\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
      "output": "{\"numFailedTestSuites\":1,\"numFailedTests\":2,\"numPassedTestSuites\":0,\"numPassedTests\":0,\"numPendingTestSuites\":0,\"numPendingTests\":0,\"numRuntimeErrorTestSuites\":0,\"numTodoTests\":0,\"numTotalTestSuites\":1,\"numTotalTests\":2,\"openHandles\":[],\"snapshot\":{\"added\":0,\"didUpdate\":false,\"failure\":false,\"filesAdded\":0,\"filesRemoved\":0,\"filesRemovedList\":[],\"filesUnmatched\":0,\"filesUpdated\":0,\"matched\":0,\"total\":0,\"unchecked\":0,\"uncheckedKeysByFile\":[],\"unmatched\":0,\"updated\":0},\"startTime\":1755055300492,\"success\":false,\"testResults\":[{\"assertionResults\":[{\"ancestorTitles\":[\"数据采集工作流E2E测试\"],\"duration\":39,\"failureDetails\":[{\"matcherResult\":{\"message\":\"expect(received).toHaveLength(expected)\\n\\nExpected length: 4\\nReceived length: 0\\nReceived array:  []\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toHaveLength(expected)\\n\\nExpected length: 4\\nReceived length: 0\\nReceived array:  []\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts:359:21)\"],\"fullName\":\"数据采集工作流E2E测试 应该完成所有数据采集工作流场景\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":0,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该完成所有数据采集工作流场景\"},{\"ancestorTitles\":[\"数据采集工作流E2E测试\"],\"duration\":11,\"failureDetails\":[{\"matcherResult\":{\"actual\":0,\"expected\":4,\"message\":\"expect(received).toBe(expected) // Object.is equality\\n\\nExpected: 4\\nReceived: 0\",\"name\":\"toBe\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBe(expected) // Object.is equality\\n\\nExpected: 4\\nReceived: 0\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts:417:44)\"],\"fullName\":\"数据采集工作流E2E测试 应该支持场景批次执行和并行优化\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":1,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该支持场景批次执行和并行优化\"}],\"endTime\":1755055303417,\"message\":\"  ● 数据采集工作流E2E测试 › 应该完成所有数据采集工作流场景\\n\\n    expect(received).toHaveLength(expected)\\n\\n    Expected length: 4\\n    Received length: 0\\n    Received array:  []\\n\\n      357 |     \\n      358 |     // 验证基本结果\\n    > 359 |     expect(results).toHaveLength(4);\\n          |                     ^\\n      360 |     \\n      361 |     // 验证至少有大部分场景成功\\n      362 |     const successfulScenarios = results.filter(r => r.success).length;\\n\\n      at Object.<anonymous> (tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts:359:21)\\n\\n  ● 数据采集工作流E2E测试 › 应该支持场景批次执行和并行优化\\n\\n    expect(received).toBe(expected) // Object.is equality\\n\\n    Expected: 4\\n    Received: 0\\n\\n      415 |     // 验证批次执行结果\\n      416 |     expect(batchResult.totalScenarios).toBe(4);\\n    > 417 |     expect(batchResult.completedScenarios).toBe(4);\\n          |                                            ^\\n      418 |     expect(batchResult.results).toHaveLength(4);\\n      419 |     expect(batchResult.totalDuration).toBeGreaterThan(0);\\n      420 |     \\n\\n      at Object.<anonymous> (tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts:417:44)\\n\",\"name\":\"/home/share/samba/vscode-extension/pico-logicanalyzer/tests/e2e/scenarios/DataCaptureWorkflow.e2e.test.ts\",\"startTime\":1755055300804,\"status\":\"failed\",\"summary\":\"\"}],\"wasInterrupted\":false}\n"
    },
    {
      "success": false,
      "testFile": "tests/stress/load/LargeDataProcessing.stress.test.ts",
      "error": "Command failed: npx jest \"tests/stress/load/LargeDataProcessing.stress.test.ts\" --verbose --ci --json --coverage=false --forceExit\nFAIL node tests/stress/load/LargeDataProcessing.stress.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\u001b[0m:\u001b[93m29\u001b[0m:\u001b[93m7\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2515: \u001b[0mNon-abstract class 'LargeDataProcessingStressTest' does not implement inherited abstract member 'getTestName' from class 'StressTestBase'.\n\n    \u001b[7m29\u001b[0m class LargeDataProcessingStressTest extends StressTestBase {\n    \u001b[7m  \u001b[0m \u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\u001b[0m:\u001b[93m29\u001b[0m:\u001b[93m7\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2515: \u001b[0mNon-abstract class 'LargeDataProcessingStressTest' does not implement inherited abstract member 'performOperation' from class 'StressTestBase'.\n\n    \u001b[7m29\u001b[0m class LargeDataProcessingStressTest extends StressTestBase {\n    \u001b[7m  \u001b[0m \u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m7\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2515: \u001b[0mNon-abstract class 'MemoryIntensiveStressTest' does not implement inherited abstract member 'getTestName' from class 'StressTestBase'.\n\n    \u001b[7m148\u001b[0m class MemoryIntensiveStressTest extends StressTestBase {\n    \u001b[7m   \u001b[0m \u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m7\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2515: \u001b[0mNon-abstract class 'MemoryIntensiveStressTest' does not implement inherited abstract member 'performOperation' from class 'StressTestBase'.\n\n    \u001b[7m148\u001b[0m class MemoryIntensiveStressTest extends StressTestBase {\n    \u001b[7m   \u001b[0m \u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        2.921 s\nRan all test suites matching /tests\\/stress\\/load\\/LargeDataProcessing.stress.test.ts/i.\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
      "output": "{\"numFailedTestSuites\":1,\"numFailedTests\":0,\"numPassedTestSuites\":0,\"numPassedTests\":0,\"numPendingTestSuites\":0,\"numPendingTests\":0,\"numRuntimeErrorTestSuites\":1,\"numTodoTests\":0,\"numTotalTestSuites\":1,\"numTotalTests\":0,\"openHandles\":[],\"snapshot\":{\"added\":0,\"didUpdate\":false,\"failure\":false,\"filesAdded\":0,\"filesRemoved\":0,\"filesRemovedList\":[],\"filesUnmatched\":0,\"filesUpdated\":0,\"matched\":0,\"total\":0,\"unchecked\":0,\"uncheckedKeysByFile\":[],\"unmatched\":0,\"updated\":0},\"startTime\":1755055311664,\"success\":false,\"testResults\":[{\"assertionResults\":[],\"coverage\":{},\"endTime\":1755055314586,\"message\":\"  ● Test suite failed to run\\n\\n    \\u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\\u001b[0m:\\u001b[93m29\\u001b[0m:\\u001b[93m7\\u001b[0m - \\u001b[91merror\\u001b[0m\\u001b[90m TS2515: \\u001b[0mNon-abstract class 'LargeDataProcessingStressTest' does not implement inherited abstract member 'getTestName' from class 'StressTestBase'.\\n\\n    \\u001b[7m29\\u001b[0m class LargeDataProcessingStressTest extends StressTestBase {\\n    \\u001b[7m  \\u001b[0m \\u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\u001b[0m\\n    \\u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\\u001b[0m:\\u001b[93m29\\u001b[0m:\\u001b[93m7\\u001b[0m - \\u001b[91merror\\u001b[0m\\u001b[90m TS2515: \\u001b[0mNon-abstract class 'LargeDataProcessingStressTest' does not implement inherited abstract member 'performOperation' from class 'StressTestBase'.\\n\\n    \\u001b[7m29\\u001b[0m class LargeDataProcessingStressTest extends StressTestBase {\\n    \\u001b[7m  \\u001b[0m \\u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\u001b[0m\\n    \\u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\\u001b[0m:\\u001b[93m148\\u001b[0m:\\u001b[93m7\\u001b[0m - \\u001b[91merror\\u001b[0m\\u001b[90m TS2515: \\u001b[0mNon-abstract class 'MemoryIntensiveStressTest' does not implement inherited abstract member 'getTestName' from class 'StressTestBase'.\\n\\n    \\u001b[7m148\\u001b[0m class MemoryIntensiveStressTest extends StressTestBase {\\n    \\u001b[7m   \\u001b[0m \\u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~\\u001b[0m\\n    \\u001b[96mtests/stress/load/LargeDataProcessing.stress.test.ts\\u001b[0m:\\u001b[93m148\\u001b[0m:\\u001b[93m7\\u001b[0m - \\u001b[91merror\\u001b[0m\\u001b[90m TS2515: \\u001b[0mNon-abstract class 'MemoryIntensiveStressTest' does not implement inherited abstract member 'performOperation' from class 'StressTestBase'.\\n\\n    \\u001b[7m148\\u001b[0m class MemoryIntensiveStressTest extends StressTestBase {\\n    \\u001b[7m   \\u001b[0m \\u001b[91m      ~~~~~~~~~~~~~~~~~~~~~~~~~\\u001b[0m\\n\",\"name\":\"/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/load/LargeDataProcessing.stress.test.ts\",\"startTime\":1755055314586,\"status\":\"failed\",\"summary\":\"\"}],\"wasInterrupted\":false}\n"
    },
    {
      "success": false,
      "testFile": "tests/stress/load/IntelligentLoadGeneration.stress.test.ts",
      "error": "Command failed: npx jest \"tests/stress/load/IntelligentLoadGeneration.stress.test.ts\" --verbose --ci --json --coverage=false --forceExit\n  console.log\n    🚀 启动负载生成器: progressive策略, i2c模式\n\n      at LoadGenerator.startGeneration (tests/stress/framework/LoadGenerator.ts:121:13)\n\n  console.log\n    📊 负载生成完成: 2MB, 模式: i2c, 用时: 22ms\n\n      at LoadGenerator.generateNext (tests/stress/framework/LoadGenerator.ts:158:13)\n\n  console.log\n    📊 负载生成完成: 3MB, 模式: i2c, 用时: 32ms\n\n      at LoadGenerator.generateNext (tests/stress/framework/LoadGenerator.ts:158:13)\n\n  console.log\n    📊 负载生成完成: 4MB, 模式: i2c, 用时: 46ms\n\n      at LoadGenerator.generateNext (tests/stress/framework/LoadGenerator.ts:158:13)\n\n  console.log\n    \n    🚀 LoadGenerator基本功能测试完成:\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:282:13)\n\n  console.log\n       生成数据: 9.0MB\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:283:13)\n\n  console.log\n       平均大小: 3.0MB\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:284:13)\n\n  console.log\n       峰值大小: 4.0MB\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:285:13)\n\n  console.log\n       生成速率: 70.87MB/s\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:286:13)\n\n  console.log\n       内存效率: 66.7%\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:287:13)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:69:5)\n      at new IntelligentLoadGenerationStressTest (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:35:5)\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:291:24)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new ResourceMonitor (tests/stress/framework/ResourceMonitor.ts:86:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:91:28)\n      at new IntelligentLoadGenerationStressTest (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:35:5)\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:291:24)\n\n  console.log\n    💪 开始压力测试: 智能负载生成压力测试 (progressive策略-i2c模式)\n\n      at IntelligentLoadGenerationStressTest.runStressTest (tests/stress/framework/StressTestBase.ts:114:13)\n\n  console.log\n    ⚙️ 强度: light, 最大时长: 30秒\n\n      at IntelligentLoadGenerationStressTest.runStressTest (tests/stress/framework/StressTestBase.ts:115:13)\n\n  console.log\n    🔍 资源监控已启动 (间隔: 5秒)\n\n      at ResourceMonitor.startMonitoring (tests/stress/framework/ResourceMonitor.ts:110:13)\n\n  console.log\n    ⚠️ 检测到资源危险状况，尝试自动恢复...\n\n      at IntelligentLoadGenerationStressTest.executeStressLoop (tests/stress/framework/StressTestBase.ts:163:19)\n\n  console.log\n    🔄 执行自动恢复流程...\n\n      at IntelligentLoadGenerationStressTest.performAutoRecovery (tests/stress/framework/StressTestBase.ts:214:13)\n\n  console.log\n    ❌ 压力测试失败: 智能负载生成压力测试 (progressive策略-i2c模式) - Error: 自动恢复失败，资源状况仍然危险\n\n      at IntelligentLoadGenerationStressTest.runStressTest (tests/stress/framework/StressTestBase.ts:139:15)\n\n  console.log\n    🏁 资源监控已停止 (采集 3 个快照, 用时 5.1秒)\n\n      at ResourceMonitor.stopMonitoring (tests/stress/framework/ResourceMonitor.ts:128:13)\n\n  console.log\n    ⚠️ 压力测试失败，但验证部分功能:\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:300:15)\n\n  console.log\n       处理数据: 0.0MB\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:301:15)\n\n  console.log\n       错误信息: 压力测试失败: Error: 自动恢复失败，资源状况仍然危险\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:302:15)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:69:5)\n      at new IntelligentLoadGenerationStressTest (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:35:5)\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:321:24)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new ResourceMonitor (tests/stress/framework/ResourceMonitor.ts:86:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:91:28)\n      at new IntelligentLoadGenerationStressTest (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:35:5)\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:321:24)\n\n  console.log\n    💪 开始压力测试: 智能负载生成压力测试 (burst策略-spi模式)\n\n      at IntelligentLoadGenerationStressTest.runStressTest (tests/stress/framework/StressTestBase.ts:114:13)\n\n  console.log\n    ⚙️ 强度: light, 最大时长: 240秒\n\n      at IntelligentLoadGenerationStressTest.runStressTest (tests/stress/framework/StressTestBase.ts:115:13)\n\n  console.log\n    🔍 资源监控已启动 (间隔: 5秒)\n\n      at ResourceMonitor.startMonitoring (tests/stress/framework/ResourceMonitor.ts:110:13)\n\n  console.log\n    ⚠️ 检测到资源危险状况，尝试自动恢复...\n\n      at IntelligentLoadGenerationStressTest.executeStressLoop (tests/stress/framework/StressTestBase.ts:163:19)\n\n  console.log\n    🔄 执行自动恢复流程...\n\n      at IntelligentLoadGenerationStressTest.performAutoRecovery (tests/stress/framework/StressTestBase.ts:214:13)\n\n  console.log\n    ❌ 压力测试失败: 智能负载生成压力测试 (burst策略-spi模式) - Error: 自动恢复失败，资源状况仍然危险\n\n      at IntelligentLoadGenerationStressTest.runStressTest (tests/stress/framework/StressTestBase.ts:139:15)\n\n  console.log\n    🏁 资源监控已停止 (采集 3 个快照, 用时 5.1秒)\n\n      at ResourceMonitor.stopMonitoring (tests/stress/framework/ResourceMonitor.ts:128:13)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:69:5)\n      at new MultiStrategyLoadTest (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:170:5)\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:338:24)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new ResourceMonitor (tests/stress/framework/ResourceMonitor.ts:86:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:91:28)\n      at new MultiStrategyLoadTest (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:170:5)\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:338:24)\n\n  console.log\n    💪 开始压力测试: 多策略负载生成综合测试\n\n      at MultiStrategyLoadTest.runStressTest (tests/stress/framework/StressTestBase.ts:114:13)\n\n  console.log\n    ⚙️ 强度: heavy, 最大时长: 900秒\n\n      at MultiStrategyLoadTest.runStressTest (tests/stress/framework/StressTestBase.ts:115:13)\n\n  console.log\n    🔍 资源监控已启动 (间隔: 5秒)\n\n      at ResourceMonitor.startMonitoring (tests/stress/framework/ResourceMonitor.ts:110:13)\n\n  console.log\n    ⚠️ 检测到资源危险状况，尝试自动恢复...\n\n      at MultiStrategyLoadTest.executeStressLoop (tests/stress/framework/StressTestBase.ts:163:19)\n\n  console.log\n    🔄 执行自动恢复流程...\n\n      at MultiStrategyLoadTest.performAutoRecovery (tests/stress/framework/StressTestBase.ts:214:13)\n\n  console.log\n    ❌ 压力测试失败: 多策略负载生成综合测试 - Error: 自动恢复失败，资源状况仍然危险\n\n      at MultiStrategyLoadTest.runStressTest (tests/stress/framework/StressTestBase.ts:139:15)\n\n  console.log\n    🧹 多策略负载生成测试结果:\n\n      at MultiStrategyLoadTest.cleanupStressResources (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:239:13)\n\n  console.log\n    🏁 资源监控已停止 (采集 3 个快照, 用时 5.1秒)\n\n      at ResourceMonitor.stopMonitoring (tests/stress/framework/ResourceMonitor.ts:128:13)\n\nFAIL node tests/stress/load/IntelligentLoadGeneration.stress.test.ts (17.962 s)\n  智能负载生成压力测试\n    ✓ 应该支持LoadGenerator基本功能 (136 ms)\n    ✕ 应该支持渐进式I2C数据生成 (5132 ms)\n    ✕ 应该支持突发式SPI数据生成 (5117 ms)\n    ✕ 应该支持多策略综合负载测试 (5118 ms)\n\n  ● 智能负载生成压力测试 › 应该支持渐进式I2C数据生成\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      303 |       \n      304 |       // 宽松的验证：只要有一些数据被处理就认为LoadGenerator工作正常\n    > 305 |       expect(result.performance.dataProcessed).toBeGreaterThan(0);\n          |                                                ^\n      306 |       return;\n      307 |     }\n      308 |     \n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:305:48)\n\n  ● 智能负载生成压力测试 › 应该支持突发式SPI数据生成\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      326 |     const result = await stressTest.runStressTest();\n      327 |     \n    > 328 |     expect(result.success).toBe(true);\n          |                            ^\n      329 |     expect(result.performance.dataProcessed).toBeGreaterThan(30);\n      330 |     expect(result.performance.peakMemoryUsage).toBeLessThan(300);\n      331 |     \n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:328:28)\n\n  ● 智能负载生成压力测试 › 应该支持多策略综合负载测试\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      340 |     const result = await stressTest.runStressTest();\n      341 |     \n    > 342 |     expect(result.success).toBe(true);\n          |                            ^\n      343 |     expect(result.performance.dataProcessed).toBeGreaterThan(100);\n      344 |     \n      345 |     // 多策略测试应该有更好的内存效率\n\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:342:28)\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 1 passed, 4 total\nSnapshots:   0 total\nTime:        18.298 s\nRan all test suites matching /tests\\/stress\\/load\\/IntelligentLoadGeneration.stress.test.ts/i.\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
      "output": "{\"numFailedTestSuites\":1,\"numFailedTests\":3,\"numPassedTestSuites\":0,\"numPassedTests\":1,\"numPendingTestSuites\":0,\"numPendingTests\":0,\"numRuntimeErrorTestSuites\":0,\"numTodoTests\":0,\"numTotalTestSuites\":1,\"numTotalTests\":4,\"openHandles\":[],\"snapshot\":{\"added\":0,\"didUpdate\":false,\"failure\":false,\"filesAdded\":0,\"filesRemoved\":0,\"filesRemovedList\":[],\"filesUnmatched\":0,\"filesUpdated\":0,\"matched\":0,\"total\":0,\"unchecked\":0,\"uncheckedKeysByFile\":[],\"unmatched\":0,\"updated\":0},\"startTime\":1755055353457,\"success\":false,\"testResults\":[{\"assertionResults\":[{\"ancestorTitles\":[\"智能负载生成压力测试\"],\"duration\":136,\"failureDetails\":[],\"failureMessages\":[],\"fullName\":\"智能负载生成压力测试 应该支持LoadGenerator基本功能\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":12,\"retryReasons\":[],\"status\":\"passed\",\"title\":\"应该支持LoadGenerator基本功能\"},{\"ancestorTitles\":[\"智能负载生成压力测试\"],\"duration\":5132,\"failureDetails\":[{\"matcherResult\":{\"message\":\"expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 0\\nReceived:   0\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 0\\nReceived:   0\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/load/IntelligentLoadGeneration.stress.test.ts:305:48)\\n    at runNextTicks (node:internal/process/task_queues:65:5)\\n    at processTimers (node:internal/timers:520:9)\"],\"fullName\":\"智能负载生成压力测试 应该支持渐进式I2C数据生成\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":0,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该支持渐进式I2C数据生成\"},{\"ancestorTitles\":[\"智能负载生成压力测试\"],\"duration\":5117,\"failureDetails\":[{\"matcherResult\":{\"actual\":false,\"expected\":true,\"message\":\"expect(received).toBe(expected) // Object.is equality\\n\\nExpected: true\\nReceived: false\",\"name\":\"toBe\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBe(expected) // Object.is equality\\n\\nExpected: true\\nReceived: false\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/load/IntelligentLoadGeneration.stress.test.ts:328:28)\\n    at runNextTicks (node:internal/process/task_queues:65:5)\\n    at processTimers (node:internal/timers:520:9)\"],\"fullName\":\"智能负载生成压力测试 应该支持突发式SPI数据生成\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":0,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该支持突发式SPI数据生成\"},{\"ancestorTitles\":[\"智能负载生成压力测试\"],\"duration\":5118,\"failureDetails\":[{\"matcherResult\":{\"actual\":false,\"expected\":true,\"message\":\"expect(received).toBe(expected) // Object.is equality\\n\\nExpected: true\\nReceived: false\",\"name\":\"toBe\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBe(expected) // Object.is equality\\n\\nExpected: true\\nReceived: false\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/load/IntelligentLoadGeneration.stress.test.ts:342:28)\\n    at runNextTicks (node:internal/process/task_queues:65:5)\\n    at processTimers (node:internal/timers:520:9)\"],\"fullName\":\"智能负载生成压力测试 应该支持多策略综合负载测试\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":0,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该支持多策略综合负载测试\"}],\"endTime\":1755055371752,\"message\":\"  ● 智能负载生成压力测试 › 应该支持渐进式I2C数据生成\\n\\n    expect(received).toBeGreaterThan(expected)\\n\\n    Expected: > 0\\n    Received:   0\\n\\n      303 |       \\n      304 |       // 宽松的验证：只要有一些数据被处理就认为LoadGenerator工作正常\\n    > 305 |       expect(result.performance.dataProcessed).toBeGreaterThan(0);\\n          |                                                ^\\n      306 |       return;\\n      307 |     }\\n      308 |     \\n\\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:305:48)\\n\\n  ● 智能负载生成压力测试 › 应该支持突发式SPI数据生成\\n\\n    expect(received).toBe(expected) // Object.is equality\\n\\n    Expected: true\\n    Received: false\\n\\n      326 |     const result = await stressTest.runStressTest();\\n      327 |     \\n    > 328 |     expect(result.success).toBe(true);\\n          |                            ^\\n      329 |     expect(result.performance.dataProcessed).toBeGreaterThan(30);\\n      330 |     expect(result.performance.peakMemoryUsage).toBeLessThan(300);\\n      331 |     \\n\\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:328:28)\\n\\n  ● 智能负载生成压力测试 › 应该支持多策略综合负载测试\\n\\n    expect(received).toBe(expected) // Object.is equality\\n\\n    Expected: true\\n    Received: false\\n\\n      340 |     const result = await stressTest.runStressTest();\\n      341 |     \\n    > 342 |     expect(result.success).toBe(true);\\n          |                            ^\\n      343 |     expect(result.performance.dataProcessed).toBeGreaterThan(100);\\n      344 |     \\n      345 |     // 多策略测试应该有更好的内存效率\\n\\n      at Object.<anonymous> (tests/stress/load/IntelligentLoadGeneration.stress.test.ts:342:28)\\n\",\"name\":\"/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/load/IntelligentLoadGeneration.stress.test.ts\",\"startTime\":1755055353790,\"status\":\"failed\",\"summary\":\"\"}],\"wasInterrupted\":false}\n"
    },
    {
      "success": false,
      "testFile": "tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts",
      "error": "Command failed: npx jest \"tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts\" --verbose --ci --json --coverage=false --forceExit\n  console.log\n    🔧 内存泄漏检测测试配置: 模式=accelerated, 时长=300秒, 频率=50/秒\n\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:40:13)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:69:5)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new NormalMemoryUsageTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:270:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:295:18)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new ResourceMonitor (tests/stress/framework/ResourceMonitor.ts:86:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:91:28)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new NormalMemoryUsageTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:270:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:295:18)\n\n  console.log\n    🔍 MemoryLeakDetector初始化: 采样间隔1秒, 泄漏阈值50MB/h\n\n      at new MemoryLeakDetector (tests/stress/data-processing/framework/MemoryLeakDetector.ts:79:13)\n\n  console.log\n    🔍 开始长期运行测试: 正常内存使用长期运行测试\n\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:127:13)\n\n  console.log\n    ⚙️ 模式: accelerated, 目标时长: 0.08333333333333333小时\n\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:128:13)\n\n  console.log\n    📸 设置内存基线: 342.6MB\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:97:13)\n\n  console.log\n    🔍 内存泄漏监控已启动\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:104:13)\n\n  console.log\n    🚀 加速模式: 60倍速度, 实际运行0.0013888888888888887分钟\n\n      at NormalMemoryUsageTest.adjustConfigurationForMode (tests/stress/data-processing/framework/LongTermStressTest.ts:176:17)\n\n  console.warn\n    ⚠️ 数据处理操作异常: TypeError: Cannot read properties of undefined (reading 'shouldContinue')\n\n      135 |       \n      136 |     } catch (error) {\n    > 137 |       console.warn(`⚠️ 数据处理操作异常: ${error}`);\n          |               ^\n      138 |     }\n      139 |     \n      140 |     return totalProcessed;\n\n      at NormalMemoryUsageTest.performDataProcessing (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:137:15)\n      at NormalMemoryUsageTest.performLongTermOperation (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:96:38)\n      at NormalMemoryUsageTest.executeLongTermLoop (tests/stress/data-processing/framework/LongTermStressTest.ts:207:42)\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:142:36)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:297:20)\n\n  console.log\n    🔍 内存泄漏监控已停止: 运行0.0分钟, 采集0个快照\n\n      at MemoryLeakDetector.stopMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:130:13)\n\n  console.log\n    ✅ 长期运行测试完成: 0.0分钟\n\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:150:15)\n\n  console.log\n    🔧 内存泄漏检测测试配置: 模式=accelerated, 时长=300秒, 频率=50/秒\n\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:40:13)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:69:5)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new IntentionalMemoryLeakTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:283:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:316:18)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new ResourceMonitor (tests/stress/framework/ResourceMonitor.ts:86:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:91:28)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new IntentionalMemoryLeakTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:283:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:316:18)\n\n  console.log\n    🔍 MemoryLeakDetector初始化: 采样间隔3秒, 泄漏阈值0.2MB/h\n\n      at new MemoryLeakDetector (tests/stress/data-processing/framework/MemoryLeakDetector.ts:79:13)\n\n  console.log\n    🔍 开始长期运行测试: 故意内存泄漏检测能力测试\n\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:127:13)\n\n  console.log\n    ⚙️ 模式: accelerated, 目标时长: 0.08333333333333333小时\n\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:128:13)\n\n  console.log\n    📸 设置内存基线: 349.8MB\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:97:13)\n\n  console.log\n    🔍 内存泄漏监控已启动\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:104:13)\n\n  console.log\n    🚀 加速模式: 60倍速度, 实际运行0.0013888888888888887分钟\n\n      at IntentionalMemoryLeakTest.adjustConfigurationForMode (tests/stress/data-processing/framework/LongTermStressTest.ts:176:17)\n\n  console.warn\n    ⚠️ 数据处理操作异常: TypeError: Cannot read properties of undefined (reading 'shouldContinue')\n\n      135 |       \n      136 |     } catch (error) {\n    > 137 |       console.warn(`⚠️ 数据处理操作异常: ${error}`);\n          |               ^\n      138 |     }\n      139 |     \n      140 |     return totalProcessed;\n\n      at IntentionalMemoryLeakTest.performDataProcessing (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:137:15)\n      at IntentionalMemoryLeakTest.performLongTermOperation (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:96:38)\n      at IntentionalMemoryLeakTest.executeLongTermLoop (tests/stress/data-processing/framework/LongTermStressTest.ts:207:42)\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:142:36)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:324:20)\n\n  console.log\n    🔍 内存泄漏监控已停止: 运行0.0分钟, 采集0个快照\n\n      at MemoryLeakDetector.stopMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:130:13)\n\n  console.log\n    ✅ 长期运行测试完成: 0.0分钟\n\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:150:15)\n\nFAIL node tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts\n  内存泄漏检测压力测试\n    ✕ 应该能检测正常内存使用（无泄漏） (152 ms)\n    ✕ 应该能检测故意的内存泄漏 (118 ms)\n\n  ● 内存泄漏检测压力测试 › 应该能检测正常内存使用（无泄漏）\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 10\n    Received:   1\n\n      300 |     expect(result.leakAnalysis.detected).toBe(false);\n      301 |     expect(result.stabilityScore).toBeGreaterThan(70);\n    > 302 |     expect(result.totalOperations).toBeGreaterThan(10);\n          |                                    ^\n      303 |     expect(result.memoryEfficiency).toBeGreaterThan(0);\n      304 |     \n      305 |     console.log(`\\n✅ 正常内存使用测试完成:`);\n\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:302:36)\n\n  ● 内存泄漏检测压力测试 › 应该能检测故意的内存泄漏\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 10\n    Received:   1\n\n      325 |     \n      326 |     // 故意泄漏应该被检测到\n    > 327 |     expect(result.totalOperations).toBeGreaterThan(10);\n          |                                    ^\n      328 |     \n      329 |     // 宽松的验证：至少有一些内存增长\n      330 |     expect(result.leakAnalysis.growthRate).toBeGreaterThan(0);\n\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:327:36)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 2 total\nSnapshots:   0 total\nTime:        3.09 s\nRan all test suites matching /tests\\/stress\\/data-processing\\/scenarios\\/MemoryLeakDetection.stress.test.ts/i.\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
      "output": "{\"numFailedTestSuites\":1,\"numFailedTests\":2,\"numPassedTestSuites\":0,\"numPassedTests\":0,\"numPendingTestSuites\":0,\"numPendingTests\":0,\"numRuntimeErrorTestSuites\":0,\"numTodoTests\":0,\"numTotalTestSuites\":1,\"numTotalTests\":2,\"openHandles\":[],\"snapshot\":{\"added\":0,\"didUpdate\":false,\"failure\":false,\"filesAdded\":0,\"filesRemoved\":0,\"filesRemovedList\":[],\"filesUnmatched\":0,\"filesUpdated\":0,\"matched\":0,\"total\":0,\"unchecked\":0,\"uncheckedKeysByFile\":[],\"unmatched\":0,\"updated\":0},\"startTime\":1755055380445,\"success\":false,\"testResults\":[{\"assertionResults\":[{\"ancestorTitles\":[\"内存泄漏检测压力测试\"],\"duration\":152,\"failureDetails\":[{\"matcherResult\":{\"message\":\"expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:302:36)\"],\"fullName\":\"内存泄漏检测压力测试 应该能检测正常内存使用（无泄漏）\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":2,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该能检测正常内存使用（无泄漏）\"},{\"ancestorTitles\":[\"内存泄漏检测压力测试\"],\"duration\":118,\"failureDetails\":[{\"matcherResult\":{\"message\":\"expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:327:36)\"],\"fullName\":\"内存泄漏检测压力测试 应该能检测故意的内存泄漏\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":0,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该能检测故意的内存泄漏\"}],\"endTime\":1755055383530,\"message\":\"  ● 内存泄漏检测压力测试 › 应该能检测正常内存使用（无泄漏）\\n\\n    expect(received).toBeGreaterThan(expected)\\n\\n    Expected: > 10\\n    Received:   1\\n\\n      300 |     expect(result.leakAnalysis.detected).toBe(false);\\n      301 |     expect(result.stabilityScore).toBeGreaterThan(70);\\n    > 302 |     expect(result.totalOperations).toBeGreaterThan(10);\\n          |                                    ^\\n      303 |     expect(result.memoryEfficiency).toBeGreaterThan(0);\\n      304 |     \\n      305 |     console.log(`\\\\n✅ 正常内存使用测试完成:`);\\n\\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:302:36)\\n\\n  ● 内存泄漏检测压力测试 › 应该能检测故意的内存泄漏\\n\\n    expect(received).toBeGreaterThan(expected)\\n\\n    Expected: > 10\\n    Received:   1\\n\\n      325 |     \\n      326 |     // 故意泄漏应该被检测到\\n    > 327 |     expect(result.totalOperations).toBeGreaterThan(10);\\n          |                                    ^\\n      328 |     \\n      329 |     // 宽松的验证：至少有一些内存增长\\n      330 |     expect(result.leakAnalysis.growthRate).toBeGreaterThan(0);\\n\\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:327:36)\\n\",\"name\":\"/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts\",\"startTime\":1755055380774,\"status\":\"failed\",\"summary\":\"\"}],\"wasInterrupted\":false}\n"
    }
  ],
  "qualityCheck": true,
  "summary": {
    "totalTests": 9,
    "passed": 4,
    "failed": 5,
    "allPassed": false,
    "efficiency": "6.9"
  },
  "stressTestSummary": {
    "memoryLeakTests": [
      {
        "success": false,
        "testFile": "tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts",
        "error": "Command failed: npx jest \"tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts\" --verbose --ci --json --coverage=false --forceExit\n  console.log\n    🔧 内存泄漏检测测试配置: 模式=accelerated, 时长=300秒, 频率=50/秒\n\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:40:13)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:69:5)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new NormalMemoryUsageTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:270:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:295:18)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new ResourceMonitor (tests/stress/framework/ResourceMonitor.ts:86:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:91:28)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new NormalMemoryUsageTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:270:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:295:18)\n\n  console.log\n    🔍 MemoryLeakDetector初始化: 采样间隔1秒, 泄漏阈值50MB/h\n\n      at new MemoryLeakDetector (tests/stress/data-processing/framework/MemoryLeakDetector.ts:79:13)\n\n  console.log\n    🔍 开始长期运行测试: 正常内存使用长期运行测试\n\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:127:13)\n\n  console.log\n    ⚙️ 模式: accelerated, 目标时长: 0.08333333333333333小时\n\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:128:13)\n\n  console.log\n    📸 设置内存基线: 342.6MB\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:97:13)\n\n  console.log\n    🔍 内存泄漏监控已启动\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:104:13)\n\n  console.log\n    🚀 加速模式: 60倍速度, 实际运行0.0013888888888888887分钟\n\n      at NormalMemoryUsageTest.adjustConfigurationForMode (tests/stress/data-processing/framework/LongTermStressTest.ts:176:17)\n\n  console.warn\n    ⚠️ 数据处理操作异常: TypeError: Cannot read properties of undefined (reading 'shouldContinue')\n\n      135 |       \n      136 |     } catch (error) {\n    > 137 |       console.warn(`⚠️ 数据处理操作异常: ${error}`);\n          |               ^\n      138 |     }\n      139 |     \n      140 |     return totalProcessed;\n\n      at NormalMemoryUsageTest.performDataProcessing (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:137:15)\n      at NormalMemoryUsageTest.performLongTermOperation (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:96:38)\n      at NormalMemoryUsageTest.executeLongTermLoop (tests/stress/data-processing/framework/LongTermStressTest.ts:207:42)\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:142:36)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:297:20)\n\n  console.log\n    🔍 内存泄漏监控已停止: 运行0.0分钟, 采集0个快照\n\n      at MemoryLeakDetector.stopMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:130:13)\n\n  console.log\n    ✅ 长期运行测试完成: 0.0分钟\n\n      at NormalMemoryUsageTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:150:15)\n\n  console.log\n    🔧 内存泄漏检测测试配置: 模式=accelerated, 时长=300秒, 频率=50/秒\n\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:40:13)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new PerformanceTestBase (tests/performance/framework/PerformanceTestBase.ts:62:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:69:5)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new IntentionalMemoryLeakTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:283:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:316:18)\n\n  console.warn\n    ⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量\n\n      78 |     this.gcEnabled = typeof global.gc === 'function';\n      79 |     if (!this.gcEnabled) {\n    > 80 |       console.warn('⚠️ 建议使用 --expose-gc 启动Node.js以获得更准确的内存测量');\n         |               ^\n      81 |     }\n      82 |   }\n      83 |   \n\n      at new PerformanceCollector (tests/performance/framework/PerformanceMetrics.ts:80:15)\n      at new ResourceMonitor (tests/stress/framework/ResourceMonitor.ts:86:22)\n      at new StressTestBase (tests/stress/framework/StressTestBase.ts:91:28)\n      at new LongTermStressTest (tests/stress/data-processing/framework/LongTermStressTest.ts:89:5)\n      at new MemoryLeakDetectionStressTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:42:5)\n      at new IntentionalMemoryLeakTest (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:283:5)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:316:18)\n\n  console.log\n    🔍 MemoryLeakDetector初始化: 采样间隔3秒, 泄漏阈值0.2MB/h\n\n      at new MemoryLeakDetector (tests/stress/data-processing/framework/MemoryLeakDetector.ts:79:13)\n\n  console.log\n    🔍 开始长期运行测试: 故意内存泄漏检测能力测试\n\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:127:13)\n\n  console.log\n    ⚙️ 模式: accelerated, 目标时长: 0.08333333333333333小时\n\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:128:13)\n\n  console.log\n    📸 设置内存基线: 349.8MB\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:97:13)\n\n  console.log\n    🔍 内存泄漏监控已启动\n\n      at MemoryLeakDetector.startMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:104:13)\n\n  console.log\n    🚀 加速模式: 60倍速度, 实际运行0.0013888888888888887分钟\n\n      at IntentionalMemoryLeakTest.adjustConfigurationForMode (tests/stress/data-processing/framework/LongTermStressTest.ts:176:17)\n\n  console.warn\n    ⚠️ 数据处理操作异常: TypeError: Cannot read properties of undefined (reading 'shouldContinue')\n\n      135 |       \n      136 |     } catch (error) {\n    > 137 |       console.warn(`⚠️ 数据处理操作异常: ${error}`);\n          |               ^\n      138 |     }\n      139 |     \n      140 |     return totalProcessed;\n\n      at IntentionalMemoryLeakTest.performDataProcessing (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:137:15)\n      at IntentionalMemoryLeakTest.performLongTermOperation (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:96:38)\n      at IntentionalMemoryLeakTest.executeLongTermLoop (tests/stress/data-processing/framework/LongTermStressTest.ts:207:42)\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:142:36)\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:324:20)\n\n  console.log\n    🔍 内存泄漏监控已停止: 运行0.0分钟, 采集0个快照\n\n      at MemoryLeakDetector.stopMonitoring (tests/stress/data-processing/framework/MemoryLeakDetector.ts:130:13)\n\n  console.log\n    ✅ 长期运行测试完成: 0.0分钟\n\n      at IntentionalMemoryLeakTest.runLongTermTest (tests/stress/data-processing/framework/LongTermStressTest.ts:150:15)\n\nFAIL node tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts\n  内存泄漏检测压力测试\n    ✕ 应该能检测正常内存使用（无泄漏） (152 ms)\n    ✕ 应该能检测故意的内存泄漏 (118 ms)\n\n  ● 内存泄漏检测压力测试 › 应该能检测正常内存使用（无泄漏）\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 10\n    Received:   1\n\n      300 |     expect(result.leakAnalysis.detected).toBe(false);\n      301 |     expect(result.stabilityScore).toBeGreaterThan(70);\n    > 302 |     expect(result.totalOperations).toBeGreaterThan(10);\n          |                                    ^\n      303 |     expect(result.memoryEfficiency).toBeGreaterThan(0);\n      304 |     \n      305 |     console.log(`\\n✅ 正常内存使用测试完成:`);\n\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:302:36)\n\n  ● 内存泄漏检测压力测试 › 应该能检测故意的内存泄漏\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 10\n    Received:   1\n\n      325 |     \n      326 |     // 故意泄漏应该被检测到\n    > 327 |     expect(result.totalOperations).toBeGreaterThan(10);\n          |                                    ^\n      328 |     \n      329 |     // 宽松的验证：至少有一些内存增长\n      330 |     expect(result.leakAnalysis.growthRate).toBeGreaterThan(0);\n\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:327:36)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 2 total\nSnapshots:   0 total\nTime:        3.09 s\nRan all test suites matching /tests\\/stress\\/data-processing\\/scenarios\\/MemoryLeakDetection.stress.test.ts/i.\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
        "output": "{\"numFailedTestSuites\":1,\"numFailedTests\":2,\"numPassedTestSuites\":0,\"numPassedTests\":0,\"numPendingTestSuites\":0,\"numPendingTests\":0,\"numRuntimeErrorTestSuites\":0,\"numTodoTests\":0,\"numTotalTestSuites\":1,\"numTotalTests\":2,\"openHandles\":[],\"snapshot\":{\"added\":0,\"didUpdate\":false,\"failure\":false,\"filesAdded\":0,\"filesRemoved\":0,\"filesRemovedList\":[],\"filesUnmatched\":0,\"filesUpdated\":0,\"matched\":0,\"total\":0,\"unchecked\":0,\"uncheckedKeysByFile\":[],\"unmatched\":0,\"updated\":0},\"startTime\":1755055380445,\"success\":false,\"testResults\":[{\"assertionResults\":[{\"ancestorTitles\":[\"内存泄漏检测压力测试\"],\"duration\":152,\"failureDetails\":[{\"matcherResult\":{\"message\":\"expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:302:36)\"],\"fullName\":\"内存泄漏检测压力测试 应该能检测正常内存使用（无泄漏）\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":2,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该能检测正常内存使用（无泄漏）\"},{\"ancestorTitles\":[\"内存泄漏检测压力测试\"],\"duration\":118,\"failureDetails\":[{\"matcherResult\":{\"message\":\"expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\",\"pass\":false}}],\"failureMessages\":[\"Error: expect(received).toBeGreaterThan(expected)\\n\\nExpected: > 10\\nReceived:   1\\n    at Object.<anonymous> (/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:327:36)\"],\"fullName\":\"内存泄漏检测压力测试 应该能检测故意的内存泄漏\",\"invocations\":1,\"location\":null,\"numPassingAsserts\":0,\"retryReasons\":[],\"status\":\"failed\",\"title\":\"应该能检测故意的内存泄漏\"}],\"endTime\":1755055383530,\"message\":\"  ● 内存泄漏检测压力测试 › 应该能检测正常内存使用（无泄漏）\\n\\n    expect(received).toBeGreaterThan(expected)\\n\\n    Expected: > 10\\n    Received:   1\\n\\n      300 |     expect(result.leakAnalysis.detected).toBe(false);\\n      301 |     expect(result.stabilityScore).toBeGreaterThan(70);\\n    > 302 |     expect(result.totalOperations).toBeGreaterThan(10);\\n          |                                    ^\\n      303 |     expect(result.memoryEfficiency).toBeGreaterThan(0);\\n      304 |     \\n      305 |     console.log(`\\\\n✅ 正常内存使用测试完成:`);\\n\\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:302:36)\\n\\n  ● 内存泄漏检测压力测试 › 应该能检测故意的内存泄漏\\n\\n    expect(received).toBeGreaterThan(expected)\\n\\n    Expected: > 10\\n    Received:   1\\n\\n      325 |     \\n      326 |     // 故意泄漏应该被检测到\\n    > 327 |     expect(result.totalOperations).toBeGreaterThan(10);\\n          |                                    ^\\n      328 |     \\n      329 |     // 宽松的验证：至少有一些内存增长\\n      330 |     expect(result.leakAnalysis.growthRate).toBeGreaterThan(0);\\n\\n      at Object.<anonymous> (tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts:327:36)\\n\",\"name\":\"/home/share/samba/vscode-extension/pico-logicanalyzer/tests/stress/data-processing/scenarios/MemoryLeakDetection.stress.test.ts\",\"startTime\":1755055380774,\"status\":\"failed\",\"summary\":\"\"}],\"wasInterrupted\":false}\n"
      }
    ],
    "totalStressTests": 3
  }
}