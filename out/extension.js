(()=>{"use strict";var e={3:e=>{e.exports=require("path")},12:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LACEditorProvider=void 0;const n=r(635),i=n.__importStar(r(398)),s=n.__importStar(r(3));class o{static register(e){const t=new o(e);return i.window.registerCustomEditorProvider(o.viewType,t)}constructor(e){this.context=e}async resolveCustomTextEditor(e,t,r){t.webview.options={enableScripts:!0,localResourceRoots:[i.Uri.joinPath(this.context.extensionUri,"out","webview")]},t.webview.html=this.getHtmlForWebview(t.webview,e),t.webview.onDidReceiveMessage(async r=>{switch(r.type){case"ready":await this.sendDocumentToWebview(t.webview,e);break;case"save":await this.saveLACFile(e,r.data);break;case"load":try{const r=this.parseLACFile(e.getText());await this.sendDocumentToWebview(t.webview,e),await t.webview.postMessage({type:"documentLoaded",data:r})}catch(e){console.error("加载文档失败:",e),i.window.showErrorMessage(`加载文件失败: ${e}`);try{await t.webview.postMessage({type:"error",message:`加载文件失败: ${e}`})}catch(e){console.error("发送错误消息失败:",e)}}break;case"export":await this.exportData(r.data);break;case"startCapture":i.commands.executeCommand("logicAnalyzer.startCapture");break;case"connectDevice":i.commands.executeCommand("logicAnalyzer.connectDevice");break;case"testMessage":console.log("收到来自webview的测试消息:",r.data),i.window.showInformationMessage(`通信测试成功！收到消息: ${r.data.message}`);try{await t.webview.postMessage({type:"testResponse",data:{timestamp:(new Date).toISOString(),message:"来自VSCode扩展的回复消息",receivedAt:r.data.timestamp}})}catch(e){console.error("发送测试回复消息失败:",e)}break;default:console.warn("未知的webview消息类型:",r.type)}});const n=i.workspace.onDidChangeTextDocument(r=>{r.document.uri.toString()===e.uri.toString()&&this.sendDocumentToWebview(t.webview,e)});t.onDidDispose(()=>{n.dispose()})}getHtmlForWebview(e,t){const r=e.asWebviewUri(i.Uri.joinPath(this.context.extensionUri,"out","webview","main.js")),n=e.asWebviewUri(i.Uri.joinPath(this.context.extensionUri,"out","webview","style.css")),o=function(){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let r=0;r<32;r++)e+=t.charAt(Math.floor(62*Math.random()));return e}();return`<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${o}';">\n    <title>Logic Analyzer - ${s.basename(t.uri.fsPath)}</title>\n    <link href="${n}" rel="stylesheet">\n</head>\n<body>\n    <div id="app">\n        \x3c!-- Vue应用挂载点 --\x3e\n        <div class="loading">\n            <div class="spinner"></div>\n            <p>正在加载逻辑分析器界面...</p>\n        </div>\n    </div>\n    \n    <script nonce="${o}">\n        // 传递VSCode API给Vue应用\n        window.vscode = acquireVsCodeApi();\n        window.documentData = {\n            uri: '${t.uri.toString()}',\n            fileName: '${s.basename(t.uri.fsPath)}',\n            content: ${JSON.stringify(t.getText())}\n        };\n    <\/script>\n    <script nonce="${o}" src="${r}"><\/script>\n</body>\n</html>`}async sendDocumentToWebview(e,t){try{const r=this.parseLACFile(t.getText());try{await e.postMessage({type:"documentUpdate",data:r})}catch(e){console.error("发送文档更新消息失败:",e)}}catch(t){console.error("解析.lac文件失败:",t);try{await e.postMessage({type:"error",message:`解析文件失败: ${t}`})}catch(e){console.error("发送错误消息失败:",e)}}}parseLACFile(e){try{return JSON.parse(e)}catch(e){throw new Error("无效的.lac文件格式")}}async saveLACFile(e,t){try{const r=new i.WorkspaceEdit,n=JSON.stringify(t,null,2);r.replace(e.uri,new i.Range(0,0,e.lineCount,0),n),await i.workspace.applyEdit(r),i.window.showInformationMessage("文件保存成功")}catch(e){i.window.showErrorMessage(`保存文件失败: ${e}`)}}async exportData(e){try{const e={defaultUri:i.Uri.file("capture_export.csv"),filters:{CSV文件:["csv"],JSON文件:["json"],所有文件:["*"]}},t=await i.window.showSaveDialog(e);t&&i.window.showInformationMessage(`数据已导出到: ${t.fsPath}`)}catch(e){i.window.showErrorMessage(`导出数据失败: ${e}`)}}}t.LACEditorProvider=o,o.viewType="logicAnalyzer.lacEditor"},24:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RigolSiglentDriver=void 0;const n=r(278),i=r(876),s=r(163);class o extends i.AnalyzerDriverBase{get deviceVersion(){return this._version}get channelCount(){return this._channelCount}get maxFrequency(){return this._maxFrequency}get blastFrequency(){return this._blastFrequency}get bufferSize(){return this._bufferSize}get isNetwork(){return this._isNetwork}get isCapturing(){return this._capturing}get driverType(){return this._isNetwork?s.AnalyzerDriverType.Network:s.AnalyzerDriverType.Serial}constructor(e){if(super(),this._capturing=!1,this._isNetwork=!0,this._version=null,this._channelCount=16,this._maxFrequency=1e9,this._blastFrequency=2e9,this._bufferSize=56e6,this._manufacturer="unknown",this._socket=void 0,this._isConnected=!1,this._commandQueue=[],this._isProcessingCommand=!1,!e)throw new Error("连接字符串不能为空");if(e.includes(":")){const t=e.split(":");this._host=t[0],this._port=parseInt(t[1],10)}else this._host=e,this._port=o.SCPI_PORT}async connect(e){try{return await this.initializeSocket(),await this.queryDeviceInfo(),await this.initializeLogicAnalyzer(),this._isConnected=!0,{success:!0,deviceInfo:{name:this._version||"Rigol/Siglent Logic Analyzer",version:this._version??void 0,type:this.driverType,connectionPath:`${this._host}:${this._port}`,isNetwork:this._isNetwork,capabilities:this.buildCapabilities()}}}catch(e){return{success:!1,error:e instanceof Error?e.message:"连接失败"}}}async disconnect(){this._isConnected=!1,this._socket&&(this._socket.destroy(),this._socket=void 0),this._commandQueue=[],this._isProcessingCommand=!1}async getStatus(){try{const e=await this.sendSCPICommand("SYST:ERR?");return{isConnected:this._isConnected,isCapturing:this._capturing,batteryVoltage:"N/A",lastError:'+0,"No error"'!==e?e:void 0}}catch(e){return{isConnected:this._isConnected,isCapturing:this._capturing,batteryVoltage:"N/A",lastError:e instanceof Error?e.message:"状态查询失败"}}}async startCapture(e,t){if(this._capturing)return s.CaptureError.Busy;if(!this._isConnected||!this._socket)return s.CaptureError.HardwareError;try{return this._capturing=!0,await this.configureLogicAnalyzer(e),await this.startSCPICapture(),t&&this.once("captureCompleted",t),this.monitorCaptureStatus(e),s.CaptureError.None}catch(e){return this._capturing=!1,console.error("Rigol/Siglent采集启动失败:",e),s.CaptureError.UnexpectedError}}async stopCapture(){if(!this._capturing)return!0;try{return await this.sendSCPICommand("LA:STOP"),this._capturing=!1,!0}catch(e){return console.error("停止Rigol/Siglent采集失败:",e),!1}}async enterBootloader(){return!1}async initializeSocket(){return new Promise((e,t)=>{this._socket=new n.Socket,this._socket.connect(this._port,this._host,()=>{console.log(`已连接到Rigol/Siglent设备: ${this._host}:${this._port}`),e()}),this._socket.on("error",e=>{t(new Error(`Socket连接失败: ${e.message}`))}),this._socket.on("close",()=>{this._isConnected=!1,console.log("Rigol/Siglent连接已关闭")}),this._socket.on("data",e=>{this.handleIncomingData(e)})})}async queryDeviceInfo(){try{const e=await this.sendSCPICommand("*IDN?");this.parseIDNResponse(e),await this.queryLogicAnalyzerCapabilities()}catch(e){throw new Error(`查询设备信息失败: ${e}`)}}parseIDNResponse(e){const t=e.split(",");if(t.length>=4){const e=t[0].toLowerCase(),r=t[1],n=t[3];this._version=`${t[0]} ${r} (${n})`,e.includes("rigol")?this._manufacturer="rigol":e.includes("siglent")&&(this._manufacturer="siglent"),this.setModelCapabilities(r)}}setModelCapabilities(e){const t=e.toLowerCase();t.includes("ds1000z")||t.includes("ds2000")||t.includes("ds4000")?(this._channelCount=16,this._maxFrequency=1e9,this._blastFrequency=2e9,this._bufferSize=56e6):t.includes("sds")||t.includes("sps")?(this._channelCount=16,this._maxFrequency=1e9,this._blastFrequency=2e9,this._bufferSize=1e8):(this._channelCount=16,this._maxFrequency=5e8,this._blastFrequency=1e9,this._bufferSize=28e6)}async queryLogicAnalyzerCapabilities(){try{const e=await this.sendSCPICommand("LA:STAT?");e.includes("1")||e.toLowerCase().includes("on")||console.warn("逻辑分析器功能可能不可用或未激活");try{const e=(await this.sendSCPICommand("LA:CHAN?")).match(/\\d+/);e&&(this._channelCount=parseInt(e[0],10))}catch(e){console.warn("无法查询逻辑分析器通道数:",e)}try{const e=(await this.sendSCPICommand("LA:SRAT:MAX?")).match(/([0-9.]+)[E]?([+-]?[0-9]+)?/);if(e){const t=parseFloat(e[1]),r=e[2]?parseInt(e[2],10):0;this._maxFrequency=t*Math.pow(10,r)}}catch(e){console.warn("无法查询最大采样率:",e)}try{const e=(await this.sendSCPICommand("LA:MDEP?")).match(/([0-9.]+)[E]?([+-]?[0-9]+)?/);if(e){const t=parseFloat(e[1]),r=e[2]?parseInt(e[2],10):0;this._bufferSize=t*Math.pow(10,r)}}catch(e){console.warn("无法查询内存深度:",e)}}catch(e){console.warn("查询逻辑分析器能力失败:",e)}}async initializeLogicAnalyzer(){try{await this.sendSCPICommand("LA:RST"),await this.sendSCPICommand("LA:STAT ON"),await new Promise(e=>setTimeout(e,1e3))}catch(e){console.warn("初始化逻辑分析器失败:",e)}}async configureLogicAnalyzer(e){try{await this.sendSCPICommand(`LA:SRAT ${e.frequency}`);const t=e.preTriggerSamples+e.postTriggerSamples;await this.sendSCPICommand(`LA:MDEP ${t}`);for(const t of e.captureChannels){const e=t.channelNumber+1;await this.sendSCPICommand(`LA:D${e}:DISP ON`),t.channelName&&await this.sendSCPICommand(`LA:D${e}:LAB "${t.channelName}"`)}void 0!==e.triggerType&&void 0!==e.triggerChannel&&await this.configureTrigger(e);const r=t/e.frequency;await this.sendSCPICommand(`LA:SCAL ${r}`)}catch(e){throw new Error(`配置逻辑分析器失败: ${e}`)}}async configureTrigger(e){const t=e.triggerChannel+1;try{await this.sendSCPICommand(`LA:TRIG:SOUR D${t}`);let r="POS";switch(e.triggerInverted&&(r="NEG"),await this.sendSCPICommand(`LA:TRIG:SLOP ${r}`),e.triggerType){case 0:default:await this.sendSCPICommand("LA:TRIG:TYP EDGE");break;case 1:if(await this.sendSCPICommand("LA:TRIG:TYP PATT"),void 0!==e.triggerPattern){const t=e.triggerPattern.toString(2).padStart(16,"0");await this.sendSCPICommand(`LA:TRIG:PATT:DATA "${t}"`)}}if(e.preTriggerSamples>0){const t=e.preTriggerSamples/(e.preTriggerSamples+e.postTriggerSamples);await this.sendSCPICommand("LA:TRIG:POS "+100*t)}}catch(e){console.warn("配置触发失败:",e)}}async startSCPICapture(){try{await this.sendSCPICommand("*CLS"),await this.sendSCPICommand("LA:RUN"),console.log("Rigol/Siglent逻辑分析器采集已启动")}catch(e){throw new Error(`启动采集失败: ${e}`)}}async monitorCaptureStatus(e){const t=setInterval(async()=>{try{if(!this._capturing)return void clearInterval(t);const r=await this.sendSCPICommand("LA:STAT?");(r.includes("STOP")||r.includes("0"))&&(clearInterval(t),await this.processCaptureResults(e))}catch(r){clearInterval(t),this.handleCaptureError(e,`监控采集状态失败: ${r}`)}},500);setTimeout(()=>{this._capturing&&(clearInterval(t),this.handleCaptureError(e,"采集超时"))},6e4)}async processCaptureResults(e){try{for(const t of e.captureChannels){const e=`LA:D${t.channelNumber+1}:DATA?`,r=await this.sendSCPICommand(e);t.samples=this.parseSCPIBinaryData(r)}this._capturing=!1;const t={success:!0,session:e};this.emitCaptureCompleted(t)}catch(t){this.handleCaptureError(e,`处理采集结果失败: ${t}`)}}parseSCPIBinaryData(e){if(e.startsWith("#")){const t=parseInt(e[1],10),r=parseInt(e.substring(2,2+t),10),n=2+t,i=e.substring(n,n+r),s=new Uint8Array(i.length);for(let e=0;e<i.length;e++)s[e]=0!==i.charCodeAt(e)?1:0;return s}const t=e.split(",").map(e=>parseInt(e.trim(),10)),r=new Uint8Array(t.length);for(let e=0;e<t.length;e++)r[e]=t[e]?1:0;return r}handleCaptureError(e,t){this._capturing=!1,console.error("Rigol/Siglent采集错误:",t);const r={success:!1,session:e};this.emitCaptureCompleted(r)}async sendSCPICommand(e){return new Promise((t,r)=>{this._commandQueue.push({command:e,resolve:t,reject:r}),this.processCommandQueue()})}async processCommandQueue(){if(this._isProcessingCommand||0===this._commandQueue.length)return;this._isProcessingCommand=!0;const{command:e,resolve:t,reject:r}=this._commandQueue.shift();try{if(!this._socket)return void r(new Error("Socket未连接"));let n="";const i=e.includes("?"),s=e=>{n+=e.toString(),n.includes("\\n")&&(this._socket.off("data",s),clearTimeout(o),t(n.trim()),this._isProcessingCommand=!1,setTimeout(()=>this.processCommandQueue(),10))},o=setTimeout(()=>{this._socket.off("data",s),r(new Error(`SCPI命令超时: ${e}`)),this._isProcessingCommand=!1,setTimeout(()=>this.processCommandQueue(),10)},5e3);i?this._socket.on("data",s):setTimeout(()=>{t("OK"),this._isProcessingCommand=!1,setTimeout(()=>this.processCommandQueue(),10)},100),this._socket.write(`${e}\\n`,e=>{e&&(i&&this._socket.off("data",s),clearTimeout(o),r(new Error(`发送SCPI命令失败: ${e.message}`)),this._isProcessingCommand=!1,setTimeout(()=>this.processCommandQueue(),10))})}catch(e){r(e),this._isProcessingCommand=!1,setTimeout(()=>this.processCommandQueue(),10)}}handleIncomingData(e){const t=e.toString();(t.includes("ERROR")||t.includes("FAIL"))&&console.warn("设备报告错误:",t)}buildCapabilities(){return{channels:{digital:this._channelCount,maxVoltage:5,inputImpedance:1e6},sampling:{maxRate:this._maxFrequency,minRate:this.minFrequency,supportedRates:[this._maxFrequency,this._blastFrequency],bufferSize:this._bufferSize,streamingSupport:!1},triggers:{types:[0,1,2],maxChannels:this._channelCount,patternWidth:16,sequentialSupport:!0,conditions:["rising","falling","high","low","change"]},connectivity:{interfaces:["ethernet","usb"],protocols:["scpi","vxi11"]},features:{signalGeneration:!1,powerSupply:!1,voltageMonitoring:!1,mathFunctions:!0,protocolDecoding:!0}}}dispose(){this.disconnect(),super.dispose()}}t.RigolSiglentDriver=o,o.SCPI_PORT=5555,o.VXI11_PORT=111},27:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SigrokAdapter=void 0;const n=r(317),i=r(383),s=r(3),o=r(366),a=r(876),c=r(163);class l extends a.AnalyzerDriverBase{get deviceVersion(){return this._version}get channelCount(){return this._channelCount}get maxFrequency(){return this._maxFrequency}get blastFrequency(){return this._blastFrequency}get bufferSize(){return this._bufferSize}get isNetwork(){return!1}get isCapturing(){return this._capturing}get driverType(){return c.AnalyzerDriverType.Serial}constructor(e="fx2lafw",t,r){super(),this._capturing=!1,this._version=null,this._channelCount=8,this._maxFrequency=24e6,this._blastFrequency=1e8,this._bufferSize=2e6,this._isConnected=!1,this._deviceDriver="",this._deviceId="",this._sigrokCliPath="sigrok-cli",this._tempDir="",this._currentProcess=null,this._deviceDriver=e,this._deviceId=t||"",this._sigrokCliPath=r||"sigrok-cli",this._tempDir=(0,s.join)((0,o.tmpdir)(),`sigrok-${Date.now()}`)}async connect(e){try{await this.checkSigrokCli();const e=await this.scanDevices();if(0===e.length)throw new Error("未发现支持的sigrok设备");const t=this.selectBestDevice(e);return this._deviceId=t.id,this._deviceDriver=t.driver,await this.queryDeviceInfo(),await i.promises.mkdir(this._tempDir,{recursive:!0}),this._isConnected=!0,{success:!0,deviceInfo:{name:this._version||`Sigrok ${this._deviceDriver}`,version:this._version??void 0,type:this.driverType,connectionPath:`${this._deviceDriver}:${this._deviceId}`,isNetwork:!1,capabilities:this.buildCapabilities()}}}catch(e){return{success:!1,error:e instanceof Error?e.message:"连接失败"}}}async disconnect(){this._isConnected=!1,this._currentProcess&&(this._currentProcess.kill("SIGTERM"),this._currentProcess=null);try{await i.promises.rm(this._tempDir,{recursive:!0,force:!0})}catch(e){console.warn("清理临时目录失败:",e)}}async getStatus(){return{isConnected:this._isConnected,isCapturing:this._capturing,batteryVoltage:"N/A"}}async startCapture(e,t){if(this._capturing)return c.CaptureError.Busy;if(!this._isConnected)return c.CaptureError.HardwareError;try{return this._capturing=!0,t&&this.once("captureCompleted",t),await this.startSigrokCapture(e),c.CaptureError.None}catch(e){return this._capturing=!1,console.error("sigrok采集启动失败:",e),c.CaptureError.UnexpectedError}}async stopCapture(){if(!this._capturing)return!0;try{return this._currentProcess&&(this._currentProcess.kill("SIGTERM"),this._currentProcess=null),this._capturing=!1,!0}catch(e){return console.error("停止sigrok采集失败:",e),!1}}async enterBootloader(){return!1}async checkSigrokCli(){return new Promise((e,t)=>{const r=(0,n.spawn)(this._sigrokCliPath,["--version"]);let i="";r.stdout.on("data",e=>{i+=e.toString()}),r.on("close",r=>{0===r?(console.log("sigrok-cli版本:",i.trim()),e()):t(new Error("sigrok-cli未安装或不可用。请安装sigrok软件包。"))}),r.on("error",e=>{t(new Error(`sigrok-cli执行失败: ${e.message}`))})})}async scanDevices(){return new Promise((e,t)=>{const r=(0,n.spawn)(this._sigrokCliPath,["--scan"]);let i="";r.stdout.on("data",e=>{i+=e.toString()}),r.on("close",r=>{if(0===r){const t=this.parseScanOutput(i);e(t)}else t(new Error("设备扫描失败"))}),r.on("error",e=>{t(new Error(`设备扫描执行失败: ${e.message}`))})})}parseScanOutput(e){const t=[],r=e.split("\\n");for(const e of r){const r=e.trim();if(!r||r.startsWith("The following"))continue;const n=r.match(/^([^:]+):([^-]+)\\s*-\\s*(.+)$/);if(n){const e=n[1].trim(),r=n[2].trim(),i=n[3].trim();t.push({id:r,driver:e,description:i})}}return t}selectBestDevice(e){if(this._deviceDriver){const t=e.find(e=>e.driver===this._deviceDriver);if(t)return t}if(this._deviceId){const t=e.find(e=>e.id.includes(this._deviceId));if(t)return t}return e[0]}async queryDeviceInfo(){try{const e=await this.runSigrokCommand(["--driver",this._deviceDriver,"--conn",this._deviceId,"--show"]);this.parseDeviceConfig(e);const t=l.SIGROK_DRIVERS.get(this._deviceDriver);t&&(this._version=t.name,this._channelCount=t.channels,this._maxFrequency=t.maxRate,this._blastFrequency=2*t.maxRate)}catch(e){console.warn("查询设备信息失败:",e)}}parseDeviceConfig(e){const t=e.split("\\n");for(const e of t){const t=e.trim();if(t.includes("channels:")){const e=t.match(/channels:\\s*(\\d+)/);e&&(this._channelCount=parseInt(e[1],10))}if(t.includes("samplerate:")){const e=t.match(/samplerate:\\s*([0-9.]+)\\s*([kMG]?Hz)/);if(e){let t=parseFloat(e[1]);switch(e[2]){case"kHz":t*=1e3;break;case"MHz":t*=1e6;break;case"GHz":t*=1e9}this._maxFrequency=t,this._blastFrequency=t}}if(t.includes("limit_samples:")){const e=t.match(/limit_samples:\\s*(\\d+)/);e&&(this._bufferSize=parseInt(e[1],10))}}}async startSigrokCapture(e){const t=(0,s.join)(this._tempDir,"capture.sr"),r=e.preTriggerSamples+e.postTriggerSamples,i=["--driver",this._deviceDriver,"--conn",this._deviceId,"--config",`samplerate=${e.frequency}`,"--samples",r.toString(),"--output-file",t,"--output-format","srzip"],o=e.captureChannels.map(e=>e.channelNumber).join(",");if(o&&i.push("--channels",o),void 0!==e.triggerType&&void 0!==e.triggerChannel){const t=this.buildTriggerConfig(e);t&&i.push("--triggers",t)}return console.log("启动sigrok采集:",this._sigrokCliPath,i.join(" ")),new Promise((r,s)=>{this._currentProcess=(0,n.spawn)(this._sigrokCliPath,i);let o="";this._currentProcess.stdout?.on("data",e=>{console.log("sigrok输出:",e.toString())}),this._currentProcess.stderr?.on("data",e=>{o+=e.toString()}),this._currentProcess.on("close",async n=>{if(this._currentProcess=null,0===n)try{await this.processSigrokResults(e,t),r()}catch(e){s(e)}else s(new Error(`sigrok采集失败 (代码 ${n}): ${o}`))}),this._currentProcess.on("error",e=>{this._currentProcess=null,s(new Error(`sigrok采集进程错误: ${e.message}`))})})}buildTriggerConfig(e){if(void 0===e.triggerChannel)return null;const t=e.triggerChannel;let r="";switch(e.triggerType){case 0:r=e.triggerInverted?`${t}=f`:`${t}=r`;break;case 1:void 0!==e.triggerPattern&&(r=e.triggerPattern.toString(2).padStart(16,"0").split("").map((e,t)=>"1"===e?`${t}=1`:"0"===e?`${t}=0`:"").filter(e=>e).join(","));break;default:r=`${t}=r`}return r}async processSigrokResults(e,t){try{const r=(0,s.join)(this._tempDir,"capture.csv");await this.convertSrToCSV(t,r);const n=(await i.promises.readFile(r,"utf-8")).split("\\n");if(n.length<2)throw new Error("采集数据为空");const o=n[0].split(",").map(e=>e.trim()),a=n.slice(1).filter(e=>e.trim());for(const t of e.captureChannels)t.samples=new Uint8Array(a.length);for(let t=0;t<a.length;t++){const r=a[t].split(",");for(const n of e.captureChannels){const e=`D${n.channelNumber}`,i=o.indexOf(e);if(i>=0&&i<r.length){const e=r[i].trim();n.samples[t]="1"===e?1:0}}}this._capturing=!1;const c={success:!0,session:e};this.emitCaptureCompleted(c)}catch(t){this.handleCaptureError(e,`处理sigrok结果失败: ${t}`)}}async convertSrToCSV(e,t){return new Promise((r,i)=>{const s=(0,n.spawn)(this._sigrokCliPath,["--input-file",e,"--output-file",t,"--output-format","csv"]);s.on("close",e=>{0===e?r():i(new Error(`转换为CSV失败 (代码 ${e})`))}),s.on("error",e=>{i(new Error(`CSV转换进程错误: ${e.message}`))})})}handleCaptureError(e,t){this._capturing=!1,console.error("sigrok采集错误:",t);const r={success:!1,session:e};this.emitCaptureCompleted(r)}async runSigrokCommand(e){return new Promise((t,r)=>{const i=(0,n.spawn)(this._sigrokCliPath,e);let s="",o="";i.stdout.on("data",e=>{s+=e.toString()}),i.stderr.on("data",e=>{o+=e.toString()}),i.on("close",e=>{0===e?t(s):r(new Error(`sigrok命令失败 (代码 ${e}): ${o}`))}),i.on("error",e=>{r(new Error(`sigrok命令执行错误: ${e.message}`))})})}buildCapabilities(){return{channels:{digital:this._channelCount,maxVoltage:5,inputImpedance:1e6},sampling:{maxRate:this._maxFrequency,minRate:this.minFrequency,supportedRates:[this._maxFrequency,this._blastFrequency],bufferSize:this._bufferSize,streamingSupport:!1},triggers:{types:[0,1],maxChannels:this._channelCount,patternWidth:this._channelCount,sequentialSupport:!1,conditions:["rising","falling","high","low","change"]},connectivity:{interfaces:["usb","serial"],protocols:["sigrok"]},features:{signalGeneration:!1,powerSupply:!1,voltageMonitoring:!1,protocolDecoding:!0}}}static getSupportedDevices(){return Array.from(l.SIGROK_DRIVERS.entries()).map(([e,t])=>({driver:e,name:t.name,channels:t.channels,maxRate:t.maxRate}))}dispose(){this.disconnect(),super.dispose()}}t.SigrokAdapter=l,l.SIGROK_DRIVERS=new Map([["fx2lafw",{name:"FX2 Logic Analyzer",channels:16,maxRate:24e6}],["saleae-logic16",{name:"Saleae Logic16",channels:16,maxRate:1e8}],["openbench-logic-sniffer",{name:"OpenBench Logic Sniffer",channels:32,maxRate:2e8}],["kingst-la2016",{name:"Kingst LA2016",channels:16,maxRate:2e8}],["hantek-6022be",{name:"Hantek 6022BE",channels:2,maxRate:48e6}],["rigol-ds",{name:"Rigol DS Series",channels:16,maxRate:1e9}],["siglent-sds",{name:"Siglent SDS Series",channels:16,maxRate:1e9}],["tek-mso",{name:"Tektronix MSO Series",channels:16,maxRate:25e8}],["lecroy-logicstudio",{name:"LeCroy LogicStudio",channels:16,maxRate:5e8}],["chronovu-la",{name:"ChronoVu LA Series",channels:32,maxRate:2e8}],["ikalogic-scanalogic2",{name:"Ikalogic Scanalogic-2",channels:4,maxRate:2e7}],["link-mso19",{name:"Link MSO-19",channels:16,maxRate:2e8}],["zeroplus-logic-cube",{name:"Zeroplus Logic Cube",channels:16,maxRate:2e8}]])},69:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NetworkLogicAnalyzerDriver=void 0;const n=r(278),i=r(194),s=r(876),o=r(163);var a,c;!function(e){e.TCP="tcp",e.UDP="udp",e.HTTP="http",e.WEBSOCKET="websocket"}(a||(a={})),function(e){e.BINARY="binary",e.JSON="json",e.CSV="csv",e.RAW="raw"}(c||(c={}));class l extends s.AnalyzerDriverBase{get deviceVersion(){return this._version}get channelCount(){return this._channelCount}get maxFrequency(){return this._maxFrequency}get blastFrequency(){return this._blastFrequency}get bufferSize(){return this._bufferSize}get isNetwork(){return!0}get isCapturing(){return this._capturing}get driverType(){return o.AnalyzerDriverType.Network}constructor(e,t,r=a.TCP,n=c.JSON,i){super(),this._capturing=!1,this._version=null,this._channelCount=8,this._maxFrequency=4e7,this._blastFrequency=8e7,this._bufferSize=8e6,this._tcpSocket=void 0,this._udpSocket=void 0,this._isConnected=!1,this._deviceConfig={},this._authToken="",this._host=e,this._port=t,this._protocol=r,this._dataFormat=n,this._authToken=i||""}async connect(e){try{switch(this._protocol){case a.TCP:case a.HTTP:await this.initializeTCP();break;case a.UDP:await this.initializeUDP();break;case a.WEBSOCKET:await this.initializeWebSocket();break;default:throw new Error(`不支持的协议类型: ${this._protocol}`)}return await this.performHandshake(),await this.queryDeviceInfo(),this._isConnected=!0,{success:!0,deviceInfo:{name:this._version||"Network Logic Analyzer",version:this._version??void 0,type:this.driverType,connectionPath:`${this._protocol}://${this._host}:${this._port}`,isNetwork:!0,capabilities:this.buildCapabilities()}}}catch(e){return{success:!1,error:e instanceof Error?e.message:"连接失败"}}}async disconnect(){this._isConnected=!1,this._tcpSocket&&(this._tcpSocket.destroy(),this._tcpSocket=void 0),this._udpSocket&&(this._udpSocket.close(),this._udpSocket=void 0)}async getStatus(){try{const e=await this.sendNetworkCommand({command:"GET_STATUS",timestamp:Date.now()});return{isConnected:this._isConnected,isCapturing:this._capturing,batteryVoltage:e.battery_voltage||"N/A",temperature:e.temperature,lastError:e.last_error}}catch(e){return{isConnected:this._isConnected,isCapturing:this._capturing,batteryVoltage:"N/A",lastError:e instanceof Error?e.message:"状态查询失败"}}}async startCapture(e,t){if(this._capturing)return o.CaptureError.Busy;if(!this._isConnected)return o.CaptureError.HardwareError;try{this._capturing=!0,t&&this.once("captureCompleted",t);const r=this.buildCaptureConfig(e),n=await this.sendNetworkCommand({command:"START_CAPTURE",config:r,timestamp:Date.now()});if(!n.success)throw new Error(n.error||"采集启动失败");return this.monitorCaptureProgress(e,n.capture_id),o.CaptureError.None}catch(e){return this._capturing=!1,console.error("网络采集启动失败:",e),o.CaptureError.UnexpectedError}}async stopCapture(){if(!this._capturing)return!0;try{return await this.sendNetworkCommand({command:"STOP_CAPTURE",timestamp:Date.now()}),this._capturing=!1,!0}catch(e){return console.error("停止网络采集失败:",e),!1}}async enterBootloader(){try{return!0===(await this.sendNetworkCommand({command:"ENTER_BOOTLOADER",timestamp:Date.now()})).success}catch(e){return console.error("进入引导加载程序失败:",e),!1}}async sendNetworkConfig(e,t,r,n){try{return!0===(await this.sendNetworkCommand({command:"SET_NETWORK_CONFIG",config:{ssid:e,password:t,ip_address:r,port:n},timestamp:Date.now()})).success}catch(e){return console.error("发送网络配置失败:",e),!1}}async getVoltageStatus(){try{return(await this.sendNetworkCommand({command:"GET_VOLTAGE",timestamp:Date.now()})).voltage||"N/A"}catch(e){return console.error("获取电压状态失败:",e),"ERROR"}}async initializeTCP(){return new Promise((e,t)=>{this._tcpSocket=new n.Socket,this._tcpSocket.connect(this._port,this._host,()=>{console.log(`TCP连接已建立: ${this._host}:${this._port}`),e()}),this._tcpSocket.on("error",e=>{t(new Error(`TCP连接失败: ${e.message}`))}),this._tcpSocket.on("close",()=>{this._isConnected=!1,console.log("TCP连接已关闭")})})}async initializeUDP(){return new Promise((e,t)=>{this._udpSocket=(0,i.createSocket)("udp4"),this._udpSocket.bind(0,()=>{console.log(`UDP套接字已创建，目标: ${this._host}:${this._port}`),e()}),this._udpSocket.on("error",e=>{t(new Error(`UDP连接失败: ${e.message}`))}),this._udpSocket.on("close",()=>{this._isConnected=!1,console.log("UDP连接已关闭")})})}async initializeWebSocket(){return new Promise((e,t)=>{try{console.log(`WebSocket连接: ws://${this._host}:${this._port}`),e()}catch(e){t(new Error(`WebSocket连接失败: ${e}`))}})}async performHandshake(){const e={command:"HANDSHAKE",version:"1.0",client_type:"vscode-logic-analyzer",auth_token:this._authToken,timestamp:Date.now()},t=await this.sendNetworkCommand(e);if(!t.success)throw new Error(`握手失败: ${t.error||"未知错误"}`);console.log("设备握手成功")}async queryDeviceInfo(){const e=await this.sendNetworkCommand({command:"GET_DEVICE_INFO",timestamp:Date.now()});if(e.device_info){const t=e.device_info;this._version=t.version||"Unknown Network Device",this._channelCount=t.channels||8,this._maxFrequency=t.max_frequency||4e7,this._blastFrequency=t.blast_frequency||2*this._maxFrequency,this._bufferSize=t.buffer_size||8e6,this._deviceConfig=t.config||{}}}buildCaptureConfig(e){return{channels:e.captureChannels.map(e=>({number:e.channelNumber,name:e.channelName,enabled:!0})),sample_rate:e.frequency,pre_trigger_samples:e.preTriggerSamples,post_trigger_samples:e.postTriggerSamples,trigger:{type:e.triggerType,channel:e.triggerChannel,inverted:e.triggerInverted,pattern:e.triggerPattern,bit_count:e.triggerBitCount},loop_count:e.loopCount,measure_bursts:e.measureBursts,data_format:this._dataFormat}}async monitorCaptureProgress(e,t){const r=setInterval(async()=>{try{if(!this._capturing)return void clearInterval(r);const n=await this.sendNetworkCommand({command:"GET_CAPTURE_STATUS",capture_id:t,timestamp:Date.now()});"COMPLETED"===n.status?(clearInterval(r),await this.processCaptureResults(e,t)):"ERROR"===n.status?(clearInterval(r),this.handleCaptureError(e,n.error_message)):void 0!==n.progress&&console.log(`采集进度: ${n.progress}%`)}catch(t){clearInterval(r),this.handleCaptureError(e,`监控采集进度失败: ${t}`)}},200);setTimeout(()=>{this._capturing&&(clearInterval(r),this.handleCaptureError(e,"采集超时"))},3e5)}async processCaptureResults(e,t){try{const r=await this.sendNetworkCommand({command:"GET_CAPTURE_DATA",capture_id:t,format:this._dataFormat,timestamp:Date.now()});if(!r.success)throw new Error(r.error||"获取采集数据失败");this.parseNetworkCaptureData(e,r),this._capturing=!1;const n={success:!0,session:e};this.emitCaptureCompleted(n)}catch(t){this.handleCaptureError(e,`处理采集结果失败: ${t}`)}}parseNetworkCaptureData(e,t){switch(this._dataFormat){case c.JSON:this.parseJSONData(e,t.data);break;case c.BINARY:this.parseBinaryData(e,t.data);break;case c.CSV:this.parseCSVData(e,t.data);break;case c.RAW:this.parseRawData(e,t.data);break;default:throw new Error(`不支持的数据格式: ${this._dataFormat}`)}}parseJSONData(e,t){if(t.channels&&Array.isArray(t.channels))for(let r=0;r<e.captureChannels.length;r++){const n=e.captureChannels[r],i=t.channels.find(e=>e.number===n.channelNumber);i&&i.samples&&(n.samples=new Uint8Array(i.samples))}t.bursts&&Array.isArray(t.bursts)&&(e.bursts=t.bursts)}parseBinaryData(e,t){const r=Buffer.from(t,"base64"),n=r.length/e.captureChannels.length;for(let t=0;t<e.captureChannels.length;t++){const i=e.captureChannels[t];i.samples=new Uint8Array(n);for(let s=0;s<n;s++){const n=s*e.captureChannels.length+t;i.samples[s]=r[n]}}}parseCSVData(e,t){const r=t.split("\\n");if(r.length<2)return;const n=r[0].split(",").map(e=>e.trim()),i=r.slice(1).filter(e=>e.trim());for(const t of e.captureChannels)t.samples=new Uint8Array(i.length);for(let t=0;t<i.length;t++){const r=i[t].split(",");for(const i of e.captureChannels){const e=`CH${i.channelNumber}`,s=n.indexOf(e);if(s>=0&&s<r.length){const e=r[s].trim();i.samples[t]="1"===e?1:0}}}}parseRawData(e,t){if(Array.isArray(t)&&t.length>=e.captureChannels.length)for(let r=0;r<e.captureChannels.length;r++){const n=e.captureChannels[r];Array.isArray(t[r])&&(n.samples=new Uint8Array(t[r]))}}handleCaptureError(e,t){this._capturing=!1,console.error("网络采集错误:",t);const r={success:!1,session:e};this.emitCaptureCompleted(r)}async sendNetworkCommand(e){return new Promise((t,r)=>{const n=JSON.stringify(e);this._protocol===a.TCP&&this._tcpSocket?this.sendTCPCommand(n,t,r):this._protocol===a.UDP&&this._udpSocket?this.sendUDPCommand(n,t,r):r(new Error("无效的网络连接"))})}sendTCPCommand(e,t,r){let n="";const i=e=>{if(n+=e.toString(),n.includes("\\n")){this._tcpSocket.off("data",i),clearTimeout(s);try{const e=JSON.parse(n.trim());t(e)}catch(e){r(new Error(`解析响应失败: ${e}`))}}},s=setTimeout(()=>{this._tcpSocket.off("data",i),r(new Error("网络命令超时"))},1e4);this._tcpSocket.on("data",i),this._tcpSocket.write(`${e}\\n`,e=>{e&&(clearTimeout(s),r(new Error(`发送TCP命令失败: ${e.message}`)))})}sendUDPCommand(e,t,r){const n=(e,s)=>{this._udpSocket.off("message",n),clearTimeout(i);try{const r=JSON.parse(e.toString());t(r)}catch(e){r(new Error(`解析UDP响应失败: ${e}`))}},i=setTimeout(()=>{this._udpSocket.off("message",n),r(new Error("UDP命令超时"))},1e4);this._udpSocket.on("message",n),this._udpSocket.send(e,this._port,this._host,e=>{e&&(clearTimeout(i),r(new Error(`发送UDP命令失败: ${e.message}`)))})}buildCapabilities(){return{channels:{digital:this._channelCount,maxVoltage:5,inputImpedance:1e6},sampling:{maxRate:this._maxFrequency,minRate:this.minFrequency,supportedRates:[this._maxFrequency,this._blastFrequency],bufferSize:this._bufferSize,streamingSupport:!0},triggers:{types:[0,1,2,3],maxChannels:this._channelCount,patternWidth:16,sequentialSupport:!0,conditions:["rising","falling","high","low","change"]},connectivity:{interfaces:["ethernet","wifi"],protocols:[this._protocol]},features:{signalGeneration:this._deviceConfig.signal_generation||!1,powerSupply:this._deviceConfig.power_supply||!1,voltageMonitoring:this._deviceConfig.voltage_monitoring||!1,remoteControl:!0,firmwareUpdate:this._deviceConfig.firmware_update||!1}}}dispose(){this.disconnect(),super.dispose()}}t.NetworkLogicAnalyzerDriver=l},163:(e,t)=>{var r,n,i,s;Object.defineProperty(t,"__esModule",{value:!0}),t.TriggerDelays=t.TriggerType=t.CaptureError=t.CaptureMode=t.AnalyzerDriverType=void 0,(s=t.AnalyzerDriverType||(t.AnalyzerDriverType={})).Serial="Serial",s.Network="Network",s.Multi="Multi",s.Emulated="Emulated",s.Single="Single",(i=t.CaptureMode||(t.CaptureMode={}))[i.Channels_8=0]="Channels_8",i[i.Channels_16=1]="Channels_16",i[i.Channels_24=2]="Channels_24",(n=t.CaptureError||(t.CaptureError={})).None="None",n.Busy="Busy",n.BadParams="BadParams",n.HardwareError="HardwareError",n.UnexpectedError="UnexpectedError",(r=t.TriggerType||(t.TriggerType={}))[r.Edge=0]="Edge",r[r.Complex=1]="Complex",r[r.Fast=2]="Fast",r[r.Blast=3]="Blast",t.TriggerDelays={ComplexTriggerDelay:5,FastTriggerDelay:3}},180:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MultiAnalyzerDriver=void 0;const n=r(876),i=r(391),s=r(163);class o extends n.AnalyzerDriverBase{get deviceVersion(){return this._version}get channelCount(){return Math.min(...this._connectedDevices.map(e=>e.channelCount))*this._connectedDevices.length}get maxFrequency(){return Math.min(...this._connectedDevices.map(e=>e.maxFrequency))}get minFrequency(){return Math.max(...this._connectedDevices.map(e=>e.minFrequency))}get blastFrequency(){return 0}get bufferSize(){return Math.min(...this._connectedDevices.map(e=>e.bufferSize))}get isNetwork(){return!1}get isCapturing(){return this._capturing}get driverType(){return s.AnalyzerDriverType.Multi}constructor(e){if(super(),this._capturing=!1,this._version=null,this._connectedDevices=[],this._deviceCaptures=[],this._sourceSession=null,this._locker={},!e||e.length<2||e.length>5)throw new Error("无效的设备数量，必须提供2-5个连接字符串");this._connectedDevices=new Array(e.length),this.initializeDevices(e)}async initializeDevices(e){try{for(let t=0;t<e.length;t++)this._connectedDevices[t]=new i.LogicAnalyzerDriver(e[t]),this._connectedDevices[t].tag=t;for(const e of this._connectedDevices)e.on("captureCompleted",this.handleDeviceCaptureCompleted.bind(this))}catch(e){for(const e of this._connectedDevices)e&&e.dispose();throw new Error(`设备连接失败: ${e}`)}}async connect(e){try{const t=this._connectedDevices.map(t=>t.connect(e)),r=(await Promise.all(t)).filter(e=>!e.success);if(r.length>0)throw new Error(`设备连接失败: ${r.map(e=>e.error).join(", ")}`);this.validateDeviceVersions();const n=this._connectedDevices[0],i=this.parseVersion(n.deviceVersion);return this._version=`MULTI_ANALYZER_${i.major}_${i.minor}`,{success:!0,deviceInfo:{name:this._version,version:this._version,type:this.driverType,connectionPath:"Multi-Device",isNetwork:!1,capabilities:this.buildCapabilities()}}}catch(e){return{success:!1,error:e instanceof Error?e.message:"多设备连接失败"}}}validateDeviceVersions(){let e=null;for(let t=0;t<this._connectedDevices.length;t++){const r=this._connectedDevices[t],n=this.parseVersion(r.deviceVersion);if(!n.isValid)throw new Error(`设备 ${t} 版本无效: ${r.deviceVersion}`);if(null===e)e=n;else if(e.major!==n.major||e.minor!==n.minor)throw new Error(`设备版本不兼容。主设备版本: V${e.major}_${e.minor}, 设备 ${t} 版本: V${n.major}_${n.minor}`)}}parseVersion(e){if(!e)return{major:0,minor:0,isValid:!1};const t=e.match(/V(\d+)_(\d+)/);return t?{major:parseInt(t[1],10),minor:parseInt(t[2],10),isValid:!0}:{major:0,minor:0,isValid:!1}}async disconnect(){for(const e of this._connectedDevices)await e.disconnect()}async getStatus(){const e=await Promise.all(this._connectedDevices.map(e=>e.getStatus()));return{isConnected:e.every(e=>e.isConnected),isCapturing:this._capturing,batteryVoltage:"N/A",multiDeviceStatus:e}}async startCapture(e,t){if(e.triggerType===s.TriggerType.Edge)return s.CaptureError.BadParams;if(this._capturing)return s.CaptureError.Busy;if(!e.captureChannels||0===e.captureChannels.length)return s.CaptureError.BadParams;try{const r=this.validateCaptureParameters(e);if(r!==s.CaptureError.None)return r;const n=this.splitChannelsPerDevice(e.captureChannels.map(e=>e.channelNumber));if(n[0].length<1)return s.CaptureError.BadParams;const i=1e9/e.frequency,o=e.triggerType===s.TriggerType.Fast?s.TriggerDelays.FastTriggerDelay:s.TriggerDelays.ComplexTriggerDelay,a=Math.round(o/i+.3);this._deviceCaptures=new Array(this._connectedDevices.length);for(let e=0;e<this._deviceCaptures.length;e++)this._deviceCaptures[e]={completed:!1,session:null};this._currentCaptureHandler=t,this._sourceSession=e,this._capturing=!0;let c=1;for(let t=1;t<n.length;t++){const r=n[t];if(0===r.length){this._deviceCaptures[t].completed=!0;continue}const i=this.createSlaveSession(e,r,a);this._connectedDevices[t].tag=c;const o=await this._connectedDevices[t].startCapture(i);if(o!==s.CaptureError.None)return await this.stopCapture(),o;c++}this._connectedDevices[0].tag=0;const l=n[0],u=this.createMasterSession(e,l),h=await this._connectedDevices[0].startCapture(u);return h!==s.CaptureError.None?(await this.stopCapture(),h):s.CaptureError.None}catch(e){return this._capturing=!1,console.error("多设备采集启动失败:",e),s.CaptureError.UnexpectedError}}validateCaptureParameters(e){const t=e.captureChannels.map(e=>e.channelNumber),r=this.getLimits(t);return t.some(e=>e<0||e>=this.channelCount)||void 0!==e.triggerBitCount&&e.triggerBitCount<1||void 0!==e.triggerBitCount&&e.triggerBitCount>16||void 0!==e.triggerChannel&&(e.triggerChannel<0||e.triggerChannel>15)||e.preTriggerSamples<r.minPreSamples||e.postTriggerSamples<r.minPostSamples||e.preTriggerSamples>r.maxPreSamples||e.postTriggerSamples>r.maxPostSamples||e.preTriggerSamples+e.postTriggerSamples>r.maxTotalSamples||e.frequency<this.minFrequency||e.frequency>this.maxFrequency?s.CaptureError.BadParams:s.CaptureError.None}splitChannelsPerDevice(e){const t=[],r=Math.min(...this._connectedDevices.map(e=>e.channelCount));for(let n=0;n<this._connectedDevices.length;n++){const i=n*r,s=(n+1)*r,o=e.filter(e=>e>=i&&e<s).map(e=>e-i);t.push(o)}return t}createSlaveSession(e,t,r){return{...e,captureChannels:t.map(e=>({channelNumber:e,channelName:`Channel ${e+1}`,hidden:!1})),triggerChannel:24,triggerType:s.TriggerType.Edge,preTriggerSamples:e.preTriggerSamples+r,postTriggerSamples:e.postTriggerSamples-r,loopCount:0,measureBursts:!1,triggerInverted:!1}}createMasterSession(e,t){return{...e,captureChannels:t.map(e=>({channelNumber:e,channelName:`Channel ${e+1}`,hidden:!1}))}}async stopCapture(){if(!this._capturing)return!0;try{const e=this._connectedDevices.map(e=>e.stopCapture());return await Promise.all(e),this._capturing=!1,!0}catch(e){return console.error("停止多设备采集失败:",e),!1}}async enterBootloader(){if(this._capturing)return!1;try{return(await Promise.all(this._connectedDevices.map(e=>e.enterBootloader()))).every(e=>!0===e)}catch(e){return console.error("进入引导加载程序失败:",e),!1}}handleDeviceCaptureCompleted(e){if(!this._capturing||!this._sourceSession)return;if(!e.success)return void this.stopCapture().then(()=>{this._deviceCaptures=[];const e={success:!1,session:this._sourceSession};this._currentCaptureHandler?this._currentCaptureHandler(e):this.emitCaptureCompleted(e)});const t=e.session.deviceTag||0;this._deviceCaptures[t].session=e.session,this._deviceCaptures[t].completed=!0,this._deviceCaptures.every(e=>e.completed)&&this.combineDeviceResults()}combineDeviceResults(){if(!this._sourceSession)return;const e=Math.min(...this._connectedDevices.map(e=>e.channelCount));for(let t=0;t<this._deviceCaptures.length;t++){const r=this._deviceCaptures[t];if(r.session)for(const n of r.session.captureChannels){const r=n.channelNumber+t*e,i=this._sourceSession.captureChannels.find(e=>e.channelNumber===r);i&&(i.samples=n.samples)}}this._capturing=!1;const t={success:!0,session:this._sourceSession};this._currentCaptureHandler?this._currentCaptureHandler(t):this.emitCaptureCompleted(t)}getCaptureMode(e){const t=this.splitChannelsPerDevice(e).map(e=>Math.max(...e,0)).reduce((e,t)=>Math.max(e,t),0);return t<8?s.CaptureMode.Channels_8:t<16?s.CaptureMode.Channels_16:s.CaptureMode.Channels_24}getLimits(e){const t=this.splitChannelsPerDevice(e),r=this._connectedDevices.map((e,r)=>e.getLimits(t[r]||[])),n=Math.max(...r.map(e=>e.minPreSamples)),i=Math.min(...r.map(e=>e.maxPreSamples)),s=Math.max(...r.map(e=>e.minPostSamples)),o=Math.min(...r.map(e=>e.maxPostSamples));return{minPreSamples:n,maxPreSamples:i,minPostSamples:s,maxPostSamples:o,get maxTotalSamples(){return i+o}}}async sendNetworkConfig(e,t,r,n){return!1}async getVoltageStatus(){return"UNSUPPORTED"}buildCapabilities(){return{channels:{digital:this.channelCount,maxVoltage:5,inputImpedance:1e6},sampling:{maxRate:this.maxFrequency,minRate:this.minFrequency,supportedRates:[this.maxFrequency],bufferSize:this.bufferSize,streamingSupport:!1},triggers:{types:[1,2],maxChannels:16,patternWidth:16,sequentialSupport:!0,conditions:["pattern","complex"]},connectivity:{interfaces:["multi-device"],protocols:["custom"]},features:{multiDevice:!0,synchronization:!0,maxDevices:5,totalChannels:this.channelCount}}}dispose(){for(const e of this._connectedDevices)e.dispose();super.dispose()}}t.MultiAnalyzerDriver=o},194:e=>{e.exports=require("dgram")},199:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DeviceConnectionException=t.VersionValidator=t.DeviceVersion=void 0;class r{constructor(e,t,r,n){this.major=e,this.minor=t,this.isValid=r,this.versionString=n}}t.DeviceVersion=r;class n{static getVersion(e){if(!e||"string"!=typeof e)return new r(0,0,!1,"");const t=e.trim(),n=t.match(/V(\d+)_(\d+)/i);if(!n||n.length<3){const e=t.match(/(\d+)\.(\d+)/);if(!e||e.length<3)return new r(0,0,!1,t);const n=parseInt(e[1],10),i=parseInt(e[2],10);if(isNaN(n)||isNaN(i))return new r(0,0,!1,t);const s=n>this.MAJOR_VERSION||n===this.MAJOR_VERSION&&i>=this.MINOR_VERSION;return new r(n,i,s,t)}const i=parseInt(n[1],10),s=parseInt(n[2],10);if(isNaN(i)||isNaN(s))return new r(0,0,!1,t);const o=i>this.MAJOR_VERSION||i===this.MAJOR_VERSION&&s>=this.MINOR_VERSION;return new r(i,s,o,t)}static isValidVersion(e){return this.getVersion(e).isValid}static getMinimumVersionString(){return`V${this.MAJOR_VERSION}_${this.MINOR_VERSION}`}static compareVersions(e,t){return e.major>t.major?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:0}}t.VersionValidator=n,n.MAJOR_VERSION=1,n.MINOR_VERSION=7;class i extends Error{constructor(e,t){super(e),this.deviceVersion=t,this.name="DeviceConnectionException"}}t.DeviceConnectionException=i},203:e=>{e.exports=require("stream")},261:e=>{e.exports=require("events")},278:e=>{e.exports=require("net")},317:e=>{e.exports=require("child_process")},348:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ReadlineParser=void 0;const n=r(447);class i extends n.DelimiterParser{constructor(e){const t={delimiter:Buffer.from("\n","utf8"),encoding:"utf8",...e};"string"==typeof t.delimiter&&(t.delimiter=Buffer.from(t.delimiter,t.encoding)),super(t)}}t.ReadlineParser=i},366:e=>{e.exports=require("os")},383:e=>{e.exports=require("fs")},391:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LogicAnalyzerDriver=void 0;const n=r(278),i=r(491),s=r(348),o=r(876),a=r(199),c=r(163),l=r(708);class u extends o.AnalyzerDriverBase{get deviceVersion(){return this._version}get channelCount(){return this._channelCount}get maxFrequency(){return this._maxFrequency}get blastFrequency(){return this._blastFrequency}get bufferSize(){return this._bufferSize}get isNetwork(){return this._isNetwork}get isCapturing(){return this._capturing}get driverType(){return this._isNetwork?c.AnalyzerDriverType.Network:c.AnalyzerDriverType.Serial}constructor(e){if(super(),this.connectionString=e,this._capturing=!1,this._isNetwork=!1,this._version=null,this._channelCount=0,this._maxFrequency=0,this._blastFrequency=0,this._bufferSize=0,this._serialPort=void 0,this._tcpSocket=void 0,this._currentStream=void 0,this._lineParser=void 0,this._isConnected=!1,!e)throw new Error("连接字符串不能为空")}async connect(e){try{return this.connectionString.includes(":")?await this.initNetwork(this.connectionString):await this.initSerialPort(this.connectionString,115200),this._isConnected=!0,{success:!0,deviceInfo:{name:this._version||"Unknown Device",version:this._version??void 0,type:this.driverType,connectionPath:this.connectionString,isNetwork:this._isNetwork,capabilities:this.buildCapabilities()}}}catch(e){return{success:!1,error:e instanceof Error?e.message:"连接失败"}}}async disconnect(){this._isConnected=!1,this._serialPort?.isOpen&&this._serialPort.close(),this._tcpSocket&&this._tcpSocket.destroy(),this._serialPort=void 0,this._tcpSocket=void 0,this._currentStream=void 0,this._lineParser=void 0}async getStatus(){return{isConnected:this._isConnected,isCapturing:this._capturing,batteryVoltage:await this.getVoltageStatus()}}async startCapture(e,t){if(this._capturing)return c.CaptureError.Busy;if(!this._isConnected||!this._currentStream)return c.CaptureError.HardwareError;try{this._capturing=!0;const r=this.getCaptureMode(e.captureChannels.map(e=>e.channelNumber)),n=e.preTriggerSamples+e.postTriggerSamples*(e.loopCount+1);if(!this.validateSettings(e,n))return this._capturing=!1,c.CaptureError.BadParams;const i=this.composeRequest(e,n,r),s=new o.OutputPacket;s.addByte(1),s.addStruct(i);const a=s.serialize();return await this.writeData(a),t&&this.once("captureCompleted",t),this.startDataReading(e),c.CaptureError.None}catch(e){return this._capturing=!1,c.CaptureError.UnexpectedError}}async stopCapture(){if(!this._capturing)return!0;try{const e=new Uint8Array([255]);return await this.writeData(e),this._capturing=!1,await new Promise(e=>setTimeout(e,2e3)),await this.reconnectDevice(),!0}catch(e){return this._capturing=!1,!1}}async enterBootloader(){try{if(!this._isConnected||!this._currentStream)return!1;const e=new o.OutputPacket;e.addByte(4);const t=e.serialize();return await this.writeData(t),"RESTARTING_BOOTLOADER"===await this.waitForResponse("RESTARTING_BOOTLOADER",1e3)}catch(e){return!1}}async getVoltageStatus(){if(!this._isConnected||!this._currentStream)return"DISCONNECTED";try{if(!this._isNetwork)return"3.3V";const e=new o.OutputPacket;e.addByte(3);const t=e.serialize();return await this.writeData(t),new Promise(e=>{const t=setTimeout(()=>{e("TIMEOUT")},5e3);this._lineParser?.once("data",r=>{clearTimeout(t),e(r.trim())})})}catch(e){return"ERROR"}}async sendNetworkConfig(e,t,r,n){if(this._isNetwork)return!1;try{const i=new o.OutputPacket;i.addByte(2);const s={serialize:()=>{const i=new ArrayBuffer(115),s=new DataView(i);let o=0;const a=(new TextEncoder).encode(e);for(let e=0;e<33;e++)s.setUint8(o++,e<a.length?a[e]:0);const c=(new TextEncoder).encode(t);for(let e=0;e<64;e++)s.setUint8(o++,e<c.length?c[e]:0);const l=(new TextEncoder).encode(r);for(let e=0;e<16;e++)s.setUint8(o++,e<l.length?l[e]:0);return s.setUint16(o,n,!0),new Uint8Array(i)}};i.addStruct(s);const a=i.serialize();return await this.writeData(a),"SETTINGS_SAVED"===await this.waitForResponse("SETTINGS_SAVED",5e3)}catch(e){return!1}}async initSerialPort(e,t){return new Promise((r,n)=>{this._serialPort=new i.SerialPort({path:e,baudRate:t,autoOpen:!1}),this._serialPort.open(e=>{e?n(new Error(`串口连接失败: ${e.message}`)):(this._currentStream=this._serialPort,this._lineParser=new s.ReadlineParser({delimiter:"\n"}),this._serialPort.pipe(this._lineParser),this._isNetwork=!1,this.initializeDevice().then(r).catch(n))})})}async initNetwork(e){const t=u.regAddressPort.exec(e);if(!t||t.length<3)throw new Error("指定的地址/端口格式无效");this._devAddr=t[1];const r=t[2];if(this._devPort=parseInt(r,10),isNaN(this._devPort)||this._devPort<1||this._devPort>65535)throw new Error("指定的端口号无效");return new Promise((e,t)=>{this._tcpSocket=new n.Socket,this._tcpSocket.connect(this._devPort,this._devAddr,()=>{this._currentStream=this._tcpSocket,this._lineParser=new s.ReadlineParser({delimiter:"\n"}),this._tcpSocket.pipe(this._lineParser),this._isNetwork=!0,this.initializeDevice().then(e).catch(t)}),this._tcpSocket.on("error",e=>{t(new Error(`网络连接失败: ${e.message}`))})})}async initializeDevice(){if(!this._currentStream||!this._lineParser)throw new Error("通信流未初始化");const e=new o.OutputPacket;e.addByte(0);const t=e.serialize();await this.writeData(t);const r=await this.readDeviceInfo();this.parseDeviceInfo(r)}async readDeviceInfo(){return new Promise((e,t)=>{const r=[],n=setTimeout(()=>{t(new Error("设备信息读取超时"))},1e4),i=t=>{r.push(t.trim()),r.length>=5&&(clearTimeout(n),this._lineParser.off("data",i),e(r))};this._lineParser.on("data",i)})}parseDeviceInfo(e){if(e.length<5)throw new Error("设备信息响应不完整");this._version=e[0];const t=u.regFreq.exec(e[1]);if(!t)throw new Error("无效的设备频率响应");if(this._maxFrequency=parseInt(t[1],10),isNaN(this._maxFrequency)||this._maxFrequency<=0)throw new a.DeviceConnectionException("设备频率值无效");const r=u.regBlast.exec(e[2]);if(!r)throw new a.DeviceConnectionException("无效的设备突发频率响应");if(this._blastFrequency=parseInt(r[1],10),isNaN(this._blastFrequency)||this._blastFrequency<=0)throw new a.DeviceConnectionException("设备突发频率值无效");const n=u.regBuf.exec(e[3]);if(!n)throw new a.DeviceConnectionException("无效的设备缓冲区大小响应");if(this._bufferSize=parseInt(n[1],10),isNaN(this._bufferSize)||this._bufferSize<=0)throw new a.DeviceConnectionException("设备缓冲区大小值无效");const i=u.regChan.exec(e[4]);if(!i)throw new a.DeviceConnectionException("无效的设备通道数响应");if(this._channelCount=parseInt(i[1],10),isNaN(this._channelCount)||this._channelCount<=0||this._channelCount>24)throw new a.DeviceConnectionException("设备通道数值无效");if(!a.VersionValidator.getVersion(this._version).isValid)throw new a.DeviceConnectionException(`无效的设备版本 ${this._version}，支持的最低版本: ${a.VersionValidator.getMinimumVersionString()}`,this._version)}async writeData(e){return new Promise((t,r)=>{this._currentStream?this._currentStream.write(Buffer.from(e),e=>{e?r(e):t()}):r(new Error("通信流未初始化"))})}async startDataReading(e){try{if(!this._currentStream)throw new Error("通信流未初始化");if("CAPTURE_STARTED"!==await this.waitForResponse("CAPTURE_STARTED",1e4))throw new Error("采集启动失败");const t=await this.readCaptureData(e);this.extractSamplesToChannels(e,t),this._capturing=!1;const r={success:!0,session:e};this.emitCaptureCompleted(r)}catch(t){this._capturing=!1;const r={success:!1,session:e};this.emitCaptureCompleted(r)}}async waitForResponse(e,t){return new Promise((r,n)=>{const i=setTimeout(()=>{this._lineParser.off("data",s),n(new Error(`等待响应超时: ${e}`))},t),s=t=>{const n=t.trim();n===e&&(clearTimeout(i),this._lineParser.off("data",s),r(n))};this._lineParser.on("data",s)})}async readCaptureData(e){return new Promise((t,r)=>{if(!this._currentStream)return void r(new Error("通信流未初始化"));const n=this.getCaptureMode(e.captureChannels.map(e=>e.channelNumber)),i=e.preTriggerSamples+e.postTriggerSamples*(e.loopCount+1);this._isNetwork?this.readNetworkCaptureData(e,n,i,t,r):this.readSerialCaptureData(e,n,i,t,r)})}readNetworkCaptureData(e,t,r,n,i){let s=Buffer.alloc(0),o=null,a=!1;const c=r=>{if(s=Buffer.concat([s,r]),!a&&s.length>=4&&(o=s.readUInt32LE(0),a=!0),a&&null!==o){const r=0===t?1:1===t?2:4,a=e.loopCount>0&&e.measureBursts?4*(e.loopCount+2):0,l=4+o*r+1+a;if(s.length>=l){this._currentStream.off("data",c);try{const r=this.parseCaptureData(s,e,t,o);n(r)}catch(e){i(e)}}}};setTimeout(()=>{this._currentStream.off("data",c),i(new Error("网络数据读取超时"))},6e4),this._currentStream.on("data",c)}readSerialCaptureData(e,t,r,n,i){let s=r*(0===t?1:1===t?2:4);0!==e.loopCount&&e.measureBursts?s+=1+4*(e.loopCount+2):s+=1;let o=Buffer.alloc(0),a=null;const c=Buffer.alloc(4);let l=0;const u=r=>{if(l<4){const e=4-l,t=Math.min(e,r.length);return r.copy(c,l,0,t),l+=t,void(4===l&&(a=c.readUInt32LE(0),t<r.length&&(o=Buffer.concat([o,r.slice(t)]))))}if(o=Buffer.concat([o,r]),null!==a&&o.length>=s){this._currentStream.off("data",u);try{const r=Buffer.concat([c,o.slice(0,s)]),i=this.parseCaptureData(r,e,t,a);n(i)}catch(e){i(e)}}};setTimeout(()=>{this._currentStream.off("data",u),i(new Error("串口数据读取超时"))},6e4),this._currentStream.on("data",u)}parseCaptureData(e,t,r,n){let i=4;const s=new Uint32Array(n);switch(r){case 0:for(let t=0;t<n;t++)s[t]=e.readUInt8(i),i+=1;break;case 1:for(let t=0;t<n;t++)s[t]=e.readUInt16LE(i),i+=2;break;case 2:for(let t=0;t<n;t++)s[t]=e.readUInt32LE(i),i+=4}const o=e.readUInt8(i);i+=1;const a=0!==t.loopCount&&t.measureBursts?t.loopCount+2:0,c=new BigUint64Array(a),l=[];if(o>0&&a>0){for(let t=0;t<a&&i+4<=e.length;t++)c[t]=BigInt(e.readUInt32LE(i)),i+=4;this.processBurstTimestamps(c,t,l)}return{samples:s,timestamps:c,bursts:l}}processBurstTimestamps(e,t,r){if(0===e.length)return;if(e.length<=2)return;for(let t=0;t<e.length;t++){const r=e[t];e[t]=0xff000000n&r|0x00ffffffn-(0x00ffffffn&r)}const n=1e9/t.frequency,i=n/5,s=n*t.postTriggerSamples/5;for(let t=1;t<e.length;t++){const r=e[t]<e[t-1]?e[t]+0x100000000n:e[t];if(Number(r-e[t-1])<=s){const n=BigInt(Math.floor(s-Number(r-e[t-1])+2*i));for(let r=t;r<e.length;r++)e[r]+=n}}const o=new BigUint64Array(e.length-2);for(let t=2;t<e.length;t++){const r=e[t]<e[t-1]?e[t]+0x100000000n:e[t];o[t-2]=5n*(r-e[t-1]-BigInt(Math.floor(s)))}for(let i=1;i<e.length;i++){const e=new l.BurstInfo;e.burstSampleStart=1===i?t.preTriggerSamples:t.preTriggerSamples+t.postTriggerSamples*(i-1),e.burstSampleEnd=t.preTriggerSamples+t.postTriggerSamples*i,e.burstSampleGap=1===i?0n:BigInt(Math.floor(Number(o[i-2])/n)),e.burstTimeGap=1===i?0n:o[i-2],r.push(e)}}extractSamplesToChannels(e,t){const{samples:r}=t;for(let t=0;t<e.captureChannels.length;t++){const n=e.captureChannels[t],i=1<<t;n.samples=new Uint8Array(r.length);for(let e=0;e<r.length;e++)n.samples[e]=0!==(r[e]&i)?1:0}t.bursts.length>0&&(e.bursts=t.bursts)}buildCapabilities(){return{channels:{digital:this._channelCount,maxVoltage:5,inputImpedance:1e6},sampling:{maxRate:this._maxFrequency,minRate:this.minFrequency,supportedRates:[this._maxFrequency,this._blastFrequency],bufferSize:this._bufferSize,streamingSupport:!1},triggers:{types:[0,1,2,3],maxChannels:this._channelCount,patternWidth:16,sequentialSupport:!1,conditions:["rising","falling","high","low"]},connectivity:{interfaces:this._isNetwork?["ethernet"]:["serial"],protocols:["custom"]},features:{voltageMonitoring:!0,signalGeneration:!1}}}async reconnectDevice(){try{this._isNetwork&&this._tcpSocket&&this._devAddr&&this._devPort?(this._tcpSocket.destroy(),await new Promise(e=>setTimeout(e,1)),this._tcpSocket=new n.Socket,await new Promise((e,t)=>{this._tcpSocket.connect(this._devPort,this._devAddr,()=>{this._currentStream=this._tcpSocket,this._lineParser=new s.ReadlineParser({delimiter:"\n"}),this._tcpSocket.pipe(this._lineParser),e()}),this._tcpSocket.on("error",e=>{t(new Error(`网络重连失败: ${e.message}`))})})):!this._isNetwork&&this._serialPort&&(this._serialPort.isOpen&&this._serialPort.close(),await new Promise(e=>setTimeout(e,1)),await new Promise((e,t)=>{this._serialPort.open(r=>{r?t(new Error(`串口重连失败: ${r.message}`)):(this._currentStream=this._serialPort,this._lineParser=new s.ReadlineParser({delimiter:"\n"}),this._serialPort.pipe(this._lineParser),e())})}))}catch(e){throw e}}composeRequest(e,t,r){const n=new o.CaptureRequest;if(e.triggerType===c.TriggerType.Edge||e.triggerType===c.TriggerType.Blast){n.triggerType=e.triggerType,n.trigger=e.triggerChannel,n.invertedOrCount=e.triggerInverted?1:0,n.triggerValue=0,n.channelCount=e.captureChannels.length,n.frequency=e.frequency,n.preSamples=e.preTriggerSamples,n.postSamples=e.postTriggerSamples,n.loopCount=e.loopCount,n.measure=e.measureBursts?1:0,n.captureMode=r;for(let t=0;t<e.captureChannels.length&&t<24;t++)n.channels[t]=e.captureChannels[t].channelNumber}else{const t=1e9/e.frequency,i=e.triggerType===c.TriggerType.Fast?3:5,s=1/this._maxFrequency*1e9*i,o=Math.round(s/t+.3);n.triggerType=e.triggerType,n.trigger=e.triggerChannel,n.invertedOrCount=e.triggerBitCount??1,n.triggerValue=e.triggerPattern??0,n.channelCount=e.captureChannels.length,n.frequency=e.frequency,n.preSamples=e.preTriggerSamples+o,n.postSamples=e.postTriggerSamples-o,n.loopCount=0,n.measure=0,n.captureMode=r;for(let t=0;t<e.captureChannels.length&&t<24;t++)n.channels[t]=e.captureChannels[t].channelNumber}return n}validateSettings(e,t){const r=e.captureChannels.map(e=>e.channelNumber),n=this.getLimits(r),i=this._channelCount||24,s=this._maxFrequency||1e8,o=this.minFrequency||1e6;if(this._blastFrequency,e.triggerType===c.TriggerType.Edge)return r.every(e=>e>=0&&e<=i-1)&&e.triggerChannel>=0&&e.triggerChannel<=i&&e.preTriggerSamples>=n.minPreSamples&&e.postTriggerSamples>=n.minPostSamples&&e.preTriggerSamples<=n.maxPreSamples&&e.postTriggerSamples<=n.maxPostSamples&&t<=n.maxTotalSamples&&e.frequency>=o&&e.frequency<=s&&e.loopCount<=254;if(e.triggerType===c.TriggerType.Blast)return r.every(e=>e>=0&&e<=i-1)&&e.triggerChannel>=0&&e.triggerChannel<=i&&e.preTriggerSamples>=n.minPreSamples&&e.postTriggerSamples>=n.minPostSamples&&e.preTriggerSamples<=n.maxPreSamples&&e.postTriggerSamples<=n.maxPostSamples&&t<=n.maxTotalSamples&&e.frequency>=o&&e.frequency<=s&&e.loopCount>=0&&e.loopCount<=255;{const a=e.triggerType===c.TriggerType.Complex?16:5,l=e.triggerType===c.TriggerType.Complex?15:4;return r.every(e=>e>=0&&e<=i-1)&&(e.triggerBitCount??1)>=1&&(e.triggerBitCount??1)<=a&&e.triggerChannel>=0&&e.triggerChannel<=l&&e.triggerChannel+(e.triggerBitCount??1)<=a&&e.preTriggerSamples>=n.minPreSamples&&e.postTriggerSamples>=n.minPostSamples&&e.preTriggerSamples<=n.maxPreSamples&&e.postTriggerSamples<=n.maxPostSamples&&t<=n.maxTotalSamples&&e.frequency>=o&&e.frequency<=s}}getLimits(e){const t=this.getCaptureMode(e),r=this._bufferSize||96e3,n=Math.floor(r/(0===t?1:1===t?2:4)),i=Math.floor(n/10),s=n-i-10;return{minPreSamples:2,maxPreSamples:i,minPostSamples:2,maxPostSamples:Math.max(s,2),maxTotalSamples:n}}dispose(){this.disconnect(),super.dispose()}}t.LogicAnalyzerDriver=u,u.regAddressPort=/([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):([0-9]+)/,u.regChan=/^CHANNELS:([0-9]+)$/,u.regBuf=/^BUFFER:([0-9]+)$/,u.regFreq=/^FREQ:([0-9]+)$/,u.regBlast=/^BLASTFREQ:([0-9]+)$/},398:e=>{e.exports=require("vscode")},447:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DelimiterParser=void 0;const n=r(203);class i extends n.Transform{constructor({delimiter:e,includeDelimiter:t=!1,...r}){if(super(r),void 0===e)throw new TypeError('"delimiter" is not a bufferable object');if(0===e.length)throw new TypeError('"delimiter" has a 0 or undefined length');this.includeDelimiter=t,this.delimiter=Buffer.from(e),this.buffer=Buffer.alloc(0)}_transform(e,t,r){let n,i=Buffer.concat([this.buffer,e]);for(;-1!==(n=i.indexOf(this.delimiter));)this.push(i.slice(0,n+(this.includeDelimiter?this.delimiter.length:0))),i=i.slice(n+this.delimiter.length);this.buffer=i,r()}_flush(e){this.push(this.buffer),this.buffer=Buffer.alloc(0),e()}}t.DelimiterParser=i},456:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hardwareDriverManager=t.RigolSiglentDetector=t.SigrokDetector=t.SaleaeDetector=t.NetworkDetector=t.SerialDetector=t.HardwareDriverManager=void 0;const n=r(261),i=r(391),s=r(658),o=r(24),a=r(27),c=r(69),l=r(180),u=r(163);class h extends n.EventEmitter{constructor(){super(),this.drivers=new Map,this.activeConnections=new Map,this.detectors=[],this.detectionCache=new Map,this.cacheTimeout=3e4,this.currentDevice=null,this.connectedDeviceInfo=null,this.initializeBuiltinDrivers(),this.initializeDetectors()}initializeBuiltinDrivers(){console.log("初始化内置驱动..."),this.registerDriver({id:"pico-logic-analyzer",name:"Pico Logic Analyzer",description:"Raspberry Pi Pico based logic analyzer driver",version:"1.0.0",driverClass:i.LogicAnalyzerDriver,supportedDevices:["pico","rp2040","logic-analyzer","analyzer"],priority:100}),this.registerDriver({id:"saleae-logic",name:"Saleae Logic Analyzer",description:"Saleae Logic series compatible driver",version:"1.0.0",driverClass:s.SaleaeLogicDriver,supportedDevices:["saleae","logic16","logic8","logic-pro"],priority:90}),this.registerDriver({id:"rigol-siglent",name:"Rigol/Siglent Logic Analyzer",description:"Rigol and Siglent instruments with logic analyzer capability",version:"1.0.0",driverClass:o.RigolSiglentDriver,supportedDevices:["rigol","siglent","ds1000z","ds2000","sds"],priority:80}),this.registerDriver({id:"sigrok-adapter",name:"Sigrok Universal Adapter",description:"Universal adapter for 80+ sigrok-supported devices",version:"1.0.0",driverClass:a.SigrokAdapter,supportedDevices:["fx2lafw","hantek","kingst","chronovu","openbench"],priority:70}),this.registerDriver({id:"network-analyzer",name:"Network Logic Analyzer",description:"Generic network-based logic analyzer driver",version:"1.0.0",driverClass:c.NetworkLogicAnalyzerDriver,supportedDevices:["network","tcp","udp","wifi","ethernet"],priority:60}),console.log(`已注册 ${this.drivers.size} 个内置驱动`)}initializeDetectors(){this.detectors=[new p,new d,new m,new g,new f],console.log(`初始化了 ${this.detectors.length} 个设备检测器`)}registerDriver(e){this.drivers.set(e.id,e),this.emit("driverRegistered",e)}unregisterDriver(e){const t=this.drivers.delete(e);return t&&this.emit("driverUnregistered",e),t}getRegisteredDrivers(){return Array.from(this.drivers.values()).sort((e,t)=>t.priority-e.priority)}getAvailableDrivers(){return this.getRegisteredDrivers()}async detectHardware(e=!0){const t="hardware-detection";if(e&&this.detectionCache.has(t))return this.detectionCache.get(t);try{console.log("开始硬件检测...");const e=this.detectors.map(e=>this.safeDetect(e)),r=(await Promise.all(e)).flat(),n=this.mergeAndRankResults(r);return this.detectionCache.set(t,n),setTimeout(()=>{this.detectionCache.delete(t)},this.cacheTimeout),console.log(`检测到 ${n.length} 个设备`),this.emit("devicesDetected",n),n}catch(e){return console.error("Hardware detection failed:",e),[]}}async safeDetect(e){try{return await e.detect()}catch(t){return console.warn(`Detector ${e.name} failed:`,t),[]}}async matchDriver(e){for(const t of this.getRegisteredDrivers())if(this.isExactMatch(e,t))return t;for(const t of this.getRegisteredDrivers())if(this.isGenericMatch(e,t))return t;return null}isExactMatch(e,t){return t.supportedDevices.some(t=>e.id.includes(t)||e.name.toLowerCase().includes(t.toLowerCase()))}isGenericMatch(e,t){switch(e.type){case"serial":return"pico-logic-analyzer"===t.id||"sigrok-adapter"===t.id;case"network":return"saleae-logic"===t.id||"rigol-siglent"===t.id||"network-analyzer"===t.id;case"usb":return"sigrok-adapter"===t.id;default:return!1}}createDriver(e){return new Promise(async(t,r)=>{try{const n=await this.matchDriver(e);if(!n)return void r(new Error(`No suitable driver found for device: ${e.name}`));const i=this.createDriverInstance(n.driverClass,e.connectionString);this.emit("driverCreated",{device:e,driver:i,registration:n}),t(i)}catch(t){r(new Error(`Failed to create driver for device ${e.name}: ${t}`))}})}createDriverInstance(e,t){if(e===c.NetworkLogicAnalyzerDriver){const e=t.split(":"),r=e[0]||"localhost",n=parseInt(e[1]||"24000",10);return new c.NetworkLogicAnalyzerDriver(r,n)}if(e===a.SigrokAdapter){const e=t.split(":"),r=e[0]||"fx2lafw",n=e[1]||"";return new a.SigrokAdapter(r,n)}return new e(t)}async autoConnect(){const e=await this.detectHardware();if(0===e.length)throw new Error("No compatible devices found");const t=e[0];try{return await this.createDriver(t)}catch(t){for(let t=1;t<Math.min(e.length,3);t++)try{return await this.createDriver(e[t])}catch{continue}throw new Error("Failed to connect to any detected device")}}mergeAndRankResults(e){const t=new Map;for(const r of e){const e=t.get(r.connectionString);(!e||r.confidence>e.confidence)&&t.set(r.connectionString,r)}return Array.from(t.values()).sort((e,t)=>t.confidence-e.confidence)}createMultiDeviceDriver(e){if(e.length<2||e.length>5)throw new Error("多设备驱动需要2-5个连接字符串");const t=new l.MultiAnalyzerDriver(e);return this.emit("multiDriverCreated",{connectionStrings:e,driver:t}),t}getSupportedSigrokDevices(){return a.SigrokAdapter.getSupportedDevices()}async connectToDevice(e,t){try{this.currentDevice&&(await this.currentDevice.disconnect(),this.currentDevice=null,this.connectedDeviceInfo=null);let r=null;if("autodetect"===e){const e=await this.detectHardware();if(0===e.length)return{success:!1,error:"未检测到任何设备"};r=e[0]}else if("network"===e){if(!t?.networkConfig)return{success:!1,error:"缺少网络配置参数"};const{host:e,port:n}=t.networkConfig;r={id:"network",name:"Network Device",type:"network",connectionString:`${e}:${n}`,driverType:u.AnalyzerDriverType.Network,confidence:.8}}else r=(await this.detectHardware()).find(t=>t.id===e)||null,r||(r={id:e,name:"Manual Device",type:e.includes(":")?"network":"serial",connectionString:e,driverType:e.includes(":")?u.AnalyzerDriverType.Network:u.AnalyzerDriverType.Serial,confidence:.6});if(!r)return{success:!1,error:"设备不存在或无法识别"};const n=await this.createDriver(r),i=await n.connect(t);return i.success?(this.currentDevice=n,this.connectedDeviceInfo=r,this.activeConnections.set(r.id,n),this.emit("deviceConnected",{device:r,driver:n}),{success:!0,deviceInfo:i.deviceInfo}):{success:!1,error:i.error||"连接失败"}}catch(e){return{success:!1,error:e instanceof Error?e.message:"未知错误"}}}getCurrentDevice(){return this.currentDevice}getCurrentDeviceInfo(){return this.connectedDeviceInfo}async disconnectCurrentDevice(){if(this.currentDevice)try{await this.currentDevice.disconnect(),this.connectedDeviceInfo&&(this.activeConnections.delete(this.connectedDeviceInfo.id),this.emit("deviceDisconnected",{device:this.connectedDeviceInfo}))}catch(e){console.error("断开设备连接失败:",e)}finally{this.currentDevice=null,this.connectedDeviceInfo=null}}isDeviceConnected(){return null!==this.currentDevice}getActiveConnections(){return new Map(this.activeConnections)}async dispose(){const e=Array.from(this.activeConnections.values()).map(e=>e.disconnect().catch(e=>{console.error("清理驱动连接失败:",e)}));await Promise.allSettled(e),this.activeConnections.clear(),this.detectionCache.clear(),this.currentDevice=null,this.connectedDeviceInfo=null,this.removeAllListeners()}}t.HardwareDriverManager=h;class p{constructor(){this.name="Serial Port Detector"}async detect(){const e=[];try{const{SerialPort:t}=r(491),n=await t.list();for(const t of n)this.isPicoAnalyzer(t)&&e.push({id:`serial-${t.path}`,name:`Logic Analyzer (${t.path})`,type:"serial",connectionString:t.path,driverType:u.AnalyzerDriverType.Serial,confidence:80})}catch(e){console.warn("Serial port detection failed:",e)}return e}isPicoAnalyzer(e){return"2E8A"===e.vendorId||"0003"===e.productId||e.manufacturer&&e.manufacturer.includes("Pico")}}t.SerialDetector=p;class d{constructor(){this.name="Network Device Detector"}async detect(){const e=[];try{const t=[24e3,5555,8080,1e4],r=this.getLocalNetworkRange().slice(0,50).map(e=>this.scanHostPorts(e,t)),n=await Promise.allSettled(r);for(const t of n)"fulfilled"===t.status&&t.value&&e.push(t.value)}catch(e){console.warn("Network device detection failed:",e)}return e}getLocalNetworkRange(){const e=[],t=["192.168.1","192.168.0","10.0.0","172.16.0"];for(const r of t)for(let t=1;t<=254;t++)e.push(`${r}.${t}`);return e}async scanHostPorts(e,t){for(const r of t)try{if(await this.checkPort(e,r))return{id:`network-${e}-${r}`,name:`Network Logic Analyzer (${e}:${r})`,type:"network",connectionString:`${e}:${r}`,driverType:u.AnalyzerDriverType.Network,confidence:60}}catch(e){continue}return null}async checkPort(e,t){return new Promise(n=>{const i=new(r(278).Socket);i.setTimeout(1e3),i.connect(t,e,()=>{i.destroy(),n(!0)}),i.on("error",()=>{n(!1)}),i.on("timeout",()=>{i.destroy(),n(!1)})})}}t.NetworkDetector=d;class m{constructor(){this.name="Saleae Logic Detector"}async detect(){const e=[];try{if(await this.checkSaleaeAPI()){const t=await this.querySaleaeDevices();e.push(...t)}}catch(e){console.warn("Saleae device detection failed:",e)}return e}async checkSaleaeAPI(){try{const e=new(r(278).Socket);return new Promise(t=>{e.setTimeout(2e3),e.connect(10429,"localhost",()=>{e.destroy(),t(!0)}),e.on("error",()=>t(!1)),e.on("timeout",()=>{e.destroy(),t(!1)})})}catch(e){return!1}}async querySaleaeDevices(){const e=[];try{e.push({id:"saleae-logic-1",name:"Saleae Logic Analyzer",type:"usb",connectionString:"localhost:10429",driverType:u.AnalyzerDriverType.Serial,confidence:95})}catch(e){console.warn("Query Saleae devices failed:",e)}return e}}t.SaleaeDetector=m;class g{constructor(){this.name="Sigrok Device Detector"}async detect(){const e=[];try{if(await this.checkSigrokCli()){const t=await this.scanSigrokDevices();e.push(...t)}}catch(e){console.warn("Sigrok device detection failed:",e)}return e}async checkSigrokCli(){try{const{spawn:e}=r(317);return new Promise(t=>{const r=e("sigrok-cli",["--version"]);r.on("close",e=>{t(0===e)}),r.on("error",()=>{t(!1)})})}catch(e){return!1}}async scanSigrokDevices(){try{const{spawn:e}=r(317);return new Promise(t=>{const r=e("sigrok-cli",["--scan"]);let n="";r.stdout.on("data",e=>{n+=e.toString()}),r.on("close",e=>{if(0===e){const e=this.parseSigrokScanOutput(n);t(e)}else t([])}),r.on("error",()=>{t([])})})}catch(e){return console.warn("Scan sigrok devices failed:",e),[]}}parseSigrokScanOutput(e){const t=[],r=e.split("\n");for(const e of r){const r=e.trim();if(!r||r.startsWith("The following"))continue;const n=r.match(/^([^:]+):([^-]+)\s*-\s*(.+)$/);if(n){const e=n[1].trim(),r=n[2].trim(),i=n[3].trim();t.push({id:`sigrok-${e}-${r}`,name:`${i} (Sigrok)`,type:"usb",connectionString:`${e}:${r}`,driverType:u.AnalyzerDriverType.Serial,confidence:85})}}return t}}t.SigrokDetector=g;class f{constructor(){this.name="Rigol/Siglent Detector"}async detect(){const e=[];try{const t=[5555,5025,111],r=this.getCommonInstrumentIPs().map(e=>this.scanInstrumentPorts(e,t)),n=await Promise.allSettled(r);for(const t of n)"fulfilled"===t.status&&t.value&&e.push(t.value)}catch(e){console.warn("Rigol/Siglent device detection failed:",e)}return e}getCommonInstrumentIPs(){return["192.168.1.100","192.168.1.101","192.168.1.102","10.0.0.100","10.0.0.101","10.0.0.102","172.16.0.100","172.16.0.101"]}async scanInstrumentPorts(e,t){for(const r of t)try{if(await this.checkInstrumentPort(e,r))return{id:`rigol-siglent-${e}-${r}`,name:`Rigol/Siglent Instrument (${e}:${r})`,type:"network",connectionString:`${e}:${r}`,driverType:u.AnalyzerDriverType.Network,confidence:80}}catch(e){continue}return null}async checkInstrumentPort(e,t){return new Promise(n=>{const i=new(r(278).Socket);i.setTimeout(2e3),i.connect(t,e,()=>{i.write("*IDN?\n"),i.on("data",e=>{const t=e.toString(),r=t.toLowerCase().includes("rigol")||t.toLowerCase().includes("siglent");i.destroy(),n(r)})}),i.on("error",()=>n(!1)),i.on("timeout",()=>{i.destroy(),n(!1)})})}}t.RigolSiglentDetector=f,t.hardwareDriverManager=new h},491:e=>{e.exports=require("serialport")},635:(e,t,r)=>{r.r(t),r.d(t,{__addDisposableResource:()=>z,__assign:()=>s,__asyncDelegator:()=>b,__asyncGenerator:()=>T,__asyncValues:()=>P,__await:()=>D,__awaiter:()=>m,__classPrivateFieldGet:()=>N,__classPrivateFieldIn:()=>R,__classPrivateFieldSet:()=>$,__createBinding:()=>f,__decorate:()=>a,__disposeResources:()=>O,__esDecorate:()=>l,__exportStar:()=>y,__extends:()=>i,__generator:()=>g,__importDefault:()=>x,__importStar:()=>A,__makeTemplateObject:()=>k,__metadata:()=>d,__param:()=>c,__propKey:()=>h,__read:()=>_,__rest:()=>o,__rewriteRelativeImportExtension:()=>F,__runInitializers:()=>u,__setFunctionName:()=>p,__spread:()=>v,__spreadArray:()=>S,__spreadArrays:()=>C,__values:()=>w,default:()=>q});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var s=function(){return s=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},s.apply(this,arguments)};function o(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function a(e,t,r,n){var i,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,r,o):i(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o}function c(e,t){return function(r,n){t(r,n,e)}}function l(e,t,r,n,i,s){function o(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var a,c=n.kind,l="getter"===c?"get":"setter"===c?"set":"value",u=!t&&e?n.static?e:e.prototype:null,h=t||(u?Object.getOwnPropertyDescriptor(u,n.name):{}),p=!1,d=r.length-1;d>=0;d--){var m={};for(var g in n)m[g]="access"===g?{}:n[g];for(var g in n.access)m.access[g]=n.access[g];m.addInitializer=function(e){if(p)throw new TypeError("Cannot add initializers after decoration has completed");s.push(o(e||null))};var f=(0,r[d])("accessor"===c?{get:h.get,set:h.set}:h[l],m);if("accessor"===c){if(void 0===f)continue;if(null===f||"object"!=typeof f)throw new TypeError("Object expected");(a=o(f.get))&&(h.get=a),(a=o(f.set))&&(h.set=a),(a=o(f.init))&&i.unshift(a)}else(a=o(f))&&("field"===c?i.unshift(a):h[l]=a)}u&&Object.defineProperty(u,n.name,h),p=!0}function u(e,t,r){for(var n=arguments.length>2,i=0;i<t.length;i++)r=n?t[i].call(e,r):t[i].call(e);return n?r:void 0}function h(e){return"symbol"==typeof e?e:"".concat(e)}function p(e,t,r){return"symbol"==typeof t&&(t=t.description?"[".concat(t.description,"]"):""),Object.defineProperty(e,"name",{configurable:!0,value:r?"".concat(r," ",t):t})}function d(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function m(e,t,r,n){return new(r||(r=Promise))(function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())})}function g(e,t){var r,n,i,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},o=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return o.next=a(0),o.throw=a(1),o.return=a(2),"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}var f=Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]};function y(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||f(t,e,r)}function w(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function _(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,s=r.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)o.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}return o}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(_(arguments[t]));return e}function C(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var s=arguments[t],o=0,a=s.length;o<a;o++,i++)n[i]=s[o];return n}function S(e,t,r){if(r||2===arguments.length)for(var n,i=0,s=t.length;i<s;i++)!n&&i in t||(n||(n=Array.prototype.slice.call(t,0,i)),n[i]=t[i]);return e.concat(n||Array.prototype.slice.call(t))}function D(e){return this instanceof D?(this.v=e,this):new D(e)}function T(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),s=[];return n=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),o("next"),o("throw"),o("return",function(e){return function(t){return Promise.resolve(t).then(e,l)}}),n[Symbol.asyncIterator]=function(){return this},n;function o(e,t){i[e]&&(n[e]=function(t){return new Promise(function(r,n){s.push([e,t,r,n])>1||a(e,t)})},t&&(n[e]=t(n[e])))}function a(e,t){try{(r=i[e](t)).value instanceof D?Promise.resolve(r.value.v).then(c,l):u(s[0][2],r)}catch(e){u(s[0][3],e)}var r}function c(e){a("next",e)}function l(e){a("throw",e)}function u(e,t){e(t),s.shift(),s.length&&a(s[0][0],s[0][1])}}function b(e){var t,r;return t={},n("next"),n("throw",function(e){throw e}),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:D(e[n](t)),done:!1}:i?i(t):t}:i}}function P(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=w(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise(function(n,i){!function(e,t,r,n){Promise.resolve(n).then(function(t){e({value:t,done:r})},t)}(n,i,(t=e[r](t)).done,t.value)})}}}function k(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var E=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t},I=function(e){return I=Object.getOwnPropertyNames||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[t.length]=r);return t},I(e)};function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r=I(e),n=0;n<r.length;n++)"default"!==r[n]&&f(t,e,r[n]);return E(t,e),t}function x(e){return e&&e.__esModule?e:{default:e}}function N(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)}function $(e,t,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(e,r):i?i.value=r:t.set(e,r),r}function R(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}function z(e,t,r){if(null!=t){if("object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object expected.");var n,i;if(r){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");n=t[Symbol.asyncDispose]}if(void 0===n){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");n=t[Symbol.dispose],r&&(i=n)}if("function"!=typeof n)throw new TypeError("Object not disposable.");i&&(n=function(){try{i.call(this)}catch(e){return Promise.reject(e)}}),e.stack.push({value:t,dispose:n,async:r})}else r&&e.stack.push({async:!0});return t}var M="function"==typeof SuppressedError?SuppressedError:function(e,t,r){var n=new Error(r);return n.name="SuppressedError",n.error=e,n.suppressed=t,n};function O(e){function t(t){e.error=e.hasError?new M(t,e.error,"An error was suppressed during disposal."):t,e.hasError=!0}var r,n=0;return function i(){for(;r=e.stack.pop();)try{if(!r.async&&1===n)return n=0,e.stack.push(r),Promise.resolve().then(i);if(r.dispose){var s=r.dispose.call(r.value);if(r.async)return n|=2,Promise.resolve(s).then(i,function(e){return t(e),i()})}else n|=1}catch(e){t(e)}if(1===n)return e.hasError?Promise.reject(e.error):Promise.resolve();if(e.hasError)throw e.error}()}function F(e,t){return"string"==typeof e&&/^\.\.?\//.test(e)?e.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,function(e,r,n,i,s){return r?t?".jsx":".js":!n||i&&s?n+i+"."+s.toLowerCase()+"js":e}):e}const q={__extends:i,__assign:s,__rest:o,__decorate:a,__param:c,__esDecorate:l,__runInitializers:u,__propKey:h,__setFunctionName:p,__metadata:d,__awaiter:m,__generator:g,__createBinding:f,__exportStar:y,__values:w,__read:_,__spread:v,__spreadArrays:C,__spreadArray:S,__await:D,__asyncGenerator:T,__asyncDelegator:b,__asyncValues:P,__makeTemplateObject:k,__importStar:A,__importDefault:x,__classPrivateFieldGet:N,__classPrivateFieldSet:$,__classPrivateFieldIn:R,__addDisposableResource:z,__disposeResources:O,__rewriteRelativeImportExtension:F}},658:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SaleaeLogicDriver=void 0;const n=r(278),i=r(876),s=r(163);class o extends i.AnalyzerDriverBase{get deviceVersion(){return this._version}get channelCount(){return this._channelCount}get maxFrequency(){return this._maxFrequency}get blastFrequency(){return this._blastFrequency}get bufferSize(){return this._bufferSize}get isNetwork(){return!0}get isCapturing(){return this._capturing}get driverType(){return s.AnalyzerDriverType.Network}constructor(e){if(super(),this._capturing=!1,this._version=null,this._channelCount=8,this._maxFrequency=1e8,this._blastFrequency=5e8,this._bufferSize=1e7,this._socket=void 0,this._isConnected=!1,this._deviceId=null,this._currentCaptureId=null,e&&e.includes(":")){const t=e.split(":");this._host=t[0],this._port=parseInt(t[1],10)}else this._host=o.DEFAULT_HOST,this._port=o.DEFAULT_PORT}async connect(e){try{return await this.initializeSocket(),await this.queryDeviceInfo(),this._isConnected=!0,{success:!0,deviceInfo:{name:this._version||"Saleae Logic Analyzer",version:this._version??void 0,type:this.driverType,connectionPath:`${this._host}:${this._port}`,isNetwork:!0,capabilities:this.buildCapabilities()}}}catch(e){return{success:!1,error:e instanceof Error?e.message:"连接失败"}}}async disconnect(){this._isConnected=!1,this._socket&&(this._socket.destroy(),this._socket=void 0),this._deviceId=null,this._currentCaptureId=null}async getStatus(){return{isConnected:this._isConnected,isCapturing:this._capturing,batteryVoltage:"N/A"}}async startCapture(e,t){if(this._capturing)return s.CaptureError.Busy;if(!this._isConnected||!this._socket)return s.CaptureError.HardwareError;try{this._capturing=!0,await this.configureCaptureSettings(e);const r=await this.startSaleaeCapture();return this._currentCaptureId=r,t&&this.once("captureCompleted",t),this.monitorCaptureProgress(e),s.CaptureError.None}catch(e){return this._capturing=!1,console.error("Saleae采集启动失败:",e),s.CaptureError.UnexpectedError}}async stopCapture(){if(!this._capturing)return!0;try{return this._currentCaptureId&&await this.sendCommand({command:"STOP_CAPTURE",capture_id:this._currentCaptureId}),this._capturing=!1,this._currentCaptureId=null,!0}catch(e){return console.error("停止Saleae采集失败:",e),!1}}async enterBootloader(){return!1}async initializeSocket(){return new Promise((e,t)=>{this._socket=new n.Socket,this._socket.connect(this._port,this._host,()=>{console.log(`已连接到Saleae Logic API: ${this._host}:${this._port}`),e()}),this._socket.on("error",e=>{t(new Error(`Socket连接失败: ${e.message}`))}),this._socket.on("close",()=>{this._isConnected=!1,console.log("Saleae Logic连接已关闭")})})}async queryDeviceInfo(){try{const e=await this.sendCommand({command:"GET_CONNECTED_DEVICES"});if(!(e.connected_devices&&e.connected_devices.length>0))throw new Error("未发现连接的Saleae Logic设备");{const t=e.connected_devices[0];this._deviceId=t.device_id,this._version=`Saleae Logic ${t.device_type}`,this.setDeviceCapabilities(t.device_type)}if(this._deviceId){const e=await this.sendCommand({command:"GET_DEVICE_CAPABILITIES",device_id:this._deviceId});e.capabilities&&this.parseDeviceCapabilities(e.capabilities)}}catch(e){throw new Error(`查询Saleae设备信息失败: ${e}`)}}setDeviceCapabilities(e){switch(e.toLowerCase()){case"logic 4":this._channelCount=4,this._maxFrequency=125e5,this._blastFrequency=25e6;break;case"logic 8":default:this._channelCount=8,this._maxFrequency=1e8,this._blastFrequency=5e8;break;case"logic 16":this._channelCount=16,this._maxFrequency=1e8,this._blastFrequency=5e8;break;case"logic pro 8":this._channelCount=8,this._maxFrequency=5e8,this._blastFrequency=1e9;break;case"logic pro 16":this._channelCount=16,this._maxFrequency=5e8,this._blastFrequency=1e9}}parseDeviceCapabilities(e){if(e.digital_channels&&(this._channelCount=e.digital_channels.length),e.supported_sample_rates){const t=e.supported_sample_rates;this._maxFrequency=Math.max(...t),this._blastFrequency=this._maxFrequency}e.memory_size&&(this._bufferSize=e.memory_size)}async configureCaptureSettings(e){if(!this._deviceId)throw new Error("设备ID未设置");const t=e.captureChannels.map(e=>({index:e.channelNumber,enabled:!0,label:e.channelName||`Channel ${e.channelNumber+1}`}));await this.sendCommand({command:"SET_CAPTURE_CONFIGURATION",device_id:this._deviceId,configuration:{digital_channels:t,sample_rate:e.frequency,capture_mode:this.getSaleaeCaptureMode(e),trigger_settings:this.buildTriggerSettings(e)}})}getSaleaeCaptureMode(e){return e.measureBursts||e.loopCount>0?"LOOPING":"NORMAL"}buildTriggerSettings(e){const t=[];return void 0!==e.triggerType&&void 0!==e.triggerChannel&&t.push({channel_index:e.triggerChannel,trigger_type:e.triggerInverted?"FALLING_EDGE":"RISING_EDGE",minimum_pulse_width_seconds:0}),{triggers:t,capture_mode:"ALWAYS"}}async startSaleaeCapture(){const e=await this.sendCommand({command:"START_CAPTURE",device_id:this._deviceId});if(!e.capture_id)throw new Error("Saleae采集启动失败：未收到capture_id");return e.capture_id}async monitorCaptureProgress(e){const t=setInterval(async()=>{try{if(!this._currentCaptureId||!this._capturing)return void clearInterval(t);const r=await this.sendCommand({command:"GET_CAPTURE_STATUS",capture_id:this._currentCaptureId});"COMPLETE"===r.status?(clearInterval(t),await this.processCaptureResults(e)):"ERROR"===r.status&&(clearInterval(t),this.handleCaptureError(e,r.error_message))}catch(r){clearInterval(t),this.handleCaptureError(e,`监控采集进度失败: ${r}`)}},100)}async processCaptureResults(e){try{const t=await this.sendCommand({command:"GET_CAPTURE_DATA",capture_id:this._currentCaptureId,format:"BINARY"});this.parseSaleaeData(e,t),this._capturing=!1,this._currentCaptureId=null;const r={success:!0,session:e};this.emitCaptureCompleted(r)}catch(t){this.handleCaptureError(e,`处理采集结果失败: ${t}`)}}parseSaleaeData(e,t){if(t.digital_samples){const r=t.digital_samples;for(let t=0;t<e.captureChannels.length;t++){const n=e.captureChannels[t],i=r[n.channelNumber];i&&i.samples&&(n.samples=this.convertSaleaeTimeSeriesToSamples(i.samples,i.sample_rate||e.frequency))}}}convertSaleaeTimeSeriesToSamples(e,t){if(0===e.length)return new Uint8Array(0);const r=e[e.length-1].time,n=Math.ceil(r*t)+1,i=new Uint8Array(n);let s=0,o=0;for(let r=0;r<n;r++){const n=r/t;for(;o<e.length&&e[o].time<=n;)s=e[o].value?1:0,o++;i[r]=s}return i}handleCaptureError(e,t){this._capturing=!1,this._currentCaptureId=null,console.error("Saleae采集错误:",t);const r={success:!1,session:e};this.emitCaptureCompleted(r)}async sendCommand(e){return new Promise((t,r)=>{if(!this._socket)return void r(new Error("Socket未连接"));const n=`${JSON.stringify(e)}\n`,i=e=>{try{const n=JSON.parse(e.toString());this._socket.off("data",i),!1===n.success?r(new Error(n.error_message||"命令执行失败")):t(n)}catch(e){r(new Error(`解析响应失败: ${e}`))}};this._socket.once("data",i),this._socket.write(n,e=>{e&&r(new Error(`发送命令失败: ${e.message}`))}),setTimeout(()=>{this._socket.off("data",i),r(new Error("命令执行超时"))},1e4)})}buildCapabilities(){return{channels:{digital:this._channelCount,maxVoltage:5,inputImpedance:1e6},sampling:{maxRate:this._maxFrequency,minRate:this.minFrequency,supportedRates:[this._maxFrequency,this._blastFrequency],bufferSize:this._bufferSize,streamingSupport:!0},triggers:{types:[0,1],maxChannels:this._channelCount,patternWidth:this._channelCount,sequentialSupport:!0,conditions:["rising","falling","high","low","change"]},connectivity:{interfaces:["usb"],protocols:["saleae_api"]},features:{signalGeneration:!1,powerSupply:!1,voltageMonitoring:!1}}}dispose(){this.disconnect(),super.dispose()}}t.SaleaeLogicDriver=o,o.DEFAULT_PORT=10429,o.DEFAULT_HOST="localhost"},665:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WiFiDeviceDiscovery=void 0;const n=r(278),i=r(194),s=r(366),o=r(876),a=r(199);t.WiFiDeviceDiscovery=class{constructor(){this.discoveredDevices=new Map,this.isScanning=!1,this.defaultConfig={timeout:3e3,concurrency:50,ports:[4045,80,8080,8e3,3e3],deepScan:!0,enableBroadcast:!0}}async scanForDevices(e){if(this.isScanning)throw new Error("设备扫描正在进行中，请等待完成");const t=Date.now();this.isScanning=!0,this.scanAbortController=new AbortController;const r={...this.defaultConfig,...e},n=[];try{const e=this.getLocalNetworkRanges();if(console.log(`开始扫描网络范围: ${e.join(", ")}`),r.enableBroadcast){console.log("开始UDP广播发现...");const e=await this.performBroadcastDiscovery(r);n.push(...e)}for(const t of e){console.log(`扫描IP范围: ${t}`);const e=await this.scanIPRange(t,r);for(const t of e){const e=`${t.ipAddress}:${t.port}`;n.find(t=>`${t.ipAddress}:${t.port}`===e)||n.push(t)}}this.updateDeviceCache(n);const i=Date.now()-t;return console.log(`设备扫描完成，发现 ${n.length} 个设备，耗时 ${i}ms`),{devices:n,scanDuration:i,ipRange:e.join(", "),ports:r.ports,status:"completed"}}catch(i){const s=Date.now()-t;return console.error("设备扫描失败:",i),{devices:n,scanDuration:s,ipRange:e?.ipRange||"auto",ports:r.ports,status:"failed",error:i instanceof Error?i.message:"未知错误"}}finally{this.isScanning=!1,this.scanAbortController=void 0}}async performBroadcastDiscovery(e){return new Promise(t=>{const r=[],n=(0,i.createSocket)("udp4"),s=setTimeout(()=>{n.close(),t(r)},e.timeout);n.on("message",async(t,n)=>{try{const i=JSON.parse(t.toString());if("pico-logic-analyzer"===i.device_type||"logic-analyzer"===i.type){const t={ipAddress:n.address,port:i.port||4045,version:i.version,deviceName:i.name||"Pico Logic Analyzer",responseTime:Date.now()%1e3,deviceType:"Pico Logic Analyzer",serialNumber:i.serial,signalStrength:i.rssi,lastSeen:new Date,isOnline:!0};e.deepScan?await this.verifyDevice(t.ipAddress,t.port)&&r.push(t):r.push(t)}}catch(e){}}),n.on("error",e=>{console.warn("UDP广播发现错误:",e),clearTimeout(s),n.close(),t(r)}),n.bind(()=>{n.setBroadcast(!0);const e=JSON.stringify({type:"discover",request:"logic-analyzer-devices",timestamp:Date.now()}),t=["255.255.255.255","192.168.1.255","192.168.0.255"];for(const r of t)n.send(e,4046,r,e=>{e&&console.warn(`广播发送失败 ${r}:`,e.message)})})})}async scanIPRange(e,t){const r=[],n=this.generateIPList(e);console.log(`扫描 ${n.length} 个IP地址...`),new Array(t.concurrency).fill(null);const i=[];for(const e of n){const n=Promise.resolve().then(async()=>{if(!this.scanAbortController?.signal.aborted)for(const n of t.ports)try{const i=Date.now();if(await this.isPortOpen(e,n,t.timeout)){const s=Date.now()-i;if(console.log(`发现开放端口: ${e}:${n} (${s}ms)`),t.deepScan){const i=await this.verifyPicoDevice(e,n,t.timeout);i&&(i.responseTime=s,r.push(i))}else r.push({ipAddress:e,port:n,responseTime:s,deviceType:"Unknown Device",lastSeen:new Date,isOnline:!0})}}catch(e){}});i.push(n)}return await Promise.allSettled(i),r}isPortOpen(e,t,r){return new Promise(i=>{const s=new n.Socket,o=setTimeout(()=>{s.destroy(),i(!1)},r);s.connect(t,e,()=>{clearTimeout(o),s.end(),i(!0)}),s.on("error",()=>{clearTimeout(o),i(!1)})})}async verifyPicoDevice(e,t,r){return new Promise(i=>{const s=new n.Socket;let a="";const c=setTimeout(()=>{s.destroy(),i(null)},r);s.connect(t,e,async()=>{try{const e=new o.OutputPacket;e.addByte(0);const t=e.serialize();s.write(t)}catch(e){clearTimeout(c),s.destroy(),i(null)}}),s.on("data",r=>{a+=r.toString();const n=a.split("\n").filter(e=>e.trim());if(n.length>=5){clearTimeout(c),s.destroy();try{const r=this.parseDeviceResponse(e,t,n);i(r)}catch(e){i(null)}}}),s.on("error",()=>{clearTimeout(c),i(null)})})}parseDeviceResponse(e,t,r){try{if(r.length<5)return null;const n=r[0].trim();if(!a.VersionValidator.getVersion(n).isValid)return console.log(`设备 ${e}:${t} 版本验证失败: ${n}`),null;const i=/^FREQ:([0-9]+)$/.exec(r[1].trim()),s=/^BLASTFREQ:([0-9]+)$/.exec(r[2].trim()),o=/^BUFFER:([0-9]+)$/.exec(r[3].trim()),c=/^CHANNELS:([0-9]+)$/.exec(r[4].trim());return i&&s&&o&&c?{ipAddress:e,port:t,version:n,deviceName:`Pico Logic Analyzer (${n})`,responseTime:0,deviceType:"Pico Logic Analyzer",lastSeen:new Date,isOnline:!0}:(console.log(`设备 ${e}:${t} 信息格式错误`),null)}catch(r){return console.error(`解析设备响应失败 ${e}:${t}:`,r),null}}async verifyDevice(e,t){try{return null!==await this.verifyPicoDevice(e,t,2e3)}catch{return!1}}getLocalNetworkRanges(){const e=[],t=(0,s.networkInterfaces)();for(const r in t){const n=t[r];if(n)for(const t of n)if("IPv4"===t.family&&!t.internal){const r=t.address.split("."),n=`${r[0]}.${r[1]}.${r[2]}`;e.push(`${n}.1-254`)}}return 0===e.length&&e.push("192.168.1.1-254","192.168.0.1-254","10.0.0.1-254"),e}generateIPList(e){const t=[];if(e.includes("-")){const[r,n]=e.split("-"),i=r.split("."),s=parseInt(n);if(4===i.length){const e=`${i[0]}.${i[1]}.${i[2]}`;for(let r=parseInt(i[3]);r<=s;r++)t.push(`${e}.${r}`)}}else t.push(e);return t}updateDeviceCache(e){for(const e of this.discoveredDevices.values())e.isOnline=!1;for(const t of e){const e=`${t.ipAddress}:${t.port}`;this.discoveredDevices.set(e,t)}const t=new Date;for(const[e,r]of this.discoveredDevices.entries())!r.isOnline&&t.getTime()-r.lastSeen.getTime()>3e5&&this.discoveredDevices.delete(e)}getCachedDevices(){return Array.from(this.discoveredDevices.values())}getOnlineDevices(){return this.getCachedDevices().filter(e=>e.isOnline)}stopScan(){this.isScanning&&this.scanAbortController&&(this.scanAbortController.abort(),this.isScanning=!1,console.log("设备扫描已停止"))}isScanInProgress(){return this.isScanning}clearCache(){this.discoveredDevices.clear(),console.log("设备缓存已清除")}async refreshDevice(e,t){try{const r=await this.verifyPicoDevice(e,t,3e3);if(r){const n=`${e}:${t}`;this.discoveredDevices.set(n,r)}return r}catch(r){return console.error(`刷新设备状态失败 ${e}:${t}:`,r),null}}}},694:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NetworkStabilityService=void 0;const n=r(261),i=r(278);class s extends n.EventEmitter{constructor(e){super(),this.socket=null,this.isConnected=!1,this.networkEvents=[],this.retryCount=0,this.lastHeartbeatTime=0,this.responseTimeHistory=[],this.throughputHistory=[],this.connectionStartTime=0,this.defaultConfig={heartbeatInterval:5e3,connectionTimeout:1e4,maxRetries:5,retryInterval:2e3,qualityCheckInterval:3e4,autoReconnect:!0,enableOptimization:!0,bufferSize:65536},this.currentConfig={...this.defaultConfig,...e},this.connectionQuality=this.initializeConnectionQuality()}async connect(e,t){return this.isConnected?(console.warn("已经连接到设备，请先断开连接"),!0):(this.lastConnectionHost=e,this.lastConnectionPort=t,new Promise((r,n)=>{this.socket=new i.Socket,this.connectionStartTime=Date.now();const s=setTimeout(()=>{this.socket?.destroy(),n(new Error(`连接超时: ${e}:${t}`))},this.currentConfig.connectionTimeout);this.socket.connect(t,e,()=>{clearTimeout(s),this.isConnected=!0,this.retryCount=0,this.setupSocketHandlers(),this.startHeartbeat(),this.startQualityMonitoring(),this.emitNetworkEvent("connected",{host:e,port:t}),console.log(`网络连接已建立: ${e}:${t}`),r(!0)}),this.socket.on("error",e=>{clearTimeout(s),this.handleConnectionError(e),n(e)})}))}async disconnect(){this.isConnected=!1,this.stopHeartbeat(),this.stopQualityMonitoring(),this.stopReconnectTimer(),this.socket&&(this.socket.destroy(),this.socket=null),this.emitNetworkEvent("disconnected"),console.log("网络连接已断开")}async sendData(e){if(!this.isConnected||!this.socket)throw new Error("设备未连接");return new Promise((t,r)=>{const n=Date.now();this.socket.write(e,i=>{if(i)r(i);else{const r=Date.now()-n;this.updateResponseTime(r),this.updateThroughput(e.length),t(!0)}})})}getConnectionQuality(){return{...this.connectionQuality}}getNetworkEvents(e=100){return this.networkEvents.slice(-e)}async runDiagnostics(e,t){const r=[];return r.push(await this.testConnection(e,t)),r.push(await this.testLatency(e,t)),this.isConnected&&r.push(await this.testThroughput()),this.isConnected&&r.push(await this.testStability()),this.isConnected&&r.push(await this.testDataIntegrity()),r.push(await this.checkNetworkConfiguration(e,t)),r}optimizeConnection(){this.currentConfig.enableOptimization&&this.socket&&(this.socket.setNoDelay(!0),this.socket.setKeepAlive(!0,3e4),this.currentConfig.bufferSize&&this.socket.setDefaultEncoding("binary"),console.log("网络连接已优化"))}setConfiguration(e){this.currentConfig={...this.currentConfig,...e},this.isConnected&&(this.stopHeartbeat(),this.stopQualityMonitoring(),this.startHeartbeat(),this.startQualityMonitoring())}async forceReconnect(e,t){return await this.disconnect(),await new Promise(e=>setTimeout(e,1e3)),this.connect(e,t)}initializeConnectionQuality(){return{latency:0,packetLoss:0,stabilityScore:100,averageResponseTime:0,maxResponseTime:0,minResponseTime:0,retryCount:0,disconnectionCount:0,throughput:0,lastTestTime:new Date}}setupSocketHandlers(){this.socket&&(this.socket.on("data",e=>{this.updateThroughput(e.length)}),this.socket.on("close",()=>{this.handleConnectionClose()}),this.socket.on("error",e=>{this.handleConnectionError(e)}),this.optimizeConnection())}handleConnectionClose(){this.isConnected=!1,this.connectionQuality.disconnectionCount++,this.stopHeartbeat(),this.stopQualityMonitoring(),this.emitNetworkEvent("disconnected"),this.currentConfig.autoReconnect&&this.retryCount<this.currentConfig.maxRetries&&this.scheduleReconnect()}handleConnectionError(e){this.emitNetworkEvent("error",e,e.message),console.error("网络连接错误:",e.message),this.connectionQuality.stabilityScore=Math.max(0,this.connectionQuality.stabilityScore-10)}startHeartbeat(){this.heartbeatTimer=setInterval(()=>{this.sendHeartbeat()},this.currentConfig.heartbeatInterval)}stopHeartbeat(){this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=void 0)}async sendHeartbeat(){if(this.isConnected&&this.socket)try{const e=Date.now();this.lastHeartbeatTime=e;const t=Buffer.from([0]);await this.sendData(t);const r=Date.now()-e;this.updateResponseTime(r),this.connectionQuality.latency=r}catch(e){console.warn("心跳发送失败:",e),this.handleConnectionError(e)}}startQualityMonitoring(){this.qualityTimer=setInterval(()=>{this.updateConnectionQuality()},this.currentConfig.qualityCheckInterval)}stopQualityMonitoring(){this.qualityTimer&&(clearInterval(this.qualityTimer),this.qualityTimer=void 0)}updateConnectionQuality(){const e=new Date,t=this.responseTimeHistory.slice(-100);t.length>0&&(this.connectionQuality.averageResponseTime=t.reduce((e,t)=>e+t,0)/t.length,this.connectionQuality.maxResponseTime=Math.max(...t),this.connectionQuality.minResponseTime=Math.min(...t)),this.connectionQuality.stabilityScore=this.calculateStabilityScore(),this.connectionQuality.retryCount=this.retryCount,this.connectionQuality.lastTestTime=e,this.emitNetworkEvent("quality_changed",this.connectionQuality)}calculateStabilityScore(){let e=100;const t=this.connectionQuality.averageResponseTime;return t>100&&(e-=Math.min(30,(t-100)/10)),e-=5*this.retryCount,e-=10*this.connectionQuality.disconnectionCount,e-=2*this.connectionQuality.packetLoss,Math.max(0,Math.min(100,e))}updateResponseTime(e){this.responseTimeHistory.push(e),this.responseTimeHistory.length>1e3&&(this.responseTimeHistory=this.responseTimeHistory.slice(-500))}updateThroughput(e){const t=Date.now();this.throughputHistory.push({bytes:e,timestamp:t});const r=t-5e3,n=this.throughputHistory.filter(e=>e.timestamp>r);if(n.length>0){const e=n.reduce((e,t)=>e+t.bytes,0),r=(t-n[0].timestamp)/1e3;this.connectionQuality.throughput=r>0?e/r:0}this.throughputHistory=this.throughputHistory.filter(e=>e.timestamp>r)}scheduleReconnect(){this.retryCount++,this.emitNetworkEvent("reconnecting",{attempt:this.retryCount}),this.reconnectTimer=setTimeout(async()=>{if(this.retryCount<=this.currentConfig.maxRetries&&this.lastConnectionHost&&this.lastConnectionPort)try{console.log(`尝试重新连接... (${this.retryCount}/${this.currentConfig.maxRetries})`),await this.connect(this.lastConnectionHost,this.lastConnectionPort)}catch(e){console.error("重连失败:",e),this.scheduleReconnect()}else console.error("达到最大重试次数，停止重连")},this.currentConfig.retryInterval*this.retryCount)}stopReconnectTimer(){this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=void 0)}emitNetworkEvent(e,t,r){const n={type:e,timestamp:new Date,data:t,message:r};this.networkEvents.push(n),this.networkEvents.length>1e3&&(this.networkEvents=this.networkEvents.slice(-500)),this.emit(e,n)}async testConnection(e,t){const r=Date.now();try{const n=new i.Socket,s=5e3,o=await new Promise(r=>{const i=setTimeout(()=>{n.destroy(),r(!1)},s);n.connect(t,e,()=>{clearTimeout(i),n.destroy(),r(!0)}),n.on("error",()=>{clearTimeout(i),r(!1)})}),a=Date.now()-r;return{testName:"连接测试",passed:o,details:o?`成功连接到 ${e}:${t}`:`无法连接到 ${e}:${t}`,duration:a,timestamp:new Date,severity:o?"info":"error"}}catch(e){return{testName:"连接测试",passed:!1,details:`连接测试失败: ${e}`,duration:Date.now()-r,timestamp:new Date,severity:"error"}}}async testLatency(e,t){const r=Date.now(),n=[];try{for(let r=0;r<5;r++){const r=new i.Socket,s=Date.now();await new Promise((i,o)=>{const a=setTimeout(()=>{r.destroy(),o(new Error("超时"))},2e3);r.connect(t,e,()=>{clearTimeout(a);const e=Date.now()-s;n.push(e),r.destroy(),i()}),r.on("error",e=>{clearTimeout(a),o(e)})}),await new Promise(e=>setTimeout(e,100))}const s=n.reduce((e,t)=>e+t,0)/n.length,o=Math.max(...n),a=Math.min(...n);return{testName:"延迟测试",passed:s<200,details:`平均延迟: ${s.toFixed(1)}ms, 最大: ${o}ms, 最小: ${a}ms`,duration:Date.now()-r,timestamp:new Date,severity:s<100?"info":s<200?"warning":"error"}}catch(e){return{testName:"延迟测试",passed:!1,details:`延迟测试失败: ${e}`,duration:Date.now()-r,timestamp:new Date,severity:"error"}}}async testThroughput(){const e=Date.now();try{if(!this.isConnected||!this.socket)throw new Error("设备未连接");const t=Buffer.alloc(1024,170),r=10;let n=0;for(let e=0;e<r;e++)await this.sendData(t),n+=t.length,await new Promise(e=>setTimeout(e,50));const i=(Date.now()-e)/1e3,s=n/i/1024;return{testName:"吞吐量测试",passed:s>10,details:`吞吐量: ${s.toFixed(2)} KB/s (${n} bytes 在 ${i.toFixed(2)} 秒内)`,duration:Date.now()-e,timestamp:new Date,severity:s>50?"info":s>10?"warning":"error"}}catch(t){return{testName:"吞吐量测试",passed:!1,details:`吞吐量测试失败: ${t}`,duration:Date.now()-e,timestamp:new Date,severity:"error"}}}async testStability(){const e=Date.now();try{const t=500,r=1e4/t;let n=0;for(let e=0;e<r;e++){try{const e=Buffer.from([0]);await this.sendData(e),n++}catch(e){}await new Promise(e=>setTimeout(e,t))}const i=n/r*100;return{testName:"稳定性测试",passed:i>90,details:`稳定性测试: ${i.toFixed(1)}% (${n}/${r} 成功)`,duration:Date.now()-e,timestamp:new Date,severity:i>95?"info":i>90?"warning":"error"}}catch(t){return{testName:"稳定性测试",passed:!1,details:`稳定性测试失败: ${t}`,duration:Date.now()-e,timestamp:new Date,severity:"error"}}}async testDataIntegrity(){const e=Date.now();try{if(!this.isConnected||!this.socket)throw new Error("设备未连接");const t=Buffer.from([85,170,1,2,3,4]);return await this.sendData(t),{testName:"数据完整性测试",passed:!0,details:"数据包发送成功，假设数据完整性良好",duration:Date.now()-e,timestamp:new Date,severity:"info"}}catch(t){return{testName:"数据完整性测试",passed:!1,details:`数据完整性测试失败: ${t}`,duration:Date.now()-e,timestamp:new Date,severity:"error"}}}async checkNetworkConfiguration(e,t){const r=Date.now(),n=[];/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(e)||n.push("IP地址格式无效"),(t<1||t>65535)&&n.push("端口号超出有效范围 (1-65535)"),4045!==t&&n.push("端口号不是Pico Logic Analyzer的默认端口 (4045)"),[/^10\./,/^172\.(1[6-9]|2[0-9]|3[0-1])\./,/^192\.168\./].some(t=>t.test(e))||e.startsWith("127.")||n.push("建议使用私有IP地址或本地地址");const i=0===n.length;return{testName:"网络配置检查",passed:i,details:i?"网络配置正常":`配置问题: ${n.join(", ")}`,duration:Date.now()-r,timestamp:new Date,severity:i?"info":"warning"}}}t.NetworkStabilityService=s},708:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AnalyzerDriverBase=t.OutputPacket=t.CaptureSession=t.BurstInfo=t.AnalyzerChannel=t.getMaxTotalSamples=t.TriggerDelays=t.CaptureError=t.TriggerType=t.CaptureMode=t.AnalyzerDriverType=void 0;const n=r(261);var i,s,o,a;(a=t.AnalyzerDriverType||(t.AnalyzerDriverType={})).Serial="Serial",a.Network="Network",a.Multi="Multi",a.Emulated="Emulated",function(e){e[e.Channels_8=0]="Channels_8",e[e.Channels_16=1]="Channels_16",e[e.Channels_24=2]="Channels_24"}(i=t.CaptureMode||(t.CaptureMode={})),function(e){e.Edge="Edge",e.Complex="Complex",e.Fast="Fast",e.Blast="Blast"}(s=t.TriggerType||(t.TriggerType={})),(o=t.CaptureError||(t.CaptureError={})).None="None",o.Busy="Busy",o.BadParams="BadParams",o.HardwareError="HardwareError",o.UnexpectedError="UnexpectedError",t.TriggerDelays={ComplexTriggerDelay:5,FastTriggerDelay:3},t.getMaxTotalSamples=function(e){return e.minPreSamples+e.maxPostSamples};class c{constructor(){this.channelNumber=0,this.channelName="",this.hidden=!1}get textualChannelNumber(){return`Channel ${this.channelNumber+1}`}toString(){return this.channelName||this.textualChannelNumber}clone(){const e=new c;return e.channelNumber=this.channelNumber,e.channelName=this.channelName,e.channelColor=this.channelColor,e.hidden=this.hidden,this.samples&&(e.samples=new Uint8Array(this.samples)),e}}t.AnalyzerChannel=c;class l{constructor(){this.burstSampleStart=0,this.burstSampleEnd=0,this.burstSampleGap=0n,this.burstTimeGap=0n}getTime(){return this.burstTimeGap<1000n?`${this.burstTimeGap} ns`:this.burstTimeGap<1000000n?`${(Number(this.burstTimeGap)/1e3).toFixed(3)} µs`:this.burstTimeGap<1000000000n?`${(Number(this.burstTimeGap)/1e6).toFixed(3)} ms`:`${(Number(this.burstTimeGap)/1e9).toFixed(3)} s`}toString(){return`Burst: ${this.burstSampleStart} to ${this.burstSampleEnd}\nGap: ${this.getTime()} (${this.burstSampleGap} samples)`}}t.BurstInfo=l;class u{constructor(){this.frequency=0,this.preTriggerSamples=0,this.postTriggerSamples=0,this.loopCount=0,this.measureBursts=!1,this.captureChannels=[],this.triggerType=s.Edge,this.triggerChannel=0,this.triggerInverted=!1,this.triggerBitCount=0,this.triggerPattern=0}get totalSamples(){return this.postTriggerSamples*(this.loopCount+1)+this.preTriggerSamples}clone(){const e=new u;return e.frequency=this.frequency,e.preTriggerSamples=this.preTriggerSamples,e.postTriggerSamples=this.postTriggerSamples,e.loopCount=this.loopCount,e.measureBursts=this.measureBursts,e.triggerType=this.triggerType,e.triggerChannel=this.triggerChannel,e.triggerInverted=this.triggerInverted,e.triggerBitCount=this.triggerBitCount,e.triggerPattern=this.triggerPattern,e.captureChannels=this.captureChannels.map(e=>e.clone()),this.bursts&&(e.bursts=this.bursts.map(e=>{const t=new l;return t.burstSampleStart=e.burstSampleStart,t.burstSampleEnd=e.burstSampleEnd,t.burstSampleGap=e.burstSampleGap,t.burstTimeGap=e.burstTimeGap,t})),e}cloneSettings(){const e=this.clone();return e.captureChannels.forEach(e=>{e.samples=void 0}),e.bursts=void 0,e}}t.CaptureSession=u,t.OutputPacket=class{constructor(){this.dataBuffer=[]}addByte(e){this.dataBuffer.push(255&e)}addBytes(e){for(const t of e)this.addByte(t)}addString(e){for(let t=0;t<e.length;t++)this.addByte(e.charCodeAt(t))}addStruct(e){const t=this.serializeStruct(e);this.addBytes(t)}clear(){this.dataBuffer=[]}serialize(){const e=[];e.push(85),e.push(170);for(const t of this.dataBuffer)170===t||85===t||240===t?(e.push(240),e.push(240^t)):e.push(t);return e.push(170),e.push(85),new Uint8Array(e)}serializeStruct(e){return"triggerType"in e?this.serializeCaptureRequest(e):this.serializeNetConfig(e)}serializeCaptureRequest(e){const t=new ArrayBuffer(50),r=new DataView(t);let n=0;r.setUint8(n++,e.triggerType),r.setUint8(n++,e.trigger),r.setUint8(n++,e.invertedOrCount),r.setUint16(n,e.triggerValue,!0),n+=2;for(let t=0;t<24;t++)r.setUint8(n++,e.channels[t]||0);return r.setUint8(n++,e.channelCount),r.setUint32(n,e.frequency,!0),n+=4,r.setUint32(n,e.preSamples,!0),n+=4,r.setUint32(n,e.postSamples,!0),n+=4,r.setUint8(n++,e.loopCount),r.setUint8(n++,e.measure),r.setUint8(n++,e.captureMode),new Uint8Array(t)}serializeNetConfig(e){const t=new ArrayBuffer(115),r=new DataView(t);let n=0;const i=(new TextEncoder).encode(e.accessPointName.substring(0,32));for(let e=0;e<33;e++)r.setUint8(n++,e<i.length?i[e]:0);const s=(new TextEncoder).encode(e.password.substring(0,63));for(let e=0;e<64;e++)r.setUint8(n++,e<s.length?s[e]:0);const o=(new TextEncoder).encode(e.ipAddress.substring(0,15));for(let e=0;e<16;e++)r.setUint8(n++,e<o.length?o[e]:0);return r.setUint16(n,e.port,!0),new Uint8Array(t)}};class h extends n.EventEmitter{get minFrequency(){return Math.floor(2*this.maxFrequency/65535)}getCaptureMode(e){const t=e.length>0?Math.max(...e):0;return t<8?i.Channels_8:t<16?i.Channels_16:i.Channels_24}getLimits(e){const t=this.getCaptureMode(e),r=this.bufferSize/(t===i.Channels_8?1:t===i.Channels_16?2:4);return{minPreSamples:2,maxPreSamples:Math.floor(r/10),minPostSamples:2,maxPostSamples:r-2}}getDeviceInfo(){const e=[];return e.push(this.getLimits(Array.from({length:8},(e,t)=>t))),e.push(this.getLimits(Array.from({length:16},(e,t)=>t))),e.push(this.getLimits(Array.from({length:24},(e,t)=>t))),{name:this.deviceVersion??"Unknown",maxFrequency:this.maxFrequency,blastFrequency:this.blastFrequency,channels:this.channelCount,bufferSize:this.bufferSize,modeLimits:e}}getVoltageStatus(){return Promise.resolve("UNSUPPORTED")}sendNetworkConfig(e,t,r,n){return Promise.resolve(!1)}dispose(){this.removeAllListeners()}}t.AnalyzerDriverBase=h},876:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NetConfig=t.CaptureRequest=t.OutputPacket=t.AnalyzerDriverBase=void 0;const n=r(261),i=r(163);class s extends n.EventEmitter{get minFrequency(){return Math.floor(2*this.maxFrequency/65535)}getCaptureMode(e){const t=Math.max(...e,0);return t<8?i.CaptureMode.Channels_8:t<16?i.CaptureMode.Channels_16:i.CaptureMode.Channels_24}getLimits(e){let t;switch(this.getCaptureMode(e)){case i.CaptureMode.Channels_8:t=1;break;case i.CaptureMode.Channels_16:t=2;break;case i.CaptureMode.Channels_24:t=4}const r=Math.floor(this.bufferSize/t);return{minPreSamples:2,maxPreSamples:Math.floor(r/10),minPostSamples:2,maxPostSamples:r-2,get maxTotalSamples(){return this.minPreSamples+this.maxPostSamples}}}getDeviceInfo(){const e=[this.getLimits(Array.from({length:8},(e,t)=>t)),this.getLimits(Array.from({length:16},(e,t)=>t)),this.getLimits(Array.from({length:24},(e,t)=>t))];return{name:this.deviceVersion??"Unknown",maxFrequency:this.maxFrequency,blastFrequency:this.blastFrequency,channels:this.channelCount,bufferSize:this.bufferSize,modeLimits:e}}getVoltageStatus(){return Promise.resolve("UNSUPPORTED")}sendNetworkConfig(e,t,r,n){return Promise.resolve(!1)}dispose(){this.removeAllListeners()}emitCaptureCompleted(e){this.emit("captureCompleted",e)}emitError(e){this.emit("error",e)}emitStatusChanged(e){this.emit("statusChanged",e)}}t.AnalyzerDriverBase=s,t.OutputPacket=class{constructor(){this.dataBuffer=[]}addByte(e){this.dataBuffer.push(255&e)}addBytes(e){for(const t of e)this.addByte(t)}addString(e){for(let t=0;t<e.length;t++)this.addByte(e.charCodeAt(t))}addStruct(e){try{const t=this.serializeStruct(e);this.addBytes(t)}catch(e){throw new Error(`结构体序列化失败: ${e instanceof Error?e.message:"未知错误"}`)}}clear(){this.dataBuffer=[]}serialize(){const e=[];e.push(85,170);for(let t=0;t<this.dataBuffer.length;t++){const r=this.dataBuffer[t];170===r||85===r||240===r?(e.push(240),e.push(240^r)):e.push(r)}return e.push(170,85),new Uint8Array(e)}serializeStruct(e){if(!e)throw new Error("结构体不能为null或undefined");if("function"==typeof e.serialize){const t=e.serialize();if(!(t instanceof Uint8Array))throw new Error("结构体serialize方法必须返回Uint8Array");return t}throw new Error("结构体必须实现serialize方法")}};class o{constructor(){this.triggerType=0,this.trigger=0,this.invertedOrCount=0,this.triggerValue=0,this.channelCount=0,this.frequency=0,this.preSamples=0,this.postSamples=0,this.loopCount=0,this.measure=0,this.captureMode=0,this.channels=new Uint8Array(24)}static fromConfiguration(e){const t=new o;t.triggerType=e.triggerType,t.trigger=e.triggerChannel,t.invertedOrCount=e.triggerInverted?1:0,t.triggerValue=e.triggerPattern||0,t.channelCount=e.captureChannels.length,t.frequency=e.frequency,t.preSamples=e.preTriggerSamples,t.postSamples=e.postTriggerSamples,t.loopCount=e.loopCount,t.measure=e.measureBursts?1:0,t.captureMode=e.captureMode||i.CaptureMode.Channels_8;for(const r of e.captureChannels)r>=0&&r<24&&(t.channels[r]=1);return t}serialize(){const e=new ArrayBuffer(this.getSize()),t=new DataView(e);let r=0;t.setUint8(r++,255&this.triggerType),t.setUint8(r++,255&this.trigger),t.setUint8(r++,255&this.invertedOrCount),t.setUint16(r,65535&this.triggerValue,!0),r+=2;for(let e=0;e<24;e++)t.setUint8(r++,255&this.channels[e]);return t.setUint8(r++,255&this.channelCount),t.setUint32(r,this.frequency>>>0,!0),r+=4,t.setUint32(r,this.preSamples>>>0,!0),r+=4,t.setUint32(r,this.postSamples>>>0,!0),r+=4,t.setUint8(r++,255&this.loopCount),t.setUint8(r++,255&this.measure),t.setUint8(r++,255&this.captureMode),new Uint8Array(e)}getSize(){return 45}}t.CaptureRequest=o,t.NetConfig=class{constructor(e="",t="",r="",n=0){this.accessPointName="",this.password="",this.ipAddress="",this.port=0,this.accessPointName=e,this.password=t,this.ipAddress=r,this.port=n}serialize(){const e=new ArrayBuffer(this.getSize()),t=new DataView(e);let r=0;const n=(new TextEncoder).encode(this.accessPointName);for(let e=0;e<33;e++)t.setUint8(r++,e<n.length?n[e]:0);const i=(new TextEncoder).encode(this.password);for(let e=0;e<64;e++)t.setUint8(r++,e<i.length?i[e]:0);const s=(new TextEncoder).encode(this.ipAddress);for(let e=0;e<16;e++)t.setUint8(r++,e<s.length?s[e]:0);return t.setUint16(r,this.port,!0),new Uint8Array(e)}getSize(){return 115}}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=r(635).__importStar(r(398)),i=r(12),s=r(456),o=r(665),a=r(694);let c,l;async function u(e,r){try{t.window.showInformationMessage(`正在连接设备: ${e}`);const n=await s.hardwareDriverManager.connectToDevice(e,r);n.success?t.window.showInformationMessage(`设备连接成功: ${n.deviceInfo?.name||e}`):t.window.showErrorMessage(`设备连接失败: ${n.error}`)}catch(e){t.window.showErrorMessage(`设备连接异常: ${e}`)}}function h(e){const t=e.split(":");if(2!==t.length)throw new Error("网络地址格式无效，应为 host:port");const r=t[0].trim(),n=parseInt(t[1].trim(),10);if(!r||isNaN(n)||n<1||n>65535)throw new Error("网络地址格式无效");return{host:r,port:n}}e.activate=function(e,r){console.log("VSCode Logic Analyzer插件正在激活..."),c=r?.wifiDiscoveryService||new o.WiFiDeviceDiscovery,l=r?.networkStabilityService||new a.NetworkStabilityService,e.subscriptions.push(i.LACEditorProvider.register(e));const n=t.commands.registerCommand("logicAnalyzer.openAnalyzer",()=>{t.window.showInformationMessage("打开逻辑分析器界面!")}),p=t.commands.registerCommand("logicAnalyzer.connectDevice",async()=>{try{t.window.showInformationMessage("正在检测逻辑分析器设备...");const e=await s.hardwareDriverManager.detectHardware();if(0===e.length){const e=await t.window.showWarningMessage("未检测到逻辑分析器设备","手动指定","网络连接","取消");if("手动指定"===e){const e=await t.window.showInputBox({prompt:"请输入设备路径 (如: /dev/ttyUSB0 或 COM3)",placeHolder:"/dev/ttyUSB0"});e&&await u(e)}else if("网络连接"===e){const e=await t.window.showInputBox({prompt:"请输入网络地址 (如: 192.168.1.100:3030)",placeHolder:"192.168.1.100:3030"});e&&await u("network",{networkConfig:h(e)})}return}const r=e.map(e=>({label:e.name,description:`${e.type} - ${e.connectionPath}`,detail:`置信度: ${Math.round(100*e.confidence)}%`,device:e}));r.push({label:"$(broadcast) 自动检测",description:"自动选择最佳匹配设备",detail:"让系统自动选择置信度最高的设备",device:{id:"autodetect",name:"自动检测",type:"Auto",connectionPath:"",confidence:1}},{label:"$(globe) 网络连接",description:"连接网络逻辑分析器",detail:"通过TCP/IP连接网络设备",device:{id:"network",name:"网络设备",type:"Network",connectionPath:"",confidence:.5}});const n=await t.window.showQuickPick(r,{placeHolder:"选择要连接的逻辑分析器设备",matchOnDescription:!0,matchOnDetail:!0});n&&await u(n.device.id)}catch(e){t.window.showErrorMessage(`设备检测失败: ${e}`)}}),d=t.commands.registerCommand("logicAnalyzer.startCapture",()=>{t.window.showInformationMessage("开始数据采集!")}),m=t.commands.registerCommand("logicAnalyzer.scanNetworkDevices",async()=>{try{t.window.showInformationMessage("正在扫描网络设备...");const e=await c.scanForDevices({timeout:5e3,concurrency:30,deepScan:!0,enableBroadcast:!0});if(e.devices.length>0){const r=e.devices.map(e=>({label:e.deviceName||"Unknown Device",description:`${e.ipAddress}:${e.port}`,detail:`${e.version||"Unknown Version"} - 响应时间: ${e.responseTime}ms`,device:e})),n=await t.window.showQuickPick(r,{placeHolder:"选择要连接的网络设备",matchOnDescription:!0,matchOnDetail:!0});n&&await async function(e,r){try{if(t.window.showInformationMessage(`正在连接网络设备: ${e}:${r}`),await l.connect(e,r)){const n=`${e}:${r}`,i=await s.hardwareDriverManager.connectToDevice("network",{networkConfig:{host:e,port:r}});if(i.success){t.window.showInformationMessage(`网络设备连接成功: ${i.deviceInfo?.name||n}`);const e=l.getConnectionQuality();console.log("连接质量:",e)}else await l.disconnect(),t.window.showErrorMessage(`网络设备连接失败: ${i.error}`)}else t.window.showErrorMessage(`无法连接到网络设备: ${e}:${r}`)}catch(e){t.window.showErrorMessage(`网络设备连接异常: ${e}`)}}(n.device.ipAddress,n.device.port)}else t.window.showWarningMessage("未发现网络设备")}catch(e){t.window.showErrorMessage(`网络设备扫描失败: ${e}`)}}),g=t.commands.registerCommand("logicAnalyzer.networkDiagnostics",async()=>{const e=await t.window.showInputBox({prompt:"请输入要诊断的网络地址 (如: 192.168.1.100:4045)",placeHolder:"192.168.1.100:4045"});if(e)try{const{host:r,port:n}=h(e);t.window.showInformationMessage("正在运行网络诊断...");const i=(await l.runDiagnostics(r,n)).map(e=>`${e.testName}: ${e.passed?"✅ 通过":"❌ 失败"} - ${e.details}`).join("\n"),s=await t.workspace.openTextDocument({content:`网络诊断报告 - ${e}\n诊断时间: ${(new Date).toLocaleString()}\n================================\n\n${i}`,language:"plaintext"});await t.window.showTextDocument(s)}catch(e){t.window.showErrorMessage(`网络诊断失败: ${e}`)}}),f=t.commands.registerCommand("logicAnalyzer.configureWiFi",async()=>{const e=s.hardwareDriverManager.getCurrentDevice();if(!e)return void t.window.showWarningMessage("请先连接到设备");const r=await t.window.showInputBox({prompt:"请输入WiFi网络名称 (SSID)",placeHolder:"MyWiFiNetwork"});if(!r)return;const n=await t.window.showInputBox({prompt:"请输入WiFi密码",password:!0,placeHolder:"********"});if(!n)return;const i=await t.window.showInputBox({prompt:"请输入静态IP地址 (可选，留空使用DHCP)",placeHolder:"192.168.1.100"}),o=await t.window.showInputBox({prompt:"请输入TCP端口号",value:"4045",validateInput:e=>{const t=parseInt(e);return isNaN(t)||t<1024||t>65535?"端口号必须在1024-65535之间":null}});if(!o)return;const a=parseInt(o);try{t.window.showInformationMessage("正在配置WiFi设置..."),await e.sendNetworkConfig(r,n,i||"0.0.0.0",a)?t.window.showInformationMessage("WiFi配置已发送成功！设备将重启并连接到WiFi网络。"):t.window.showErrorMessage("WiFi配置发送失败")}catch(e){t.window.showErrorMessage(`WiFi配置失败: ${e}`)}});e.subscriptions.push(n,p,d,m,g,f),console.log("VSCode Logic Analyzer插件激活完成")},e.deactivate=function(){console.log("VSCode Logic Analyzer插件正在停用..."),c&&(c.stopScan(),c.clearCache()),l&&l.disconnect().catch(e=>{console.error("清理网络稳定性服务失败:",e)}),s.hardwareDriverManager.dispose().catch(e=>{console.error("清理硬件驱动管理器失败:",e)})}})(),module.exports=n})();
//# sourceMappingURL=extension.js.map