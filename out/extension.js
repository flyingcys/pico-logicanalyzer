/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/drivers/AnalyzerDriverBase.ts":
/*!*******************************************!*\
  !*** ./src/drivers/AnalyzerDriverBase.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NetConfig = exports.CaptureRequest = exports.OutputPacket = exports.AnalyzerDriverBase = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * 逻辑分析器驱动抽象基类\n * 基于C# AnalyzerDriverBase的TypeScript移植\n */\nclass AnalyzerDriverBase extends events_1.EventEmitter {\n    // 计算属性\n    get minFrequency() {\n        return Math.floor((this.maxFrequency * 2) / 65535);\n    }\n    // 设备信息方法\n    getCaptureMode(channels) {\n        const maxChannel = Math.max(...channels, 0);\n        if (maxChannel < 8)\n            return AnalyzerTypes_1.CaptureMode.Channels_8;\n        if (maxChannel < 16)\n            return AnalyzerTypes_1.CaptureMode.Channels_16;\n        return AnalyzerTypes_1.CaptureMode.Channels_24;\n    }\n    getLimits(channels) {\n        const mode = this.getCaptureMode(channels);\n        // 根据通道模式计算总样本数\n        let divisor;\n        switch (mode) {\n            case AnalyzerTypes_1.CaptureMode.Channels_8:\n                divisor = 1;\n                break;\n            case AnalyzerTypes_1.CaptureMode.Channels_16:\n                divisor = 2;\n                break;\n            case AnalyzerTypes_1.CaptureMode.Channels_24:\n                divisor = 4;\n                break;\n        }\n        const totalSamples = Math.floor(this.bufferSize / divisor);\n        const limits = {\n            minPreSamples: 2,\n            maxPreSamples: Math.floor(totalSamples / 10),\n            minPostSamples: 2,\n            maxPostSamples: totalSamples - 2,\n            get maxTotalSamples() {\n                return this.minPreSamples + this.maxPostSamples;\n            }\n        };\n        return limits;\n    }\n    getDeviceInfo() {\n        const limits = [\n            this.getLimits(Array.from({ length: 8 }, (_, i) => i)),\n            this.getLimits(Array.from({ length: 16 }, (_, i) => i)),\n            this.getLimits(Array.from({ length: 24 }, (_, i) => i)) // 0-23\n        ];\n        return {\n            name: this.deviceVersion ?? 'Unknown',\n            maxFrequency: this.maxFrequency,\n            blastFrequency: this.blastFrequency,\n            channels: this.channelCount,\n            bufferSize: this.bufferSize,\n            modeLimits: limits\n        };\n    }\n    // 网络方法 - 虚拟实现，子类可以重写\n    getVoltageStatus() {\n        return Promise.resolve('UNSUPPORTED');\n    }\n    sendNetworkConfig(accessPointName, password, ipAddress, port) {\n        return Promise.resolve(false);\n    }\n    // 资源清理\n    dispose() {\n        this.removeAllListeners();\n    }\n    // 事件触发辅助方法\n    emitCaptureCompleted(args) {\n        this.emit('captureCompleted', args);\n    }\n    emitError(error) {\n        this.emit('error', error);\n    }\n    emitStatusChanged(status) {\n        this.emit('statusChanged', status);\n    }\n}\nexports.AnalyzerDriverBase = AnalyzerDriverBase;\n/**\n * 输出数据包类\n * 实现C#版本的OutputPacket功能，包括转义机制\n */\nclass OutputPacket {\n    constructor() {\n        this.dataBuffer = [];\n    }\n    addByte(value) {\n        this.dataBuffer.push(value & 0xff);\n    }\n    addBytes(values) {\n        for (const value of values) {\n            this.addByte(value);\n        }\n    }\n    addString(text) {\n        // ASCII编码\n        for (let i = 0; i < text.length; i++) {\n            this.addByte(text.charCodeAt(i));\n        }\n    }\n    addStruct(struct) {\n        // TypeScript中的结构体序列化\n        const buffer = this.serializeStruct(struct);\n        this.addBytes(buffer);\n    }\n    clear() {\n        this.dataBuffer = [];\n    }\n    /**\n     * 序列化数据包，包含转义机制\n     * 协议格式: 0x55 0xAA [转义后的数据] 0xAA 0x55\n     * 转义规则: 0xAA/0x55/0xF0 -> 0xF0 + (原值 ^ 0xF0)\n     */\n    serialize() {\n        const finalData = [];\n        // 起始标记\n        finalData.push(0x55, 0xaa);\n        // 转义数据\n        for (let i = 0; i < this.dataBuffer.length; i++) {\n            const byte = this.dataBuffer[i];\n            if (byte === 0xaa || byte === 0x55 || byte === 0xf0) {\n                finalData.push(0xf0);\n                finalData.push(byte ^ 0xf0);\n            }\n            else {\n                finalData.push(byte);\n            }\n        }\n        // 结束标记\n        finalData.push(0xaa, 0x55);\n        return new Uint8Array(finalData);\n    }\n    /**\n     * 结构体序列化辅助方法\n     */\n    serializeStruct(struct) {\n        // 这里需要根据具体的结构体类型进行序列化\n        // 实际实现会在具体的结构体类中完成\n        if (struct && typeof struct.serialize === 'function') {\n            return struct.serialize();\n        }\n        throw new Error('结构体必须实现serialize方法');\n    }\n}\nexports.OutputPacket = OutputPacket;\n/**\n * 采集请求结构\n * 对应C#的CaptureRequest结构体，必须保持精确的内存布局\n */\nclass CaptureRequest {\n    constructor() {\n        this.triggerType = 0; // byte\n        this.trigger = 0; // byte\n        this.invertedOrCount = 0; // byte\n        this.triggerValue = 0; // ushort (16位)\n        this.channelCount = 0; // byte\n        this.frequency = 0; // uint32 (32位)\n        this.preSamples = 0; // uint32 (32位)\n        this.postSamples = 0; // uint32 (32位)\n        this.loopCount = 0; // byte\n        this.measure = 0; // byte\n        this.captureMode = 0; // byte\n        this.channels = new Uint8Array(24);\n    }\n    /**\n     * 从CaptureConfiguration创建CaptureRequest\n     */\n    static fromConfiguration(config) {\n        const request = new CaptureRequest();\n        request.triggerType = config.triggerType;\n        request.trigger = config.triggerChannel;\n        request.invertedOrCount = config.triggerInverted ? 1 : 0;\n        request.triggerValue = config.triggerPattern || 0;\n        request.channelCount = config.captureChannels.length;\n        request.frequency = config.frequency;\n        request.preSamples = config.preTriggerSamples;\n        request.postSamples = config.postTriggerSamples;\n        request.loopCount = config.loopCount;\n        request.measure = config.measureBursts ? 1 : 0;\n        request.captureMode = config.captureMode || AnalyzerTypes_1.CaptureMode.Channels_8;\n        // 设置通道数组\n        for (let i = 0; i < config.captureChannels.length && i < 24; i++) {\n            request.channels[config.captureChannels[i]] = 1;\n        }\n        return request;\n    }\n    /**\n     * 序列化为字节数组，保持与C#版本的精确布局\n     */\n    serialize() {\n        const buffer = new ArrayBuffer(this.getSize());\n        const view = new DataView(buffer);\n        let offset = 0;\n        // 按照C#结构体的精确顺序写入\n        view.setUint8(offset++, this.triggerType);\n        view.setUint8(offset++, this.trigger);\n        view.setUint8(offset++, this.invertedOrCount);\n        view.setUint16(offset, this.triggerValue, true); // little-endian\n        offset += 2;\n        // 通道数组\n        for (let i = 0; i < 24; i++) {\n            view.setUint8(offset++, this.channels[i]);\n        }\n        view.setUint8(offset++, this.channelCount);\n        view.setUint32(offset, this.frequency, true); // little-endian\n        offset += 4;\n        view.setUint32(offset, this.preSamples, true); // little-endian\n        offset += 4;\n        view.setUint32(offset, this.postSamples, true); // little-endian\n        offset += 4;\n        view.setUint8(offset++, this.loopCount);\n        view.setUint8(offset++, this.measure);\n        view.setUint8(offset++, this.captureMode);\n        return new Uint8Array(buffer);\n    }\n    /**\n     * 获取结构体大小（字节）\n     */\n    getSize() {\n        // 1 + 1 + 1 + 2 + 24 + 1 + 4 + 4 + 4 + 1 + 1 + 1 = 45 bytes\n        return 45;\n    }\n}\nexports.CaptureRequest = CaptureRequest;\n/**\n * 网络配置结构\n * 对应C#的NetConfig结构体\n */\nclass NetConfig {\n    constructor(accessPointName = '', password = '', ipAddress = '', port = 0) {\n        this.accessPointName = ''; // 33字节固定长度\n        this.password = ''; // 64字节固定长度\n        this.ipAddress = ''; // 16字节固定长度\n        this.port = 0; // ushort (16位)\n        this.accessPointName = accessPointName;\n        this.password = password;\n        this.ipAddress = ipAddress;\n        this.port = port;\n    }\n    /**\n     * 序列化为字节数组\n     */\n    serialize() {\n        const buffer = new ArrayBuffer(this.getSize());\n        const view = new DataView(buffer);\n        let offset = 0;\n        // AccessPointName - 33字节固定长度\n        const apNameBytes = new TextEncoder().encode(this.accessPointName);\n        for (let i = 0; i < 33; i++) {\n            view.setUint8(offset++, i < apNameBytes.length ? apNameBytes[i] : 0);\n        }\n        // Password - 64字节固定长度\n        const passwordBytes = new TextEncoder().encode(this.password);\n        for (let i = 0; i < 64; i++) {\n            view.setUint8(offset++, i < passwordBytes.length ? passwordBytes[i] : 0);\n        }\n        // IPAddress - 16字节固定长度\n        const ipBytes = new TextEncoder().encode(this.ipAddress);\n        for (let i = 0; i < 16; i++) {\n            view.setUint8(offset++, i < ipBytes.length ? ipBytes[i] : 0);\n        }\n        // Port - 2字节\n        view.setUint16(offset, this.port, true); // little-endian\n        return new Uint8Array(buffer);\n    }\n    /**\n     * 获取结构体大小（字节）\n     */\n    getSize() {\n        // 33 + 64 + 16 + 2 = 115 bytes\n        return 115;\n    }\n}\nexports.NetConfig = NetConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/drivers/AnalyzerDriverBase.ts\n\n}");

/***/ }),

/***/ "./src/drivers/HardwareDriverManager.ts":
/*!**********************************************!*\
  !*** ./src/drivers/HardwareDriverManager.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hardwareDriverManager = exports.RigolSiglentDetector = exports.SigrokDetector = exports.SaleaeDetector = exports.NetworkDetector = exports.SerialDetector = exports.HardwareDriverManager = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst LogicAnalyzerDriver_1 = __webpack_require__(/*! ./LogicAnalyzerDriver */ \"./src/drivers/LogicAnalyzerDriver.ts\");\nconst SaleaeLogicDriver_1 = __webpack_require__(/*! ./SaleaeLogicDriver */ \"./src/drivers/SaleaeLogicDriver.ts\");\nconst RigolSiglentDriver_1 = __webpack_require__(/*! ./RigolSiglentDriver */ \"./src/drivers/RigolSiglentDriver.ts\");\nconst SigrokAdapter_1 = __webpack_require__(/*! ./SigrokAdapter */ \"./src/drivers/SigrokAdapter.ts\");\nconst NetworkLogicAnalyzerDriver_1 = __webpack_require__(/*! ./NetworkLogicAnalyzerDriver */ \"./src/drivers/NetworkLogicAnalyzerDriver.ts\");\nconst MultiAnalyzerDriver_1 = __webpack_require__(/*! ./MultiAnalyzerDriver */ \"./src/drivers/MultiAnalyzerDriver.ts\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * 硬件驱动管理器\n * 负责驱动注册、设备检测、驱动匹配和实例化\n */\nclass HardwareDriverManager extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.drivers = new Map();\n        this.activeConnections = new Map();\n        this.detectors = [];\n        this.detectionCache = new Map();\n        this.cacheTimeout = 30000; // 30秒缓存超时\n        this.initializeBuiltinDrivers();\n        this.initializeDetectors();\n    }\n    /**\n     * 初始化内置驱动\n     */\n    initializeBuiltinDrivers() {\n        console.log('初始化内置驱动...');\n        // 注册 Pico 逻辑分析器驱动（最高优先级）\n        this.registerDriver({\n            id: 'pico-logic-analyzer',\n            name: 'Pico Logic Analyzer',\n            description: 'Raspberry Pi Pico based logic analyzer driver',\n            version: '1.0.0',\n            driverClass: LogicAnalyzerDriver_1.LogicAnalyzerDriver,\n            supportedDevices: ['pico', 'rp2040', 'logic-analyzer', 'analyzer'],\n            priority: 100\n        });\n        // 注册Saleae Logic兼容驱动\n        this.registerDriver({\n            id: 'saleae-logic',\n            name: 'Saleae Logic Analyzer',\n            description: 'Saleae Logic series compatible driver',\n            version: '1.0.0',\n            driverClass: SaleaeLogicDriver_1.SaleaeLogicDriver,\n            supportedDevices: ['saleae', 'logic16', 'logic8', 'logic-pro'],\n            priority: 90\n        });\n        // 注册Rigol/Siglent驱动\n        this.registerDriver({\n            id: 'rigol-siglent',\n            name: 'Rigol/Siglent Logic Analyzer',\n            description: 'Rigol and Siglent instruments with logic analyzer capability',\n            version: '1.0.0',\n            driverClass: RigolSiglentDriver_1.RigolSiglentDriver,\n            supportedDevices: ['rigol', 'siglent', 'ds1000z', 'ds2000', 'sds'],\n            priority: 80\n        });\n        // 注册sigrok通用适配器\n        this.registerDriver({\n            id: 'sigrok-adapter',\n            name: 'Sigrok Universal Adapter',\n            description: 'Universal adapter for 80+ sigrok-supported devices',\n            version: '1.0.0',\n            driverClass: SigrokAdapter_1.SigrokAdapter,\n            supportedDevices: ['fx2lafw', 'hantek', 'kingst', 'chronovu', 'openbench'],\n            priority: 70\n        });\n        // 注册网络设备驱动\n        this.registerDriver({\n            id: 'network-analyzer',\n            name: 'Network Logic Analyzer',\n            description: 'Generic network-based logic analyzer driver',\n            version: '1.0.0',\n            driverClass: NetworkLogicAnalyzerDriver_1.NetworkLogicAnalyzerDriver,\n            supportedDevices: ['network', 'tcp', 'udp', 'wifi', 'ethernet'],\n            priority: 60\n        });\n        console.log(`已注册 ${this.drivers.size} 个内置驱动`);\n    }\n    /**\n     * 初始化设备检测器\n     */\n    initializeDetectors() {\n        this.detectors = [\n            new SerialDetector(),\n            new NetworkDetector(),\n            new SaleaeDetector(),\n            new SigrokDetector(),\n            new RigolSiglentDetector()\n        ];\n        console.log(`初始化了 ${this.detectors.length} 个设备检测器`);\n    }\n    /**\n     * 注册驱动\n     */\n    registerDriver(registration) {\n        this.drivers.set(registration.id, registration);\n        this.emit('driverRegistered', registration);\n    }\n    /**\n     * 注销驱动\n     */\n    unregisterDriver(driverId) {\n        const removed = this.drivers.delete(driverId);\n        if (removed) {\n            this.emit('driverUnregistered', driverId);\n        }\n        return removed;\n    }\n    /**\n     * 获取已注册的驱动列表\n     */\n    getRegisteredDrivers() {\n        return Array.from(this.drivers.values()).sort((a, b) => b.priority - a.priority);\n    }\n    /**\n     * 检测硬件设备\n     */\n    async detectHardware(useCache = true) {\n        const cacheKey = 'hardware-detection';\n        // 检查缓存\n        if (useCache && this.detectionCache.has(cacheKey)) {\n            const cached = this.detectionCache.get(cacheKey);\n            return cached;\n        }\n        try {\n            console.log('开始硬件检测...');\n            // 并行执行所有检测器\n            const detectionPromises = this.detectors.map(detector => this.safeDetect(detector));\n            const results = await Promise.all(detectionPromises);\n            const allDevices = results.flat();\n            // 合并和排序结果\n            const mergedDevices = this.mergeAndRankResults(allDevices);\n            // 缓存结果\n            this.detectionCache.set(cacheKey, mergedDevices);\n            setTimeout(() => {\n                this.detectionCache.delete(cacheKey);\n            }, this.cacheTimeout);\n            console.log(`检测到 ${mergedDevices.length} 个设备`);\n            this.emit('devicesDetected', mergedDevices);\n            return mergedDevices;\n        }\n        catch (error) {\n            console.error('Hardware detection failed:', error);\n            return [];\n        }\n    }\n    /**\n     * 安全执行设备检测\n     */\n    async safeDetect(detector) {\n        try {\n            return await detector.detect();\n        }\n        catch (error) {\n            console.warn(`Detector ${detector.name} failed:`, error);\n            return [];\n        }\n    }\n    /**\n     * 匹配设备驱动\n     */\n    async matchDriver(device) {\n        // 精确匹配 - 基于设备类型和驱动支持列表\n        for (const driver of this.getRegisteredDrivers()) {\n            if (this.isExactMatch(device, driver)) {\n                return driver;\n            }\n        }\n        // 通用匹配 - 基于连接类型\n        for (const driver of this.getRegisteredDrivers()) {\n            if (this.isGenericMatch(device, driver)) {\n                return driver;\n            }\n        }\n        return null;\n    }\n    /**\n     * 精确匹配\n     */\n    isExactMatch(device, driver) {\n        return driver.supportedDevices.some(supported => device.id.includes(supported) || device.name.toLowerCase().includes(supported.toLowerCase()));\n    }\n    /**\n     * 通用匹配\n     */\n    isGenericMatch(device, driver) {\n        // 基于设备类型和驱动类型的通用匹配逻辑\n        switch (device.type) {\n            case 'serial':\n                return driver.id === 'pico-logic-analyzer' || driver.id === 'sigrok-adapter';\n            case 'network':\n                return driver.id === 'saleae-logic' ||\n                    driver.id === 'rigol-siglent' ||\n                    driver.id === 'network-analyzer';\n            case 'usb':\n                return driver.id === 'sigrok-adapter';\n            default:\n                return false;\n        }\n    }\n    /**\n     * 创建驱动实例\n     */\n    createDriver(device) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const driverRegistration = await this.matchDriver(device);\n                if (!driverRegistration) {\n                    reject(new Error(`No suitable driver found for device: ${device.name}`));\n                    return;\n                }\n                const driver = this.createDriverInstance(driverRegistration.driverClass, device.connectionString);\n                this.emit('driverCreated', { device, driver, registration: driverRegistration });\n                resolve(driver);\n            }\n            catch (error) {\n                reject(new Error(`Failed to create driver for device ${device.name}: ${error}`));\n            }\n        });\n    }\n    /**\n     * 创建驱动实例的内部方法\n     */\n    createDriverInstance(DriverClass, connectionString) {\n        // 特殊处理不同类型的驱动\n        if (DriverClass === NetworkLogicAnalyzerDriver_1.NetworkLogicAnalyzerDriver) {\n            // 网络驱动需要解析host:port\n            const parts = connectionString.split(':');\n            const host = parts[0] || 'localhost';\n            const port = parseInt(parts[1] || '24000', 10);\n            return new NetworkLogicAnalyzerDriver_1.NetworkLogicAnalyzerDriver(host, port);\n        }\n        else if (DriverClass === SigrokAdapter_1.SigrokAdapter) {\n            // Sigrok适配器需要解析driver:connection\n            const parts = connectionString.split(':');\n            const driver = parts[0] || 'fx2lafw';\n            const deviceId = parts[1] || '';\n            return new SigrokAdapter_1.SigrokAdapter(driver, deviceId);\n        }\n        else {\n            // 其他驱动使用标准构造函数\n            return new DriverClass(connectionString);\n        }\n    }\n    /**\n     * 自动检测并连接设备\n     */\n    async autoConnect() {\n        const devices = await this.detectHardware();\n        if (devices.length === 0) {\n            throw new Error('No compatible devices found');\n        }\n        // 尝试连接置信度最高的设备\n        const bestDevice = devices[0];\n        try {\n            return await this.createDriver(bestDevice);\n        }\n        catch (error) {\n            // 如果第一个设备连接失败，尝试其他设备\n            for (let i = 1; i < Math.min(devices.length, 3); i++) {\n                try {\n                    return await this.createDriver(devices[i]);\n                }\n                catch {\n                    continue;\n                }\n            }\n            throw new Error('Failed to connect to any detected device');\n        }\n    }\n    /**\n     * 合并和排序检测结果\n     */\n    mergeAndRankResults(devices) {\n        // 去重：基于connectionString去重\n        const uniqueDevices = new Map();\n        for (const device of devices) {\n            const existing = uniqueDevices.get(device.connectionString);\n            if (!existing || device.confidence > existing.confidence) {\n                uniqueDevices.set(device.connectionString, device);\n            }\n        }\n        // 按置信度排序\n        return Array.from(uniqueDevices.values()).sort((a, b) => b.confidence - a.confidence);\n    }\n    /**\n     * 创建多设备驱动\n     */\n    createMultiDeviceDriver(connectionStrings) {\n        if (connectionStrings.length < 2 || connectionStrings.length > 5) {\n            throw new Error('多设备驱动需要2-5个连接字符串');\n        }\n        const multiDriver = new MultiAnalyzerDriver_1.MultiAnalyzerDriver(connectionStrings);\n        this.emit('multiDriverCreated', { connectionStrings, driver: multiDriver });\n        return multiDriver;\n    }\n    /**\n     * 获取支持的sigrok设备列表\n     */\n    getSupportedSigrokDevices() {\n        return SigrokAdapter_1.SigrokAdapter.getSupportedDevices();\n    }\n    /**\n     * 清理资源\n     */\n    dispose() {\n        this.detectionCache.clear();\n        this.removeAllListeners();\n    }\n}\nexports.HardwareDriverManager = HardwareDriverManager;\n/**\n * 串口设备检测器\n */\nclass SerialDetector {\n    constructor() {\n        this.name = 'Serial Port Detector';\n    }\n    async detect() {\n        const devices = [];\n        try {\n            // 使用serialport库检测串口设备\n            const { SerialPort } = __webpack_require__(/*! serialport */ \"serialport\");\n            const ports = await SerialPort.list();\n            for (const port of ports) {\n                // 检测Pico逻辑分析器特征\n                if (this.isPicoAnalyzer(port)) {\n                    devices.push({\n                        id: `serial-${port.path}`,\n                        name: `Logic Analyzer (${port.path})`,\n                        type: 'serial',\n                        connectionString: port.path,\n                        driverType: AnalyzerTypes_1.AnalyzerDriverType.Serial,\n                        confidence: 80\n                    });\n                }\n            }\n        }\n        catch (error) {\n            console.warn('Serial port detection failed:', error);\n        }\n        return devices;\n    }\n    isPicoAnalyzer(port) {\n        // 检测Pico设备的特征\n        return (port.vendorId === '2E8A' || // Raspberry Pi Foundation\n            port.productId === '0003' || // Pico\n            (port.manufacturer && port.manufacturer.includes('Pico')));\n    }\n}\nexports.SerialDetector = SerialDetector;\n/**\n * 网络设备检测器\n * 扫描本地网络中的逻辑分析器设备\n */\nclass NetworkDetector {\n    constructor() {\n        this.name = 'Network Device Detector';\n    }\n    async detect() {\n        const devices = [];\n        try {\n            // 扫描常见的网络逻辑分析器端口\n            const commonPorts = [24000, 5555, 8080, 10000];\n            const baseIPs = this.getLocalNetworkRange();\n            // 并行扫描多个IP地址\n            const scanPromises = baseIPs.slice(0, 50).map(ip => this.scanHostPorts(ip, commonPorts));\n            const results = await Promise.allSettled(scanPromises);\n            for (const result of results) {\n                if (result.status === 'fulfilled' && result.value) {\n                    devices.push(result.value);\n                }\n            }\n        }\n        catch (error) {\n            console.warn('Network device detection failed:', error);\n        }\n        return devices;\n    }\n    getLocalNetworkRange() {\n        // 获取本地网络IP范围（简化实现）\n        const baseIPs = [];\n        // 常见的私有网络段\n        const networks = [\n            '192.168.1',\n            '192.168.0',\n            '10.0.0',\n            '172.16.0'\n        ];\n        for (const network of networks) {\n            for (let i = 1; i <= 254; i++) {\n                baseIPs.push(`${network}.${i}`);\n            }\n        }\n        return baseIPs;\n    }\n    async scanHostPorts(host, ports) {\n        for (const port of ports) {\n            try {\n                const isOpen = await this.checkPort(host, port);\n                if (isOpen) {\n                    return {\n                        id: `network-${host}-${port}`,\n                        name: `Network Logic Analyzer (${host}:${port})`,\n                        type: 'network',\n                        connectionString: `${host}:${port}`,\n                        driverType: AnalyzerTypes_1.AnalyzerDriverType.Network,\n                        confidence: 60\n                    };\n                }\n            }\n            catch (error) {\n                continue;\n            }\n        }\n        return null;\n    }\n    async checkPort(host, port) {\n        return new Promise((resolve) => {\n            const socket = new ((__webpack_require__(/*! net */ \"net\").Socket))();\n            const timeout = 1000;\n            socket.setTimeout(timeout);\n            socket.connect(port, host, () => {\n                socket.destroy();\n                resolve(true);\n            });\n            socket.on('error', () => {\n                resolve(false);\n            });\n            socket.on('timeout', () => {\n                socket.destroy();\n                resolve(false);\n            });\n        });\n    }\n}\nexports.NetworkDetector = NetworkDetector;\n/**\n * Saleae Logic设备检测器\n */\nclass SaleaeDetector {\n    constructor() {\n        this.name = 'Saleae Logic Detector';\n    }\n    async detect() {\n        const devices = [];\n        try {\n            // 检查Saleae Logic软件API端口\n            const isApiAvailable = await this.checkSaleaeAPI();\n            if (isApiAvailable) {\n                // 查询连接的设备\n                const connectedDevices = await this.querySaleaeDevices();\n                devices.push(...connectedDevices);\n            }\n        }\n        catch (error) {\n            console.warn('Saleae device detection failed:', error);\n        }\n        return devices;\n    }\n    async checkSaleaeAPI() {\n        try {\n            const socket = new ((__webpack_require__(/*! net */ \"net\").Socket))();\n            return new Promise((resolve) => {\n                socket.setTimeout(2000);\n                socket.connect(10429, 'localhost', () => {\n                    socket.destroy();\n                    resolve(true);\n                });\n                socket.on('error', () => resolve(false));\n                socket.on('timeout', () => {\n                    socket.destroy();\n                    resolve(false);\n                });\n            });\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    async querySaleaeDevices() {\n        const devices = [];\n        try {\n            // 这里应该通过Saleae API查询设备\n            // 简化实现，假设检测到一个设备\n            devices.push({\n                id: 'saleae-logic-1',\n                name: 'Saleae Logic Analyzer',\n                type: 'usb',\n                connectionString: 'localhost:10429',\n                driverType: AnalyzerTypes_1.AnalyzerDriverType.Serial,\n                confidence: 95\n            });\n        }\n        catch (error) {\n            console.warn('Query Saleae devices failed:', error);\n        }\n        return devices;\n    }\n}\nexports.SaleaeDetector = SaleaeDetector;\n/**\n * Sigrok设备检测器\n */\nclass SigrokDetector {\n    constructor() {\n        this.name = 'Sigrok Device Detector';\n    }\n    async detect() {\n        const devices = [];\n        try {\n            // 检查sigrok-cli是否可用\n            const isSigrokAvailable = await this.checkSigrokCli();\n            if (isSigrokAvailable) {\n                // 扫描sigrok设备\n                const sigrokDevices = await this.scanSigrokDevices();\n                devices.push(...sigrokDevices);\n            }\n        }\n        catch (error) {\n            console.warn('Sigrok device detection failed:', error);\n        }\n        return devices;\n    }\n    async checkSigrokCli() {\n        try {\n            const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n            return new Promise((resolve) => {\n                const process = spawn('sigrok-cli', ['--version']);\n                process.on('close', (code) => {\n                    resolve(code === 0);\n                });\n                process.on('error', () => {\n                    resolve(false);\n                });\n            });\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    async scanSigrokDevices() {\n        const devices = [];\n        try {\n            const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n            return new Promise((resolve) => {\n                const process = spawn('sigrok-cli', ['--scan']);\n                let output = '';\n                process.stdout.on('data', (data) => {\n                    output += data.toString();\n                });\n                process.on('close', (code) => {\n                    if (code === 0) {\n                        const parsedDevices = this.parseSigrokScanOutput(output);\n                        resolve(parsedDevices);\n                    }\n                    else {\n                        resolve([]);\n                    }\n                });\n                process.on('error', () => {\n                    resolve([]);\n                });\n            });\n        }\n        catch (error) {\n            console.warn('Scan sigrok devices failed:', error);\n            return [];\n        }\n    }\n    parseSigrokScanOutput(output) {\n        const devices = [];\n        const lines = output.split('\\n');\n        for (const line of lines) {\n            const trimmed = line.trim();\n            if (!trimmed || trimmed.startsWith('The following'))\n                continue;\n            // 解析格式: \"driver:conn=value - Description\"\n            const match = trimmed.match(/^([^:]+):([^-]+)\\s*-\\s*(.+)$/);\n            if (match) {\n                const driver = match[1].trim();\n                const connection = match[2].trim();\n                const description = match[3].trim();\n                devices.push({\n                    id: `sigrok-${driver}-${connection}`,\n                    name: `${description} (Sigrok)`,\n                    type: 'usb',\n                    connectionString: `${driver}:${connection}`,\n                    driverType: AnalyzerTypes_1.AnalyzerDriverType.Serial,\n                    confidence: 85\n                });\n            }\n        }\n        return devices;\n    }\n}\nexports.SigrokDetector = SigrokDetector;\n/**\n * Rigol/Siglent设备检测器\n */\nclass RigolSiglentDetector {\n    constructor() {\n        this.name = 'Rigol/Siglent Detector';\n    }\n    async detect() {\n        const devices = [];\n        try {\n            // 扫描常见的SCPI端口\n            const scpiPorts = [5555, 5025, 111];\n            const baseIPs = this.getCommonInstrumentIPs();\n            // 并行扫描\n            const scanPromises = baseIPs.map(ip => this.scanInstrumentPorts(ip, scpiPorts));\n            const results = await Promise.allSettled(scanPromises);\n            for (const result of results) {\n                if (result.status === 'fulfilled' && result.value) {\n                    devices.push(result.value);\n                }\n            }\n        }\n        catch (error) {\n            console.warn('Rigol/Siglent device detection failed:', error);\n        }\n        return devices;\n    }\n    getCommonInstrumentIPs() {\n        // 常见的仪器IP地址\n        return [\n            '192.168.1.100', '192.168.1.101', '192.168.1.102',\n            '10.0.0.100', '10.0.0.101', '10.0.0.102',\n            '172.16.0.100', '172.16.0.101'\n        ];\n    }\n    async scanInstrumentPorts(host, ports) {\n        for (const port of ports) {\n            try {\n                const isInstrument = await this.checkInstrumentPort(host, port);\n                if (isInstrument) {\n                    return {\n                        id: `rigol-siglent-${host}-${port}`,\n                        name: `Rigol/Siglent Instrument (${host}:${port})`,\n                        type: 'network',\n                        connectionString: `${host}:${port}`,\n                        driverType: AnalyzerTypes_1.AnalyzerDriverType.Network,\n                        confidence: 80\n                    };\n                }\n            }\n            catch (error) {\n                continue;\n            }\n        }\n        return null;\n    }\n    async checkInstrumentPort(host, port) {\n        return new Promise((resolve) => {\n            const socket = new ((__webpack_require__(/*! net */ \"net\").Socket))();\n            socket.setTimeout(2000);\n            socket.connect(port, host, () => {\n                // 发送IDN查询命令\n                socket.write('*IDN?\\n');\n                socket.on('data', (data) => {\n                    const response = data.toString();\n                    const isRigolSiglent = response.toLowerCase().includes('rigol') ||\n                        response.toLowerCase().includes('siglent');\n                    socket.destroy();\n                    resolve(isRigolSiglent);\n                });\n            });\n            socket.on('error', () => resolve(false));\n            socket.on('timeout', () => {\n                socket.destroy();\n                resolve(false);\n            });\n        });\n    }\n}\nexports.RigolSiglentDetector = RigolSiglentDetector;\n// 导出单例实例\nexports.hardwareDriverManager = new HardwareDriverManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/drivers/HardwareDriverManager.ts\n\n}");

/***/ }),

/***/ "./src/drivers/LogicAnalyzerDriver.ts":
/*!********************************************!*\
  !*** ./src/drivers/LogicAnalyzerDriver.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LogicAnalyzerDriver = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst serialport_1 = __webpack_require__(/*! serialport */ \"serialport\");\nconst parser_readline_1 = __webpack_require__(/*! @serialport/parser-readline */ \"./node_modules/@serialport/parser-readline/dist/index.js\");\nconst AnalyzerDriverBase_1 = __webpack_require__(/*! ./AnalyzerDriverBase */ \"./src/drivers/AnalyzerDriverBase.ts\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * Pico逻辑分析器驱动实现\n * 基于C# LogicAnalyzerDriver的TypeScript移植\n */\nclass LogicAnalyzerDriver extends AnalyzerDriverBase_1.AnalyzerDriverBase {\n    // 属性实现\n    get deviceVersion() {\n        return this._version;\n    }\n    get channelCount() {\n        return this._channelCount;\n    }\n    get maxFrequency() {\n        return this._maxFrequency;\n    }\n    get blastFrequency() {\n        return this._blastFrequency;\n    }\n    get bufferSize() {\n        return this._bufferSize;\n    }\n    get isNetwork() {\n        return this._isNetwork;\n    }\n    get isCapturing() {\n        return this._capturing;\n    }\n    get driverType() {\n        return this._isNetwork ? AnalyzerTypes_1.AnalyzerDriverType.Network : AnalyzerTypes_1.AnalyzerDriverType.Serial;\n    }\n    constructor(connectionString) {\n        super();\n        this.connectionString = connectionString;\n        // 私有变量\n        this._capturing = false;\n        this._isNetwork = false;\n        this._version = null;\n        this._channelCount = 0;\n        this._maxFrequency = 0;\n        this._blastFrequency = 0;\n        this._bufferSize = 0;\n        // 通信对象\n        this._serialPort = undefined;\n        this._tcpSocket = undefined;\n        this._currentStream = undefined;\n        this._lineParser = undefined;\n        this._isConnected = false;\n        if (!connectionString) {\n            throw new Error('连接字符串不能为空');\n        }\n    }\n    /**\n     * 连接设备\n     */\n    async connect(params) {\n        try {\n            if (this.connectionString.includes(':')) {\n                await this.initNetwork(this.connectionString);\n            }\n            else {\n                await this.initSerialPort(this.connectionString, 115200);\n            }\n            this._isConnected = true;\n            return {\n                success: true,\n                deviceInfo: {\n                    name: this._version || 'Unknown Device',\n                    version: this._version ?? undefined,\n                    type: this.driverType,\n                    connectionPath: this.connectionString,\n                    isNetwork: this._isNetwork,\n                    capabilities: this.buildCapabilities()\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : '连接失败'\n            };\n        }\n    }\n    /**\n     * 断开连接\n     */\n    async disconnect() {\n        this._isConnected = false;\n        if (this._serialPort?.isOpen) {\n            this._serialPort.close();\n        }\n        if (this._tcpSocket) {\n            this._tcpSocket.destroy();\n        }\n        this._serialPort = undefined;\n        this._tcpSocket = undefined;\n        this._currentStream = undefined;\n        this._lineParser = undefined;\n    }\n    /**\n     * 获取设备状态\n     */\n    async getStatus() {\n        return {\n            isConnected: this._isConnected,\n            isCapturing: this._capturing,\n            batteryVoltage: await this.getVoltageStatus()\n        };\n    }\n    /**\n     * 开始采集\n     */\n    async startCapture(session, captureCompletedHandler) {\n        if (this._capturing) {\n            return AnalyzerTypes_1.CaptureError.Busy;\n        }\n        if (!this._isConnected || !this._currentStream) {\n            return AnalyzerTypes_1.CaptureError.HardwareError;\n        }\n        try {\n            this._capturing = true;\n            // 创建采集请求\n            const captureRequest = AnalyzerDriverBase_1.CaptureRequest.fromConfiguration({\n                frequency: session.frequency,\n                preTriggerSamples: session.preTriggerSamples,\n                postTriggerSamples: session.postTriggerSamples,\n                triggerType: session.triggerType,\n                triggerChannel: session.triggerChannel,\n                triggerInverted: session.triggerInverted,\n                triggerPattern: session.triggerPattern ?? 0,\n                triggerBitCount: session.triggerBitCount ?? 1,\n                loopCount: session.loopCount,\n                measureBursts: session.measureBursts,\n                captureChannels: session.captureChannels.map(ch => ch.channelNumber),\n                captureMode: session.captureMode\n            });\n            // 发送采集请求\n            const packet = new AnalyzerDriverBase_1.OutputPacket();\n            packet.addByte(1); // 采集命令\n            packet.addStruct(captureRequest);\n            const data = packet.serialize();\n            await this.writeData(data);\n            // 设置捕获完成处理器\n            if (captureCompletedHandler) {\n                this.once('captureCompleted', captureCompletedHandler);\n            }\n            // 开始读取数据（异步）\n            this.startDataReading(session);\n            return AnalyzerTypes_1.CaptureError.None;\n        }\n        catch (error) {\n            this._capturing = false;\n            console.error('采集启动失败:', error);\n            return AnalyzerTypes_1.CaptureError.UnexpectedError;\n        }\n    }\n    /**\n     * 停止采集\n     */\n    async stopCapture() {\n        if (!this._capturing) {\n            return true;\n        }\n        try {\n            // 发送停止命令\n            const packet = new AnalyzerDriverBase_1.OutputPacket();\n            packet.addByte(2); // 停止命令\n            const data = packet.serialize();\n            await this.writeData(data);\n            this._capturing = false;\n            return true;\n        }\n        catch (error) {\n            console.error('停止采集失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 进入引导加载程序模式\n     */\n    async enterBootloader() {\n        try {\n            const packet = new AnalyzerDriverBase_1.OutputPacket();\n            packet.addByte(3); // 引导加载程序命令\n            const data = packet.serialize();\n            await this.writeData(data);\n            return true;\n        }\n        catch (error) {\n            console.error('进入引导加载程序失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 获取电压状态\n     */\n    async getVoltageStatus() {\n        try {\n            const packet = new AnalyzerDriverBase_1.OutputPacket();\n            packet.addByte(4); // 电压查询命令\n            const data = packet.serialize();\n            await this.writeData(data);\n            // 等待响应\n            return new Promise(resolve => {\n                const timeout = setTimeout(() => {\n                    resolve('TIMEOUT');\n                }, 5000);\n                this._lineParser?.once('data', (line) => {\n                    clearTimeout(timeout);\n                    resolve(line.trim());\n                });\n            });\n        }\n        catch (error) {\n            console.error('获取电压状态失败:', error);\n            return 'ERROR';\n        }\n    }\n    /**\n     * 发送网络配置\n     */\n    async sendNetworkConfig(accessPointName, password, ipAddress, port) {\n        try {\n            const packet = new AnalyzerDriverBase_1.OutputPacket();\n            packet.addByte(5); // 网络配置命令\n            // 创建网络配置结构\n            const netConfig = {\n                serialize: () => {\n                    const buffer = new ArrayBuffer(115); // 33 + 64 + 16 + 2\n                    const view = new DataView(buffer);\n                    let offset = 0;\n                    // AccessPointName - 33字节\n                    const apNameBytes = new TextEncoder().encode(accessPointName);\n                    for (let i = 0; i < 33; i++) {\n                        view.setUint8(offset++, i < apNameBytes.length ? apNameBytes[i] : 0);\n                    }\n                    // Password - 64字节\n                    const passwordBytes = new TextEncoder().encode(password);\n                    for (let i = 0; i < 64; i++) {\n                        view.setUint8(offset++, i < passwordBytes.length ? passwordBytes[i] : 0);\n                    }\n                    // IPAddress - 16字节\n                    const ipBytes = new TextEncoder().encode(ipAddress);\n                    for (let i = 0; i < 16; i++) {\n                        view.setUint8(offset++, i < ipBytes.length ? ipBytes[i] : 0);\n                    }\n                    // Port - 2字节\n                    view.setUint16(offset, port, true); // little-endian\n                    return new Uint8Array(buffer);\n                }\n            };\n            packet.addStruct(netConfig);\n            const data = packet.serialize();\n            await this.writeData(data);\n            return true;\n        }\n        catch (error) {\n            console.error('发送网络配置失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 初始化串口连接\n     */\n    async initSerialPort(portName, baudRate) {\n        return new Promise((resolve, reject) => {\n            this._serialPort = new serialport_1.SerialPort({\n                path: portName,\n                baudRate,\n                autoOpen: false\n            });\n            this._serialPort.open(error => {\n                if (error) {\n                    reject(new Error(`串口连接失败: ${error.message}`));\n                    return;\n                }\n                this._currentStream = this._serialPort;\n                this._lineParser = new parser_readline_1.ReadlineParser({ delimiter: '\\n' });\n                this._serialPort.pipe(this._lineParser);\n                this._isNetwork = false;\n                // 初始化设备\n                this.initializeDevice().then(resolve).catch(reject);\n            });\n        });\n    }\n    /**\n     * 初始化网络连接\n     */\n    async initNetwork(addressPort) {\n        const match = LogicAnalyzerDriver.regAddressPort.exec(addressPort);\n        if (!match || match.length < 3) {\n            throw new Error('指定的地址/端口格式无效');\n        }\n        this._devAddr = match[1];\n        const portStr = match[2];\n        this._devPort = parseInt(portStr, 10);\n        if (isNaN(this._devPort) || this._devPort < 1 || this._devPort > 65535) {\n            throw new Error('指定的端口号无效');\n        }\n        return new Promise((resolve, reject) => {\n            this._tcpSocket = new net_1.Socket();\n            this._tcpSocket.connect(this._devPort, this._devAddr, () => {\n                this._currentStream = this._tcpSocket;\n                this._lineParser = new parser_readline_1.ReadlineParser({ delimiter: '\\n' });\n                this._tcpSocket.pipe(this._lineParser);\n                this._isNetwork = true;\n                // 初始化设备\n                this.initializeDevice().then(resolve).catch(reject);\n            });\n            this._tcpSocket.on('error', error => {\n                reject(new Error(`网络连接失败: ${error.message}`));\n            });\n        });\n    }\n    /**\n     * 初始化设备（获取设备信息）\n     */\n    async initializeDevice() {\n        if (!this._currentStream || !this._lineParser) {\n            throw new Error('通信流未初始化');\n        }\n        // 发送设备信息查询命令\n        const packet = new AnalyzerDriverBase_1.OutputPacket();\n        packet.addByte(0); // 设备信息查询命令\n        const data = packet.serialize();\n        await this.writeData(data);\n        // 读取设备信息\n        const responses = await this.readDeviceInfo();\n        // 解析设备信息\n        this.parseDeviceInfo(responses);\n    }\n    /**\n     * 读取设备信息响应\n     */\n    async readDeviceInfo() {\n        return new Promise((resolve, reject) => {\n            const responses = [];\n            const timeout = setTimeout(() => {\n                reject(new Error('设备信息读取超时'));\n            }, 10000);\n            const dataHandler = (line) => {\n                responses.push(line.trim());\n                // 预期接收5行响应：版本、频率、突发频率、缓冲区大小、通道数\n                if (responses.length >= 5) {\n                    clearTimeout(timeout);\n                    this._lineParser.off('data', dataHandler);\n                    resolve(responses);\n                }\n            };\n            this._lineParser.on('data', dataHandler);\n        });\n    }\n    /**\n     * 解析设备信息\n     */\n    parseDeviceInfo(responses) {\n        if (responses.length < 5) {\n            throw new Error('设备信息响应不完整');\n        }\n        // 版本信息\n        this._version = responses[0];\n        // 频率信息\n        const freqMatch = LogicAnalyzerDriver.regFreq.exec(responses[1]);\n        if (!freqMatch) {\n            throw new Error('无效的设备频率响应');\n        }\n        this._maxFrequency = parseInt(freqMatch[1], 10);\n        // 突发频率信息\n        const blastMatch = LogicAnalyzerDriver.regBlast.exec(responses[2]);\n        if (!blastMatch) {\n            throw new Error('无效的突发频率响应');\n        }\n        this._blastFrequency = parseInt(blastMatch[1], 10);\n        // 缓冲区大小信息\n        const bufMatch = LogicAnalyzerDriver.regBuf.exec(responses[3]);\n        if (!bufMatch) {\n            throw new Error('无效的设备缓冲区大小响应');\n        }\n        this._bufferSize = parseInt(bufMatch[1], 10);\n        // 通道数信息\n        const chanMatch = LogicAnalyzerDriver.regChan.exec(responses[4]);\n        if (!chanMatch) {\n            throw new Error('无效的设备通道数响应');\n        }\n        this._channelCount = parseInt(chanMatch[1], 10);\n    }\n    /**\n     * 写入数据到流\n     */\n    async writeData(data) {\n        return new Promise((resolve, reject) => {\n            if (!this._currentStream) {\n                reject(new Error('通信流未初始化'));\n                return;\n            }\n            this._currentStream.write(Buffer.from(data), error => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    /**\n     * 开始数据读取（采集过程）\n     * 基于C# ReadCapture方法的完整实现\n     */\n    async startDataReading(session) {\n        try {\n            if (!this._currentStream) {\n                throw new Error('通信流未初始化');\n            }\n            // 等待采集开始确认\n            const startResponse = await this.waitForResponse('CAPTURE_STARTED', 10000);\n            if (startResponse !== 'CAPTURE_STARTED') {\n                throw new Error('采集启动失败');\n            }\n            // 读取采集数据\n            const captureData = await this.readCaptureData(session);\n            // 解析数据到通道\n            this.extractSamplesToChannels(session, captureData);\n            this._capturing = false;\n            const eventArgs = {\n                success: true,\n                session\n            };\n            this.emitCaptureCompleted(eventArgs);\n        }\n        catch (error) {\n            this._capturing = false;\n            console.error('数据读取失败:', error);\n            const eventArgs = {\n                success: false,\n                session\n            };\n            this.emitCaptureCompleted(eventArgs);\n        }\n    }\n    /**\n     * 等待特定响应\n     */\n    async waitForResponse(expectedResponse, timeout) {\n        return new Promise((resolve, reject) => {\n            const timeoutId = setTimeout(() => {\n                this._lineParser.off('data', dataHandler);\n                reject(new Error(`等待响应超时: ${expectedResponse}`));\n            }, timeout);\n            const dataHandler = (line) => {\n                const response = line.trim();\n                if (response === expectedResponse) {\n                    clearTimeout(timeoutId);\n                    this._lineParser.off('data', dataHandler);\n                    resolve(response);\n                }\n            };\n            this._lineParser.on('data', dataHandler);\n        });\n    }\n    /**\n     * 读取采集数据\n     * 基于C# ReadCapture方法实现\n     */\n    async readCaptureData(session) {\n        return new Promise((resolve, reject) => {\n            if (!this._currentStream) {\n                reject(new Error('通信流未初始化'));\n                return;\n            }\n            const mode = this.getCaptureMode(session.captureChannels.map(ch => ch.channelNumber));\n            const totalSamples = session.preTriggerSamples + session.postTriggerSamples * (session.loopCount + 1);\n            // 计算预期数据长度\n            let bytesPerSample;\n            switch (mode) {\n                case 0: // Channels_8\n                    bytesPerSample = 1;\n                    break;\n                case 1: // Channels_16\n                    bytesPerSample = 2;\n                    break;\n                case 2: // Channels_24\n                    bytesPerSample = 4;\n                    break;\n                default:\n                    bytesPerSample = 4;\n            }\n            const expectedDataLength = 4 + (totalSamples * bytesPerSample) + 1 +\n                (session.loopCount > 0 && session.measureBursts ? (session.loopCount + 2) * 4 : 0);\n            let receivedData = Buffer.alloc(0);\n            let dataLength = null;\n            const dataHandler = (chunk) => {\n                receivedData = Buffer.concat([receivedData, chunk]);\n                // 如果还没读取到数据长度\n                if (dataLength === null && receivedData.length >= 4) {\n                    dataLength = receivedData.readUInt32LE(0);\n                }\n                // 检查是否接收完所有数据\n                if (dataLength !== null && receivedData.length >= expectedDataLength) {\n                    this._currentStream.off('data', dataHandler);\n                    try {\n                        const result = this.parseCaptureData(receivedData, session, mode, dataLength);\n                        resolve(result);\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                }\n            };\n            // 设置超时\n            const timeout = setTimeout(() => {\n                this._currentStream.off('data', dataHandler);\n                reject(new Error('数据读取超时'));\n            }, 30000); // 30秒超时\n            this._currentStream.on('data', dataHandler);\n        });\n    }\n    /**\n     * 解析采集数据\n     * 基于C# ReadCapture方法的数据解析逻辑\n     */\n    parseCaptureData(data, session, mode, sampleCount) {\n        let offset = 4; // 跳过长度字段\n        const samples = new Uint32Array(sampleCount);\n        // 读取样本数据\n        for (let i = 0; i < sampleCount; i++) {\n            switch (mode) {\n                case 0: // Channels_8\n                    samples[i] = data.readUInt8(offset);\n                    offset += 1;\n                    break;\n                case 1: // Channels_16\n                    samples[i] = data.readUInt16LE(offset);\n                    offset += 2;\n                    break;\n                case 2: // Channels_24\n                    samples[i] = data.readUInt32LE(offset);\n                    offset += 4;\n                    break;\n            }\n        }\n        // 读取时间戳长度\n        const timestampLength = data.readUInt8(offset);\n        offset += 1;\n        const timestamps = new BigUint64Array(timestampLength);\n        const bursts = [];\n        // 读取时间戳\n        if (timestampLength > 0) {\n            for (let i = 0; i < session.loopCount + 2; i++) {\n                timestamps[i] = BigInt(data.readUInt32LE(offset));\n                offset += 4;\n            }\n            // 处理突发间隔（基于C#的复杂时间戳处理逻辑）\n            this.processBurstTimestamps(timestamps, session, bursts);\n        }\n        return { samples, timestamps, bursts };\n    }\n    /**\n     * 处理突发时间戳\n     * 基于C# ReadCapture中的复杂时间戳处理逻辑\n     */\n    processBurstTimestamps(timestamps, session, bursts) {\n        if (timestamps.length === 0)\n            return;\n        // 反转时间戳的低位部分（SysTick计数器递减）\n        for (let i = 0; i < timestamps.length; i++) {\n            const tt = timestamps[i];\n            timestamps[i] = (tt & 0xff000000n) | (0x00ffffffn - (tt & 0x00ffffffn));\n        }\n        // 计算纳秒每样本和每突发\n        const nsPerSample = 1000000000.0 / session.frequency;\n        const ticksPerSample = nsPerSample / 5;\n        const nsPerBurst = nsPerSample * session.postTriggerSamples;\n        const ticksPerBurst = nsPerBurst / 5;\n        // 调整时间戳以补偿抖动\n        for (let i = 1; i < timestamps.length; i++) {\n            let top = timestamps[i] < timestamps[i - 1] ?\n                timestamps[i] + 0xffffffffn : timestamps[i];\n            if (Number(top - timestamps[i - 1]) <= ticksPerBurst) {\n                const diff = BigInt(ticksPerBurst - Number(top - timestamps[i - 1]) + (ticksPerSample * 2));\n                for (let j = i; j < timestamps.length; j++) {\n                    timestamps[j] += diff;\n                }\n            }\n        }\n        // 计算延迟\n        const delays = new BigUint64Array(timestamps.length - 2);\n        for (let i = 2; i < timestamps.length; i++) {\n            let top = timestamps[i] < timestamps[i - 1] ?\n                timestamps[i] + 0xffffffffn : timestamps[i];\n            delays[i - 2] = (top - timestamps[i - 1] - BigInt(ticksPerBurst)) * 5n;\n        }\n        // 创建突发信息\n        for (let i = 1; i < timestamps.length; i++) {\n            const burstInfo = {\n                burstSampleStart: i === 1 ? session.preTriggerSamples :\n                    session.preTriggerSamples + (session.postTriggerSamples * (i - 1)),\n                burstSampleEnd: session.preTriggerSamples + (session.postTriggerSamples * i),\n                burstSampleGap: i === 1 ? 0n : Number(delays[i - 2]) / nsPerSample,\n                burstTimeGap: i === 1 ? 0n : delays[i - 2]\n            };\n            bursts.push(burstInfo);\n        }\n    }\n    /**\n     * 提取样本数据到通道\n     * 基于C# ExtractSamples方法\n     */\n    extractSamplesToChannels(session, captureData) {\n        const { samples } = captureData;\n        for (let channelIndex = 0; channelIndex < session.captureChannels.length; channelIndex++) {\n            const channel = session.captureChannels[channelIndex];\n            const mask = 1 << channelIndex;\n            channel.samples = new Uint8Array(samples.length);\n            for (let sampleIndex = 0; sampleIndex < samples.length; sampleIndex++) {\n                channel.samples[sampleIndex] = (samples[sampleIndex] & mask) !== 0 ? 1 : 0;\n            }\n        }\n        // 设置突发信息\n        if (captureData.bursts.length > 0) {\n            session.bursts = captureData.bursts;\n        }\n    }\n    /**\n     * 构建硬件能力描述\n     */\n    buildCapabilities() {\n        return {\n            channels: {\n                digital: this._channelCount,\n                maxVoltage: 5.0,\n                inputImpedance: 1000000\n            },\n            sampling: {\n                maxRate: this._maxFrequency,\n                minRate: this.minFrequency,\n                supportedRates: [this._maxFrequency, this._blastFrequency],\n                bufferSize: this._bufferSize,\n                streamingSupport: false\n            },\n            triggers: {\n                types: [0, 1, 2, 3],\n                maxChannels: this._channelCount,\n                patternWidth: 16,\n                sequentialSupport: false,\n                conditions: ['rising', 'falling', 'high', 'low']\n            },\n            connectivity: {\n                interfaces: this._isNetwork ? ['ethernet'] : ['serial'],\n                protocols: ['custom']\n            },\n            features: {\n                voltageMonitoring: true,\n                signalGeneration: false\n            }\n        };\n    }\n    /**\n     * 资源清理\n     */\n    dispose() {\n        this.disconnect();\n        super.dispose();\n    }\n}\nexports.LogicAnalyzerDriver = LogicAnalyzerDriver;\n// 正则表达式模式（从C#版本移植）\nLogicAnalyzerDriver.regAddressPort = /([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+):([0-9]+)/;\nLogicAnalyzerDriver.regChan = /^CHANNELS:([0-9]+)$/;\nLogicAnalyzerDriver.regBuf = /^BUFFER:([0-9]+)$/;\nLogicAnalyzerDriver.regFreq = /^FREQ:([0-9]+)$/;\nLogicAnalyzerDriver.regBlast = /^BLASTFREQ:([0-9]+)$/;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/drivers/LogicAnalyzerDriver.ts\n\n}");

/***/ }),

/***/ "./src/drivers/MultiAnalyzerDriver.ts":
/*!********************************************!*\
  !*** ./src/drivers/MultiAnalyzerDriver.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MultiAnalyzerDriver = void 0;\nconst AnalyzerDriverBase_1 = __webpack_require__(/*! ./AnalyzerDriverBase */ \"./src/drivers/AnalyzerDriverBase.ts\");\nconst LogicAnalyzerDriver_1 = __webpack_require__(/*! ./LogicAnalyzerDriver */ \"./src/drivers/LogicAnalyzerDriver.ts\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * 多设备逻辑分析器同步驱动\n * 基于C# MultiAnalyzerDriver的TypeScript移植\n * 支持2-5个设备的同步采集，提供最多120个通道\n */\nclass MultiAnalyzerDriver extends AnalyzerDriverBase_1.AnalyzerDriverBase {\n    // 属性实现 - 基于所有连接设备的最小值\n    get deviceVersion() {\n        return this._version;\n    }\n    get channelCount() {\n        // 总通道数 = 每个设备的最小通道数 × 设备数量\n        const minChannelsPerDevice = Math.min(...this._connectedDevices.map(d => d.channelCount));\n        return minChannelsPerDevice * this._connectedDevices.length;\n    }\n    get maxFrequency() {\n        // 返回所有设备的最小最大频率（确保所有设备都能支持）\n        return Math.min(...this._connectedDevices.map(d => d.maxFrequency));\n    }\n    get minFrequency() {\n        // 返回所有设备的最大最小频率（确保所有设备都能支持）\n        return Math.max(...this._connectedDevices.map(d => d.minFrequency));\n    }\n    get blastFrequency() {\n        // 多设备模式不支持突发采集\n        return 0;\n    }\n    get bufferSize() {\n        // 返回所有设备的最小缓冲区大小\n        return Math.min(...this._connectedDevices.map(d => d.bufferSize));\n    }\n    get isNetwork() {\n        return false; // 多设备驱动本身不是网络设备\n    }\n    get isCapturing() {\n        return this._capturing;\n    }\n    get driverType() {\n        return AnalyzerTypes_1.AnalyzerDriverType.Multi;\n    }\n    constructor(connectionStrings) {\n        super();\n        // 私有变量\n        this._capturing = false;\n        this._version = null;\n        this._connectedDevices = [];\n        this._deviceCaptures = [];\n        this._sourceSession = null;\n        this._locker = {}; // 用于同步控制\n        if (!connectionStrings || connectionStrings.length < 2 || connectionStrings.length > 5) {\n            throw new Error('无效的设备数量，必须提供2-5个连接字符串');\n        }\n        // 第一个连接字符串必须是主设备\n        this._connectedDevices = new Array(connectionStrings.length);\n        this.initializeDevices(connectionStrings);\n    }\n    /**\n     * 初始化所有设备\n     */\n    async initializeDevices(connectionStrings) {\n        try {\n            // 连接所有设备\n            for (let i = 0; i < connectionStrings.length; i++) {\n                this._connectedDevices[i] = new LogicAnalyzerDriver_1.LogicAnalyzerDriver(connectionStrings[i]);\n                this._connectedDevices[i].tag = i; // 设置设备标识\n            }\n            // 为每个设备设置捕获完成事件处理器\n            for (const device of this._connectedDevices) {\n                device.on('captureCompleted', this.handleDeviceCaptureCompleted.bind(this));\n            }\n        }\n        catch (error) {\n            // 清理已连接的设备\n            for (const device of this._connectedDevices) {\n                if (device) {\n                    device.dispose();\n                }\n            }\n            throw new Error(`设备连接失败: ${error}`);\n        }\n    }\n    /**\n     * 连接所有设备\n     */\n    async connect(params) {\n        try {\n            // 连接所有设备\n            const connectionPromises = this._connectedDevices.map(device => device.connect(params));\n            const results = await Promise.all(connectionPromises);\n            // 检查所有连接是否成功\n            const failedConnections = results.filter(result => !result.success);\n            if (failedConnections.length > 0) {\n                throw new Error(`设备连接失败: ${failedConnections.map(r => r.error).join(', ')}`);\n            }\n            // 验证设备版本兼容性\n            this.validateDeviceVersions();\n            // 设置多设备版本信息\n            const masterDevice = this._connectedDevices[0];\n            const masterVersion = this.parseVersion(masterDevice.deviceVersion);\n            this._version = `MULTI_ANALYZER_${masterVersion.major}_${masterVersion.minor}`;\n            return {\n                success: true,\n                deviceInfo: {\n                    name: this._version,\n                    version: this._version,\n                    type: this.driverType,\n                    connectionPath: 'Multi-Device',\n                    isNetwork: false,\n                    capabilities: this.buildCapabilities()\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : '多设备连接失败'\n            };\n        }\n    }\n    /**\n     * 验证设备版本兼容性\n     */\n    validateDeviceVersions() {\n        let masterVersion = null;\n        for (let i = 0; i < this._connectedDevices.length; i++) {\n            const device = this._connectedDevices[i];\n            const deviceVersion = this.parseVersion(device.deviceVersion);\n            if (!deviceVersion.isValid) {\n                throw new Error(`设备 ${i} 版本无效: ${device.deviceVersion}`);\n            }\n            if (masterVersion === null) {\n                masterVersion = deviceVersion;\n            }\n            else {\n                if (masterVersion.major !== deviceVersion.major ||\n                    masterVersion.minor !== deviceVersion.minor) {\n                    throw new Error(`设备版本不兼容。主设备版本: V${masterVersion.major}_${masterVersion.minor}, ` +\n                        `设备 ${i} 版本: V${deviceVersion.major}_${deviceVersion.minor}`);\n                }\n            }\n        }\n    }\n    /**\n     * 解析版本字符串\n     */\n    parseVersion(versionString) {\n        if (!versionString) {\n            return { major: 0, minor: 0, isValid: false };\n        }\n        // 假设版本格式类似 \"V1_23\" 或 \"ANALYZER_V1_23\"\n        const match = versionString.match(/V(\\d+)_(\\d+)/);\n        if (match) {\n            return {\n                major: parseInt(match[1], 10),\n                minor: parseInt(match[2], 10),\n                isValid: true\n            };\n        }\n        return { major: 0, minor: 0, isValid: false };\n    }\n    /**\n     * 断开所有设备连接\n     */\n    async disconnect() {\n        for (const device of this._connectedDevices) {\n            await device.disconnect();\n        }\n    }\n    /**\n     * 获取设备状态\n     */\n    async getStatus() {\n        // 获取所有设备状态\n        const statuses = await Promise.all(this._connectedDevices.map(device => device.getStatus()));\n        return {\n            isConnected: statuses.every(status => status.isConnected),\n            isCapturing: this._capturing,\n            batteryVoltage: 'N/A',\n            multiDeviceStatus: statuses\n        };\n    }\n    /**\n     * 开始同步采集\n     */\n    async startCapture(session, captureCompletedHandler) {\n        // 多设备模式不支持边沿触发\n        if (session.triggerType === AnalyzerTypes_1.TriggerType.Edge) {\n            return AnalyzerTypes_1.CaptureError.BadParams;\n        }\n        if (this._capturing) {\n            return AnalyzerTypes_1.CaptureError.Busy;\n        }\n        if (!session.captureChannels || session.captureChannels.length === 0) {\n            return AnalyzerTypes_1.CaptureError.BadParams;\n        }\n        try {\n            // 验证采集参数\n            const validationError = this.validateCaptureParameters(session);\n            if (validationError !== AnalyzerTypes_1.CaptureError.None) {\n                return validationError;\n            }\n            // 分配通道到各个设备\n            const channelsPerDevice = this.splitChannelsPerDevice(session.captureChannels.map(ch => ch.channelNumber));\n            if (channelsPerDevice[0].length < 1) {\n                return AnalyzerTypes_1.CaptureError.BadParams;\n            }\n            // 计算触发延迟偏移\n            const samplePeriod = 1000000000.0 / session.frequency;\n            const delay = session.triggerType === AnalyzerTypes_1.TriggerType.Fast ?\n                AnalyzerTypes_1.TriggerDelays.FastTriggerDelay : AnalyzerTypes_1.TriggerDelays.ComplexTriggerDelay;\n            const offset = Math.round((delay / samplePeriod) + 0.3);\n            // 初始化设备捕获状态\n            this._deviceCaptures = new Array(this._connectedDevices.length);\n            for (let i = 0; i < this._deviceCaptures.length; i++) {\n                this._deviceCaptures[i] = { completed: false, session: null };\n            }\n            this._currentCaptureHandler = captureCompletedHandler;\n            this._sourceSession = session;\n            this._capturing = true;\n            // 启动从设备采集（除了主设备外的所有设备）\n            let channelsCapturing = 1;\n            for (let i = 1; i < channelsPerDevice.length; i++) {\n                const channels = channelsPerDevice[i];\n                if (channels.length === 0) {\n                    this._deviceCaptures[i].completed = true;\n                    continue;\n                }\n                // 创建从设备采集会话\n                const slaveSession = this.createSlaveSession(session, channels, offset);\n                this._connectedDevices[i].tag = channelsCapturing;\n                const error = await this._connectedDevices[i].startCapture(slaveSession);\n                if (error !== AnalyzerTypes_1.CaptureError.None) {\n                    await this.stopCapture();\n                    return error;\n                }\n                channelsCapturing++;\n            }\n            // 启动主设备采集（最后启动，作为同步信号）\n            this._connectedDevices[0].tag = 0;\n            const masterChannels = channelsPerDevice[0];\n            const masterSession = this.createMasterSession(session, masterChannels);\n            const masterError = await this._connectedDevices[0].startCapture(masterSession);\n            if (masterError !== AnalyzerTypes_1.CaptureError.None) {\n                await this.stopCapture();\n                return masterError;\n            }\n            return AnalyzerTypes_1.CaptureError.None;\n        }\n        catch (error) {\n            this._capturing = false;\n            console.error('多设备采集启动失败:', error);\n            return AnalyzerTypes_1.CaptureError.UnexpectedError;\n        }\n    }\n    /**\n     * 验证采集参数\n     */\n    validateCaptureParameters(session) {\n        const channelNumbers = session.captureChannels.map(ch => ch.channelNumber);\n        const captureLimits = this.getLimits(channelNumbers);\n        // 检查基本参数\n        if (channelNumbers.some(ch => ch < 0 || ch >= this.channelCount) ||\n            (session.triggerBitCount !== undefined && session.triggerBitCount < 1) ||\n            (session.triggerBitCount !== undefined && session.triggerBitCount > 16) ||\n            (session.triggerChannel !== undefined && (session.triggerChannel < 0 || session.triggerChannel > 15)) ||\n            session.preTriggerSamples < captureLimits.minPreSamples ||\n            session.postTriggerSamples < captureLimits.minPostSamples ||\n            session.preTriggerSamples > captureLimits.maxPreSamples ||\n            session.postTriggerSamples > captureLimits.maxPostSamples ||\n            (session.preTriggerSamples + session.postTriggerSamples) > captureLimits.maxTotalSamples ||\n            session.frequency < this.minFrequency ||\n            session.frequency > this.maxFrequency) {\n            return AnalyzerTypes_1.CaptureError.BadParams;\n        }\n        return AnalyzerTypes_1.CaptureError.None;\n    }\n    /**\n     * 将通道分配到各个设备\n     */\n    splitChannelsPerDevice(channels) {\n        const channelsPerDevice = [];\n        const maxChannelsPerDevice = Math.min(...this._connectedDevices.map(d => d.channelCount));\n        for (let deviceIndex = 0; deviceIndex < this._connectedDevices.length; deviceIndex++) {\n            const firstChannel = deviceIndex * maxChannelsPerDevice;\n            const lastChannel = (deviceIndex + 1) * maxChannelsPerDevice;\n            const deviceChannels = channels\n                .filter(ch => ch >= firstChannel && ch < lastChannel)\n                .map(ch => ch - firstChannel);\n            channelsPerDevice.push(deviceChannels);\n        }\n        return channelsPerDevice;\n    }\n    /**\n     * 创建从设备采集会话\n     */\n    createSlaveSession(originalSession, channels, offset) {\n        const slaveSession = {\n            ...originalSession,\n            captureChannels: channels.map(ch => ({\n                channelNumber: ch,\n                channelName: `Channel ${ch + 1}`,\n                hidden: false\n            })),\n            triggerChannel: 24,\n            triggerType: AnalyzerTypes_1.TriggerType.Edge,\n            preTriggerSamples: originalSession.preTriggerSamples + offset,\n            postTriggerSamples: originalSession.postTriggerSamples - offset,\n            loopCount: 0,\n            measureBursts: false,\n            triggerInverted: false\n        };\n        return slaveSession;\n    }\n    /**\n     * 创建主设备采集会话\n     */\n    createMasterSession(originalSession, channels) {\n        const masterSession = {\n            ...originalSession,\n            captureChannels: channels.map(ch => ({\n                channelNumber: ch,\n                channelName: `Channel ${ch + 1}`,\n                hidden: false\n            }))\n        };\n        return masterSession;\n    }\n    /**\n     * 停止所有设备采集\n     */\n    async stopCapture() {\n        if (!this._capturing) {\n            return true;\n        }\n        try {\n            // 停止所有设备\n            const stopPromises = this._connectedDevices.map(device => device.stopCapture());\n            await Promise.all(stopPromises);\n            this._capturing = false;\n            return true;\n        }\n        catch (error) {\n            console.error('停止多设备采集失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 进入引导加载程序模式\n     */\n    async enterBootloader() {\n        if (this._capturing) {\n            return false;\n        }\n        try {\n            // 所有设备都需要成功进入引导加载程序模式\n            const results = await Promise.all(this._connectedDevices.map(device => device.enterBootloader()));\n            return results.every(result => result === true);\n        }\n        catch (error) {\n            console.error('进入引导加载程序失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 处理单个设备的采集完成事件\n     */\n    handleDeviceCaptureCompleted(args) {\n        // 同步锁定\n        if (!this._capturing || !this._sourceSession) {\n            return;\n        }\n        if (!args.success) {\n            this.stopCapture();\n            this._deviceCaptures = [];\n            const eventArgs = {\n                success: false,\n                session: this._sourceSession\n            };\n            if (this._currentCaptureHandler) {\n                this._currentCaptureHandler(eventArgs);\n            }\n            else {\n                this.emitCaptureCompleted(eventArgs);\n            }\n            return;\n        }\n        // 获取设备索引\n        const deviceIndex = args.session.deviceTag || 0;\n        this._deviceCaptures[deviceIndex].session = args.session;\n        this._deviceCaptures[deviceIndex].completed = true;\n        // 检查所有设备是否都完成采集\n        if (this._deviceCaptures.every(capture => capture.completed)) {\n            this.combineDeviceResults();\n        }\n    }\n    /**\n     * 合并所有设备的采集结果\n     */\n    combineDeviceResults() {\n        if (!this._sourceSession)\n            return;\n        const maxChannelsPerDevice = Math.min(...this._connectedDevices.map(d => d.channelCount));\n        // 合并所有设备的通道数据\n        for (let deviceIndex = 0; deviceIndex < this._deviceCaptures.length; deviceIndex++) {\n            const deviceCapture = this._deviceCaptures[deviceIndex];\n            if (deviceCapture.session) {\n                for (const deviceChannel of deviceCapture.session.captureChannels) {\n                    // 计算在源会话中的通道索引\n                    const globalChannelNumber = deviceChannel.channelNumber + deviceIndex * maxChannelsPerDevice;\n                    // 找到对应的源会话通道\n                    const sourceChannel = this._sourceSession.captureChannels.find(ch => ch.channelNumber === globalChannelNumber);\n                    if (sourceChannel) {\n                        sourceChannel.samples = deviceChannel.samples;\n                    }\n                }\n            }\n        }\n        this._capturing = false;\n        const eventArgs = {\n            success: true,\n            session: this._sourceSession\n        };\n        if (this._currentCaptureHandler) {\n            this._currentCaptureHandler(eventArgs);\n        }\n        else {\n            this.emitCaptureCompleted(eventArgs);\n        }\n    }\n    /**\n     * 获取多设备采集模式\n     */\n    getCaptureMode(channels) {\n        const splitChannels = this.splitChannelsPerDevice(channels);\n        const maxChannelPerDevice = splitChannels\n            .map(deviceChannels => Math.max(...deviceChannels, 0))\n            .reduce((max, current) => Math.max(max, current), 0);\n        if (maxChannelPerDevice < 8)\n            return AnalyzerTypes_1.CaptureMode.Channels_8;\n        if (maxChannelPerDevice < 16)\n            return AnalyzerTypes_1.CaptureMode.Channels_16;\n        return AnalyzerTypes_1.CaptureMode.Channels_24;\n    }\n    /**\n     * 获取多设备采集限制\n     */\n    getLimits(channels) {\n        const splitChannels = this.splitChannelsPerDevice(channels);\n        const deviceLimits = this._connectedDevices.map((device, index) => device.getLimits(splitChannels[index] || []));\n        // 返回所有设备的最严格限制\n        return {\n            minPreSamples: Math.max(...deviceLimits.map(limit => limit.minPreSamples)),\n            maxPreSamples: Math.min(...deviceLimits.map(limit => limit.maxPreSamples)),\n            minPostSamples: Math.max(...deviceLimits.map(limit => limit.minPostSamples)),\n            maxPostSamples: Math.min(...deviceLimits.map(limit => limit.maxPostSamples)),\n            get maxTotalSamples() {\n                return this.minPreSamples + this.maxPostSamples;\n            }\n        };\n    }\n    /**\n     * 网络配置（多设备不支持）\n     */\n    async sendNetworkConfig(accessPointName, password, ipAddress, port) {\n        return false; // 多设备驱动不支持网络配置\n    }\n    /**\n     * 获取电压状态（多设备不支持）\n     */\n    async getVoltageStatus() {\n        return 'UNSUPPORTED'; // 多设备驱动不支持电压监控\n    }\n    /**\n     * 构建硬件能力描述\n     */\n    buildCapabilities() {\n        return {\n            channels: {\n                digital: this.channelCount,\n                maxVoltage: 5.0,\n                inputImpedance: 1000000\n            },\n            sampling: {\n                maxRate: this.maxFrequency,\n                minRate: this.minFrequency,\n                supportedRates: [this.maxFrequency],\n                bufferSize: this.bufferSize,\n                streamingSupport: false\n            },\n            triggers: {\n                types: [1, 2],\n                maxChannels: 16,\n                patternWidth: 16,\n                sequentialSupport: true,\n                conditions: ['pattern', 'complex']\n            },\n            connectivity: {\n                interfaces: ['multi-device'],\n                protocols: ['custom']\n            },\n            features: {\n                multiDevice: true,\n                synchronization: true,\n                maxDevices: 5,\n                totalChannels: this.channelCount\n            }\n        };\n    }\n    /**\n     * 资源清理\n     */\n    dispose() {\n        for (const device of this._connectedDevices) {\n            device.dispose();\n        }\n        super.dispose();\n    }\n}\nexports.MultiAnalyzerDriver = MultiAnalyzerDriver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXIvLi9zcmMvZHJpdmVycy9NdWx0aUFuYWx5emVyRHJpdmVyLnRzPzI5YjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5hbHl6ZXJEcml2ZXJCYXNlIH0gZnJvbSAnLi9BbmFseXplckRyaXZlckJhc2UnO1xyXG5pbXBvcnQgeyBMb2dpY0FuYWx5emVyRHJpdmVyIH0gZnJvbSAnLi9Mb2dpY0FuYWx5emVyRHJpdmVyJztcclxuaW1wb3J0IHtcclxuICBBbmFseXplckRyaXZlclR5cGUsXHJcbiAgQ2FwdHVyZUVycm9yLFxyXG4gIENhcHR1cmVTZXNzaW9uLFxyXG4gIENhcHR1cmVFdmVudEFyZ3MsXHJcbiAgQ2FwdHVyZUNvbXBsZXRlZEhhbmRsZXIsXHJcbiAgQ29ubmVjdGlvblBhcmFtcyxcclxuICBDb25uZWN0aW9uUmVzdWx0LFxyXG4gIERldmljZVN0YXR1cyxcclxuICBDYXB0dXJlTW9kZSxcclxuICBUcmlnZ2VyVHlwZSxcclxuICBUcmlnZ2VyRGVsYXlzXHJcbn0gZnJvbSAnLi4vbW9kZWxzL0FuYWx5emVyVHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIOWkmuiuvuWkh+mAu+i+keWIhuaekOWZqOWQjOatpempseWKqFxyXG4gKiDln7rkuo5DIyBNdWx0aUFuYWx5emVyRHJpdmVy55qEVHlwZVNjcmlwdOenu+akjVxyXG4gKiDmlK/mjIEyLTXkuKrorr7lpIfnmoTlkIzmraXph4fpm4bvvIzmj5DkvpvmnIDlpJoxMjDkuKrpgJrpgZNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNdWx0aUFuYWx5emVyRHJpdmVyIGV4dGVuZHMgQW5hbHl6ZXJEcml2ZXJCYXNlIHtcclxuICAvLyDlsZ7mgKflrp7njrAgLSDln7rkuo7miYDmnInov57mjqXorr7lpIfnmoTmnIDlsI/lgLxcclxuICBnZXQgZGV2aWNlVmVyc2lvbigpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xyXG4gIH1cclxuICBnZXQgY2hhbm5lbENvdW50KCk6IG51bWJlciB7XHJcbiAgICAvLyDmgLvpgJrpgZPmlbAgPSDmr4/kuKrorr7lpIfnmoTmnIDlsI/pgJrpgZPmlbAgw5cg6K6+5aSH5pWw6YePXHJcbiAgICBjb25zdCBtaW5DaGFubmVsc1BlckRldmljZSA9IE1hdGgubWluKC4uLnRoaXMuX2Nvbm5lY3RlZERldmljZXMubWFwKGQgPT4gZC5jaGFubmVsQ291bnQpKTtcclxuICAgIHJldHVybiBtaW5DaGFubmVsc1BlckRldmljZSAqIHRoaXMuX2Nvbm5lY3RlZERldmljZXMubGVuZ3RoO1xyXG4gIH1cclxuICBnZXQgbWF4RnJlcXVlbmN5KCk6IG51bWJlciB7XHJcbiAgICAvLyDov5Tlm57miYDmnInorr7lpIfnmoTmnIDlsI/mnIDlpKfpopHnjofvvIjnoa7kv53miYDmnInorr7lpIfpg73og73mlK/mjIHvvIlcclxuICAgIHJldHVybiBNYXRoLm1pbiguLi50aGlzLl9jb25uZWN0ZWREZXZpY2VzLm1hcChkID0+IGQubWF4RnJlcXVlbmN5KSk7XHJcbiAgfVxyXG4gIGdldCBtaW5GcmVxdWVuY3koKTogbnVtYmVyIHtcclxuICAgIC8vIOi/lOWbnuaJgOacieiuvuWkh+eahOacgOWkp+acgOWwj+mikeeOh++8iOehruS/neaJgOacieiuvuWkh+mDveiDveaUr+aMge+8iVxyXG4gICAgcmV0dXJuIE1hdGgubWF4KC4uLnRoaXMuX2Nvbm5lY3RlZERldmljZXMubWFwKGQgPT4gZC5taW5GcmVxdWVuY3kpKTtcclxuICB9XHJcbiAgZ2V0IGJsYXN0RnJlcXVlbmN5KCk6IG51bWJlciB7XHJcbiAgICAvLyDlpJrorr7lpIfmqKHlvI/kuI3mlK/mjIHnqoHlj5Hph4fpm4ZcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICBnZXQgYnVmZmVyU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgLy8g6L+U5Zue5omA5pyJ6K6+5aSH55qE5pyA5bCP57yT5Yay5Yy65aSn5bCPXHJcbiAgICByZXR1cm4gTWF0aC5taW4oLi4udGhpcy5fY29ubmVjdGVkRGV2aWNlcy5tYXAoZCA9PiBkLmJ1ZmZlclNpemUpKTtcclxuICB9XHJcbiAgZ2V0IGlzTmV0d29yaygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBmYWxzZTsgLy8g5aSa6K6+5aSH6amx5Yqo5pys6Lqr5LiN5piv572R57uc6K6+5aSHXHJcbiAgfVxyXG4gIGdldCBpc0NhcHR1cmluZygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9jYXB0dXJpbmc7XHJcbiAgfVxyXG4gIGdldCBkcml2ZXJUeXBlKCk6IEFuYWx5emVyRHJpdmVyVHlwZSB7XHJcbiAgICByZXR1cm4gQW5hbHl6ZXJEcml2ZXJUeXBlLk11bHRpO1xyXG4gIH1cclxuXHJcbiAgLy8g56eB5pyJ5Y+Y6YePXHJcbiAgcHJpdmF0ZSBfY2FwdHVyaW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBfdmVyc2lvbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBfY29ubmVjdGVkRGV2aWNlczogTG9naWNBbmFseXplckRyaXZlcltdID0gW107XHJcbiAgcHJpdmF0ZSBfZGV2aWNlQ2FwdHVyZXM6IEFycmF5PHtcclxuICAgIGNvbXBsZXRlZDogYm9vbGVhbjtcclxuICAgIHNlc3Npb246IENhcHR1cmVTZXNzaW9uIHwgbnVsbDtcclxuICB9PiA9IFtdO1xyXG4gIHByaXZhdGUgX3NvdXJjZVNlc3Npb246IENhcHR1cmVTZXNzaW9uIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBfY3VycmVudENhcHR1cmVIYW5kbGVyPzogQ2FwdHVyZUNvbXBsZXRlZEhhbmRsZXI7XHJcbiAgcHJpdmF0ZSBfbG9ja2VyID0ge307IC8vIOeUqOS6juWQjOatpeaOp+WItlxyXG5cclxuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyaW5nczogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgaWYgKCFjb25uZWN0aW9uU3RyaW5ncyB8fCBjb25uZWN0aW9uU3RyaW5ncy5sZW5ndGggPCAyIHx8IGNvbm5lY3Rpb25TdHJpbmdzLmxlbmd0aCA+IDUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfml6DmlYjnmoTorr7lpIfmlbDph4/vvIzlv4Xpobvmj5DkvpsyLTXkuKrov57mjqXlrZfnrKbkuLInKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnrKzkuIDkuKrov57mjqXlrZfnrKbkuLLlv4XpobvmmK/kuLvorr7lpIdcclxuICAgIHRoaXMuX2Nvbm5lY3RlZERldmljZXMgPSBuZXcgQXJyYXkoY29ubmVjdGlvblN0cmluZ3MubGVuZ3RoKTtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZURldmljZXMoY29ubmVjdGlvblN0cmluZ3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyW5omA5pyJ6K6+5aSHXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplRGV2aWNlcyhjb25uZWN0aW9uU3RyaW5nczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOi/nuaOpeaJgOacieiuvuWkh1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbm5lY3Rpb25TdHJpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkRGV2aWNlc1tpXSA9IG5ldyBMb2dpY0FuYWx5emVyRHJpdmVyKGNvbm5lY3Rpb25TdHJpbmdzW2ldKTtcclxuICAgICAgICB0aGlzLl9jb25uZWN0ZWREZXZpY2VzW2ldLnRhZyA9IGk7IC8vIOiuvue9ruiuvuWkh+agh+ivhlxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDkuLrmr4/kuKrorr7lpIforr7nva7mjZXojrflrozmiJDkuovku7blpITnkIblmahcclxuICAgICAgZm9yIChjb25zdCBkZXZpY2Ugb2YgdGhpcy5fY29ubmVjdGVkRGV2aWNlcykge1xyXG4gICAgICAgIGRldmljZS5vbignY2FwdHVyZUNvbXBsZXRlZCcsIHRoaXMuaGFuZGxlRGV2aWNlQ2FwdHVyZUNvbXBsZXRlZC5iaW5kKHRoaXMpKTtcclxuICAgICAgfVxyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIOa4heeQhuW3sui/nuaOpeeahOiuvuWkh1xyXG4gICAgICBmb3IgKGNvbnN0IGRldmljZSBvZiB0aGlzLl9jb25uZWN0ZWREZXZpY2VzKSB7XHJcbiAgICAgICAgaWYgKGRldmljZSkge1xyXG4gICAgICAgICAgZGV2aWNlLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGDorr7lpIfov57mjqXlpLHotKU6ICR7ZXJyb3J9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov57mjqXmiYDmnInorr7lpIdcclxuICAgKi9cclxuICBhc3luYyBjb25uZWN0KHBhcmFtcz86IENvbm5lY3Rpb25QYXJhbXMpOiBQcm9taXNlPENvbm5lY3Rpb25SZXN1bHQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOi/nuaOpeaJgOacieiuvuWkh1xyXG4gICAgICBjb25zdCBjb25uZWN0aW9uUHJvbWlzZXMgPSB0aGlzLl9jb25uZWN0ZWREZXZpY2VzLm1hcChkZXZpY2UgPT4gZGV2aWNlLmNvbm5lY3QocGFyYW1zKSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChjb25uZWN0aW9uUHJvbWlzZXMpO1xyXG5cclxuICAgICAgLy8g5qOA5p+l5omA5pyJ6L+e5o6l5piv5ZCm5oiQ5YqfXHJcbiAgICAgIGNvbnN0IGZhaWxlZENvbm5lY3Rpb25zID0gcmVzdWx0cy5maWx0ZXIocmVzdWx0ID0+ICFyZXN1bHQuc3VjY2Vzcyk7XHJcbiAgICAgIGlmIChmYWlsZWRDb25uZWN0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDorr7lpIfov57mjqXlpLHotKU6ICR7ZmFpbGVkQ29ubmVjdGlvbnMubWFwKHIgPT4gci5lcnJvcikuam9pbignLCAnKX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6aqM6K+B6K6+5aSH54mI5pys5YW85a655oCnXHJcbiAgICAgIHRoaXMudmFsaWRhdGVEZXZpY2VWZXJzaW9ucygpO1xyXG5cclxuICAgICAgLy8g6K6+572u5aSa6K6+5aSH54mI5pys5L+h5oGvXHJcbiAgICAgIGNvbnN0IG1hc3RlckRldmljZSA9IHRoaXMuX2Nvbm5lY3RlZERldmljZXNbMF07XHJcbiAgICAgIGNvbnN0IG1hc3RlclZlcnNpb24gPSB0aGlzLnBhcnNlVmVyc2lvbihtYXN0ZXJEZXZpY2UuZGV2aWNlVmVyc2lvbik7XHJcbiAgICAgIHRoaXMuX3ZlcnNpb24gPSBgTVVMVElfQU5BTFlaRVJfJHttYXN0ZXJWZXJzaW9uLm1ham9yfV8ke21hc3RlclZlcnNpb24ubWlub3J9YDtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBkZXZpY2VJbmZvOiB7XHJcbiAgICAgICAgICBuYW1lOiB0aGlzLl92ZXJzaW9uLFxyXG4gICAgICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcclxuICAgICAgICAgIHR5cGU6IHRoaXMuZHJpdmVyVHlwZSxcclxuICAgICAgICAgIGNvbm5lY3Rpb25QYXRoOiAnTXVsdGktRGV2aWNlJyxcclxuICAgICAgICAgIGlzTmV0d29yazogZmFsc2UsXHJcbiAgICAgICAgICBjYXBhYmlsaXRpZXM6IHRoaXMuYnVpbGRDYXBhYmlsaXRpZXMoKVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ+WkmuiuvuWkh+i/nuaOpeWksei0pSdcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmqjOivgeiuvuWkh+eJiOacrOWFvOWuueaAp1xyXG4gICAqL1xyXG4gIHByaXZhdGUgdmFsaWRhdGVEZXZpY2VWZXJzaW9ucygpOiB2b2lkIHtcclxuICAgIGxldCBtYXN0ZXJWZXJzaW9uOiB7IG1ham9yOiBudW1iZXI7IG1pbm9yOiBudW1iZXIgfSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29ubmVjdGVkRGV2aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBkZXZpY2UgPSB0aGlzLl9jb25uZWN0ZWREZXZpY2VzW2ldO1xyXG4gICAgICBjb25zdCBkZXZpY2VWZXJzaW9uID0gdGhpcy5wYXJzZVZlcnNpb24oZGV2aWNlLmRldmljZVZlcnNpb24pO1xyXG5cclxuICAgICAgaWYgKCFkZXZpY2VWZXJzaW9uLmlzVmFsaWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOiuvuWkhyAke2l9IOeJiOacrOaXoOaViDogJHtkZXZpY2UuZGV2aWNlVmVyc2lvbn1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG1hc3RlclZlcnNpb24gPT09IG51bGwpIHtcclxuICAgICAgICBtYXN0ZXJWZXJzaW9uID0gZGV2aWNlVmVyc2lvbjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAobWFzdGVyVmVyc2lvbi5tYWpvciAhPT0gZGV2aWNlVmVyc2lvbi5tYWpvciB8fCBcclxuICAgICAgICAgICAgbWFzdGVyVmVyc2lvbi5taW5vciAhPT0gZGV2aWNlVmVyc2lvbi5taW5vcikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICBg6K6+5aSH54mI5pys5LiN5YW85a6544CC5Li76K6+5aSH54mI5pysOiBWJHttYXN0ZXJWZXJzaW9uLm1ham9yfV8ke21hc3RlclZlcnNpb24ubWlub3J9LCBgICtcclxuICAgICAgICAgICAgYOiuvuWkhyAke2l9IOeJiOacrDogViR7ZGV2aWNlVmVyc2lvbi5tYWpvcn1fJHtkZXZpY2VWZXJzaW9uLm1pbm9yfWBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDniYjmnKzlrZfnrKbkuLJcclxuICAgKi9cclxuICBwcml2YXRlIHBhcnNlVmVyc2lvbih2ZXJzaW9uU3RyaW5nOiBzdHJpbmcgfCBudWxsKTogeyBcclxuICAgIG1ham9yOiBudW1iZXI7IFxyXG4gICAgbWlub3I6IG51bWJlcjsgXHJcbiAgICBpc1ZhbGlkOiBib29sZWFuOyBcclxuICB9IHtcclxuICAgIGlmICghdmVyc2lvblN0cmluZykge1xyXG4gICAgICByZXR1cm4geyBtYWpvcjogMCwgbWlub3I6IDAsIGlzVmFsaWQ6IGZhbHNlIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5YGH6K6+54mI5pys5qC85byP57G75Ly8IFwiVjFfMjNcIiDmiJYgXCJBTkFMWVpFUl9WMV8yM1wiXHJcbiAgICBjb25zdCBtYXRjaCA9IHZlcnNpb25TdHJpbmcubWF0Y2goL1YoXFxkKylfKFxcZCspLyk7XHJcbiAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtYWpvcjogcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSxcclxuICAgICAgICBtaW5vcjogcGFyc2VJbnQobWF0Y2hbMl0sIDEwKSxcclxuICAgICAgICBpc1ZhbGlkOiB0cnVlXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgbWFqb3I6IDAsIG1pbm9yOiAwLCBpc1ZhbGlkOiBmYWxzZSB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pat5byA5omA5pyJ6K6+5aSH6L+e5o6lXHJcbiAgICovXHJcbiAgYXN5bmMgZGlzY29ubmVjdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGZvciAoY29uc3QgZGV2aWNlIG9mIHRoaXMuX2Nvbm5lY3RlZERldmljZXMpIHtcclxuICAgICAgYXdhaXQgZGV2aWNlLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluiuvuWkh+eKtuaAgVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldFN0YXR1cygpOiBQcm9taXNlPERldmljZVN0YXR1cz4ge1xyXG4gICAgLy8g6I635Y+W5omA5pyJ6K6+5aSH54q25oCBXHJcbiAgICBjb25zdCBzdGF0dXNlcyA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICB0aGlzLl9jb25uZWN0ZWREZXZpY2VzLm1hcChkZXZpY2UgPT4gZGV2aWNlLmdldFN0YXR1cygpKVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpc0Nvbm5lY3RlZDogc3RhdHVzZXMuZXZlcnkoc3RhdHVzID0+IHN0YXR1cy5pc0Nvbm5lY3RlZCksXHJcbiAgICAgIGlzQ2FwdHVyaW5nOiB0aGlzLl9jYXB0dXJpbmcsXHJcbiAgICAgIGJhdHRlcnlWb2x0YWdlOiAnTi9BJywgLy8g5aSa6K6+5aSH5LiN5oql5ZGK55S15rGg54q25oCBXHJcbiAgICAgIG11bHRpRGV2aWNlU3RhdHVzOiBzdGF0dXNlc1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW8gOWni+WQjOatpemHh+mbhlxyXG4gICAqL1xyXG4gIGFzeW5jIHN0YXJ0Q2FwdHVyZShcclxuICAgIHNlc3Npb246IENhcHR1cmVTZXNzaW9uLFxyXG4gICAgY2FwdHVyZUNvbXBsZXRlZEhhbmRsZXI/OiBDYXB0dXJlQ29tcGxldGVkSGFuZGxlclxyXG4gICk6IFByb21pc2U8Q2FwdHVyZUVycm9yPiB7XHJcbiAgICAvLyDlpJrorr7lpIfmqKHlvI/kuI3mlK/mjIHovrnmsr/op6blj5FcclxuICAgIGlmIChzZXNzaW9uLnRyaWdnZXJUeXBlID09PSBUcmlnZ2VyVHlwZS5FZGdlKSB7XHJcbiAgICAgIHJldHVybiBDYXB0dXJlRXJyb3IuQmFkUGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9jYXB0dXJpbmcpIHtcclxuICAgICAgcmV0dXJuIENhcHR1cmVFcnJvci5CdXN5O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghc2Vzc2lvbi5jYXB0dXJlQ2hhbm5lbHMgfHwgc2Vzc2lvbi5jYXB0dXJlQ2hhbm5lbHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBDYXB0dXJlRXJyb3IuQmFkUGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOmqjOivgemHh+mbhuWPguaVsFxyXG4gICAgICBjb25zdCB2YWxpZGF0aW9uRXJyb3IgPSB0aGlzLnZhbGlkYXRlQ2FwdHVyZVBhcmFtZXRlcnMoc2Vzc2lvbik7XHJcbiAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3IgIT09IENhcHR1cmVFcnJvci5Ob25lKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25FcnJvcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5YiG6YWN6YCa6YGT5Yiw5ZCE5Liq6K6+5aSHXHJcbiAgICAgIGNvbnN0IGNoYW5uZWxzUGVyRGV2aWNlID0gdGhpcy5zcGxpdENoYW5uZWxzUGVyRGV2aWNlKFxyXG4gICAgICAgIHNlc3Npb24uY2FwdHVyZUNoYW5uZWxzLm1hcChjaCA9PiBjaC5jaGFubmVsTnVtYmVyKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGNoYW5uZWxzUGVyRGV2aWNlWzBdLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICByZXR1cm4gQ2FwdHVyZUVycm9yLkJhZFBhcmFtcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6K6h566X6Kem5Y+R5bu26L+f5YGP56e7XHJcbiAgICAgIGNvbnN0IHNhbXBsZVBlcmlvZCA9IDEwMDAwMDAwMDAuMCAvIHNlc3Npb24uZnJlcXVlbmN5O1xyXG4gICAgICBjb25zdCBkZWxheSA9IHNlc3Npb24udHJpZ2dlclR5cGUgPT09IFRyaWdnZXJUeXBlLkZhc3QgPyBcclxuICAgICAgICBUcmlnZ2VyRGVsYXlzLkZhc3RUcmlnZ2VyRGVsYXkgOiBUcmlnZ2VyRGVsYXlzLkNvbXBsZXhUcmlnZ2VyRGVsYXk7XHJcbiAgICAgIGNvbnN0IG9mZnNldCA9IE1hdGgucm91bmQoKGRlbGF5IC8gc2FtcGxlUGVyaW9kKSArIDAuMyk7XHJcblxyXG4gICAgICAvLyDliJ3lp4vljJborr7lpIfmjZXojrfnirbmgIFcclxuICAgICAgdGhpcy5fZGV2aWNlQ2FwdHVyZXMgPSBuZXcgQXJyYXkodGhpcy5fY29ubmVjdGVkRGV2aWNlcy5sZW5ndGgpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2RldmljZUNhcHR1cmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5fZGV2aWNlQ2FwdHVyZXNbaV0gPSB7IGNvbXBsZXRlZDogZmFsc2UsIHNlc3Npb246IG51bGwgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fY3VycmVudENhcHR1cmVIYW5kbGVyID0gY2FwdHVyZUNvbXBsZXRlZEhhbmRsZXI7XHJcbiAgICAgIHRoaXMuX3NvdXJjZVNlc3Npb24gPSBzZXNzaW9uO1xyXG4gICAgICB0aGlzLl9jYXB0dXJpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgLy8g5ZCv5Yqo5LuO6K6+5aSH6YeH6ZuG77yI6Zmk5LqG5Li76K6+5aSH5aSW55qE5omA5pyJ6K6+5aSH77yJXHJcbiAgICAgIGxldCBjaGFubmVsc0NhcHR1cmluZyA9IDE7XHJcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY2hhbm5lbHNQZXJEZXZpY2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGFubmVscyA9IGNoYW5uZWxzUGVyRGV2aWNlW2ldO1xyXG5cclxuICAgICAgICBpZiAoY2hhbm5lbHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICB0aGlzLl9kZXZpY2VDYXB0dXJlc1tpXS5jb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDliJvlu7rku47orr7lpIfph4fpm4bkvJror51cclxuICAgICAgICBjb25zdCBzbGF2ZVNlc3Npb24gPSB0aGlzLmNyZWF0ZVNsYXZlU2Vzc2lvbihzZXNzaW9uLCBjaGFubmVscywgb2Zmc2V0KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9jb25uZWN0ZWREZXZpY2VzW2ldLnRhZyA9IGNoYW5uZWxzQ2FwdHVyaW5nO1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5fY29ubmVjdGVkRGV2aWNlc1tpXS5zdGFydENhcHR1cmUoc2xhdmVTZXNzaW9uKTtcclxuXHJcbiAgICAgICAgaWYgKGVycm9yICE9PSBDYXB0dXJlRXJyb3IuTm9uZSkge1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5zdG9wQ2FwdHVyZSgpO1xyXG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2hhbm5lbHNDYXB0dXJpbmcrKztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5ZCv5Yqo5Li76K6+5aSH6YeH6ZuG77yI5pyA5ZCO5ZCv5Yqo77yM5L2c5Li65ZCM5q2l5L+h5Y+377yJXHJcbiAgICAgIHRoaXMuX2Nvbm5lY3RlZERldmljZXNbMF0udGFnID0gMDtcclxuICAgICAgY29uc3QgbWFzdGVyQ2hhbm5lbHMgPSBjaGFubmVsc1BlckRldmljZVswXTtcclxuICAgICAgY29uc3QgbWFzdGVyU2Vzc2lvbiA9IHRoaXMuY3JlYXRlTWFzdGVyU2Vzc2lvbihzZXNzaW9uLCBtYXN0ZXJDaGFubmVscyk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBtYXN0ZXJFcnJvciA9IGF3YWl0IHRoaXMuX2Nvbm5lY3RlZERldmljZXNbMF0uc3RhcnRDYXB0dXJlKG1hc3RlclNlc3Npb24pO1xyXG4gICAgICBpZiAobWFzdGVyRXJyb3IgIT09IENhcHR1cmVFcnJvci5Ob25lKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9wQ2FwdHVyZSgpO1xyXG4gICAgICAgIHJldHVybiBtYXN0ZXJFcnJvcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIENhcHR1cmVFcnJvci5Ob25lO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5fY2FwdHVyaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+WkmuiuvuWkh+mHh+mbhuWQr+WKqOWksei0pTonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBDYXB0dXJlRXJyb3IuVW5leHBlY3RlZEVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6aqM6K+B6YeH6ZuG5Y+C5pWwXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB2YWxpZGF0ZUNhcHR1cmVQYXJhbWV0ZXJzKHNlc3Npb246IENhcHR1cmVTZXNzaW9uKTogQ2FwdHVyZUVycm9yIHtcclxuICAgIGNvbnN0IGNoYW5uZWxOdW1iZXJzID0gc2Vzc2lvbi5jYXB0dXJlQ2hhbm5lbHMubWFwKGNoID0+IGNoLmNoYW5uZWxOdW1iZXIpO1xyXG4gICAgY29uc3QgY2FwdHVyZUxpbWl0cyA9IHRoaXMuZ2V0TGltaXRzKGNoYW5uZWxOdW1iZXJzKTtcclxuXHJcbiAgICAvLyDmo4Dmn6Xln7rmnKzlj4LmlbBcclxuICAgIGlmIChjaGFubmVsTnVtYmVycy5zb21lKGNoID0+IGNoIDwgMCB8fCBjaCA+PSB0aGlzLmNoYW5uZWxDb3VudCkgfHxcclxuICAgICAgICAoc2Vzc2lvbi50cmlnZ2VyQml0Q291bnQgIT09IHVuZGVmaW5lZCAmJiBzZXNzaW9uLnRyaWdnZXJCaXRDb3VudCA8IDEpIHx8XHJcbiAgICAgICAgKHNlc3Npb24udHJpZ2dlckJpdENvdW50ICE9PSB1bmRlZmluZWQgJiYgc2Vzc2lvbi50cmlnZ2VyQml0Q291bnQgPiAxNikgfHxcclxuICAgICAgICAoc2Vzc2lvbi50cmlnZ2VyQ2hhbm5lbCAhPT0gdW5kZWZpbmVkICYmIChzZXNzaW9uLnRyaWdnZXJDaGFubmVsIDwgMCB8fCBzZXNzaW9uLnRyaWdnZXJDaGFubmVsID4gMTUpKSB8fFxyXG4gICAgICAgIHNlc3Npb24ucHJlVHJpZ2dlclNhbXBsZXMgPCBjYXB0dXJlTGltaXRzLm1pblByZVNhbXBsZXMgfHxcclxuICAgICAgICBzZXNzaW9uLnBvc3RUcmlnZ2VyU2FtcGxlcyA8IGNhcHR1cmVMaW1pdHMubWluUG9zdFNhbXBsZXMgfHxcclxuICAgICAgICBzZXNzaW9uLnByZVRyaWdnZXJTYW1wbGVzID4gY2FwdHVyZUxpbWl0cy5tYXhQcmVTYW1wbGVzIHx8XHJcbiAgICAgICAgc2Vzc2lvbi5wb3N0VHJpZ2dlclNhbXBsZXMgPiBjYXB0dXJlTGltaXRzLm1heFBvc3RTYW1wbGVzIHx8XHJcbiAgICAgICAgKHNlc3Npb24ucHJlVHJpZ2dlclNhbXBsZXMgKyBzZXNzaW9uLnBvc3RUcmlnZ2VyU2FtcGxlcykgPiBjYXB0dXJlTGltaXRzLm1heFRvdGFsU2FtcGxlcyB8fFxyXG4gICAgICAgIHNlc3Npb24uZnJlcXVlbmN5IDwgdGhpcy5taW5GcmVxdWVuY3kgfHxcclxuICAgICAgICBzZXNzaW9uLmZyZXF1ZW5jeSA+IHRoaXMubWF4RnJlcXVlbmN5KSB7XHJcbiAgICAgIHJldHVybiBDYXB0dXJlRXJyb3IuQmFkUGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBDYXB0dXJlRXJyb3IuTm9uZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwhumAmumBk+WIhumFjeWIsOWQhOS4quiuvuWkh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc3BsaXRDaGFubmVsc1BlckRldmljZShjaGFubmVsczogbnVtYmVyW10pOiBudW1iZXJbXVtdIHtcclxuICAgIGNvbnN0IGNoYW5uZWxzUGVyRGV2aWNlOiBudW1iZXJbXVtdID0gW107XHJcbiAgICBjb25zdCBtYXhDaGFubmVsc1BlckRldmljZSA9IE1hdGgubWluKC4uLnRoaXMuX2Nvbm5lY3RlZERldmljZXMubWFwKGQgPT4gZC5jaGFubmVsQ291bnQpKTtcclxuXHJcbiAgICBmb3IgKGxldCBkZXZpY2VJbmRleCA9IDA7IGRldmljZUluZGV4IDwgdGhpcy5fY29ubmVjdGVkRGV2aWNlcy5sZW5ndGg7IGRldmljZUluZGV4KyspIHtcclxuICAgICAgY29uc3QgZmlyc3RDaGFubmVsID0gZGV2aWNlSW5kZXggKiBtYXhDaGFubmVsc1BlckRldmljZTtcclxuICAgICAgY29uc3QgbGFzdENoYW5uZWwgPSAoZGV2aWNlSW5kZXggKyAxKSAqIG1heENoYW5uZWxzUGVyRGV2aWNlO1xyXG5cclxuICAgICAgY29uc3QgZGV2aWNlQ2hhbm5lbHMgPSBjaGFubmVsc1xyXG4gICAgICAgIC5maWx0ZXIoY2ggPT4gY2ggPj0gZmlyc3RDaGFubmVsICYmIGNoIDwgbGFzdENoYW5uZWwpXHJcbiAgICAgICAgLm1hcChjaCA9PiBjaCAtIGZpcnN0Q2hhbm5lbCk7XHJcbiAgICAgIFxyXG4gICAgICBjaGFubmVsc1BlckRldmljZS5wdXNoKGRldmljZUNoYW5uZWxzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hhbm5lbHNQZXJEZXZpY2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rku47orr7lpIfph4fpm4bkvJror51cclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZVNsYXZlU2Vzc2lvbihcclxuICAgIG9yaWdpbmFsU2Vzc2lvbjogQ2FwdHVyZVNlc3Npb24sIFxyXG4gICAgY2hhbm5lbHM6IG51bWJlcltdLCBcclxuICAgIG9mZnNldDogbnVtYmVyXHJcbiAgKTogQ2FwdHVyZVNlc3Npb24ge1xyXG4gICAgY29uc3Qgc2xhdmVTZXNzaW9uOiBDYXB0dXJlU2Vzc2lvbiA9IHtcclxuICAgICAgLi4ub3JpZ2luYWxTZXNzaW9uLFxyXG4gICAgICBjYXB0dXJlQ2hhbm5lbHM6IGNoYW5uZWxzLm1hcChjaCA9PiAoe1xyXG4gICAgICAgIGNoYW5uZWxOdW1iZXI6IGNoLFxyXG4gICAgICAgIGNoYW5uZWxOYW1lOiBgQ2hhbm5lbCAke2NoICsgMX1gLFxyXG4gICAgICAgIGhpZGRlbjogZmFsc2VcclxuICAgICAgfSkpLFxyXG4gICAgICB0cmlnZ2VyQ2hhbm5lbDogMjQsIC8vIOS9v+eUqOWklumDqOinpuWPkVxyXG4gICAgICB0cmlnZ2VyVHlwZTogVHJpZ2dlclR5cGUuRWRnZSxcclxuICAgICAgcHJlVHJpZ2dlclNhbXBsZXM6IG9yaWdpbmFsU2Vzc2lvbi5wcmVUcmlnZ2VyU2FtcGxlcyArIG9mZnNldCxcclxuICAgICAgcG9zdFRyaWdnZXJTYW1wbGVzOiBvcmlnaW5hbFNlc3Npb24ucG9zdFRyaWdnZXJTYW1wbGVzIC0gb2Zmc2V0LFxyXG4gICAgICBsb29wQ291bnQ6IDAsXHJcbiAgICAgIG1lYXN1cmVCdXJzdHM6IGZhbHNlLFxyXG4gICAgICB0cmlnZ2VySW52ZXJ0ZWQ6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzbGF2ZVNlc3Npb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rkuLvorr7lpIfph4fpm4bkvJror51cclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZU1hc3RlclNlc3Npb24oXHJcbiAgICBvcmlnaW5hbFNlc3Npb246IENhcHR1cmVTZXNzaW9uLCBcclxuICAgIGNoYW5uZWxzOiBudW1iZXJbXVxyXG4gICk6IENhcHR1cmVTZXNzaW9uIHtcclxuICAgIGNvbnN0IG1hc3RlclNlc3Npb246IENhcHR1cmVTZXNzaW9uID0ge1xyXG4gICAgICAuLi5vcmlnaW5hbFNlc3Npb24sXHJcbiAgICAgIGNhcHR1cmVDaGFubmVsczogY2hhbm5lbHMubWFwKGNoID0+ICh7XHJcbiAgICAgICAgY2hhbm5lbE51bWJlcjogY2gsXHJcbiAgICAgICAgY2hhbm5lbE5hbWU6IGBDaGFubmVsICR7Y2ggKyAxfWAsXHJcbiAgICAgICAgaGlkZGVuOiBmYWxzZVxyXG4gICAgICB9KSlcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG1hc3RlclNlc3Npb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlgZzmraLmiYDmnInorr7lpIfph4fpm4ZcclxuICAgKi9cclxuICBhc3luYyBzdG9wQ2FwdHVyZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIGlmICghdGhpcy5fY2FwdHVyaW5nKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOWBnOatouaJgOacieiuvuWkh1xyXG4gICAgICBjb25zdCBzdG9wUHJvbWlzZXMgPSB0aGlzLl9jb25uZWN0ZWREZXZpY2VzLm1hcChkZXZpY2UgPT4gZGV2aWNlLnN0b3BDYXB0dXJlKCkpO1xyXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChzdG9wUHJvbWlzZXMpO1xyXG5cclxuICAgICAgdGhpcy5fY2FwdHVyaW5nID0gZmFsc2U7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign5YGc5q2i5aSa6K6+5aSH6YeH6ZuG5aSx6LSlOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L+b5YWl5byV5a+85Yqg6L2956iL5bqP5qih5byPXHJcbiAgICovXHJcbiAgYXN5bmMgZW50ZXJCb290bG9hZGVyKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgaWYgKHRoaXMuX2NhcHR1cmluZykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8g5omA5pyJ6K6+5aSH6YO96ZyA6KaB5oiQ5Yqf6L+b5YWl5byV5a+85Yqg6L2956iL5bqP5qih5byPXHJcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChcclxuICAgICAgICB0aGlzLl9jb25uZWN0ZWREZXZpY2VzLm1hcChkZXZpY2UgPT4gZGV2aWNlLmVudGVyQm9vdGxvYWRlcigpKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdHMuZXZlcnkocmVzdWx0ID0+IHJlc3VsdCA9PT0gdHJ1ZSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfov5vlhaXlvJXlr7zliqDovb3nqIvluo/lpLHotKU6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIbljZXkuKrorr7lpIfnmoTph4fpm4blrozmiJDkuovku7ZcclxuICAgKi9cclxuICBwcml2YXRlIGhhbmRsZURldmljZUNhcHR1cmVDb21wbGV0ZWQoYXJnczogQ2FwdHVyZUV2ZW50QXJncyk6IHZvaWQge1xyXG4gICAgLy8g5ZCM5q2l6ZSB5a6aXHJcbiAgICBpZiAoIXRoaXMuX2NhcHR1cmluZyB8fCAhdGhpcy5fc291cmNlU2Vzc2lvbikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhcmdzLnN1Y2Nlc3MpIHtcclxuICAgICAgdGhpcy5zdG9wQ2FwdHVyZSgpO1xyXG4gICAgICB0aGlzLl9kZXZpY2VDYXB0dXJlcyA9IFtdO1xyXG5cclxuICAgICAgY29uc3QgZXZlbnRBcmdzOiBDYXB0dXJlRXZlbnRBcmdzID0ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIHNlc3Npb246IHRoaXMuX3NvdXJjZVNlc3Npb25cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50Q2FwdHVyZUhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50Q2FwdHVyZUhhbmRsZXIoZXZlbnRBcmdzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmVtaXRDYXB0dXJlQ29tcGxldGVkKGV2ZW50QXJncyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOiOt+WPluiuvuWkh+e0ouW8lVxyXG4gICAgY29uc3QgZGV2aWNlSW5kZXggPSAoYXJncy5zZXNzaW9uIGFzIGFueSkuZGV2aWNlVGFnIHx8IDA7XHJcbiAgICBcclxuICAgIHRoaXMuX2RldmljZUNhcHR1cmVzW2RldmljZUluZGV4XS5zZXNzaW9uID0gYXJncy5zZXNzaW9uO1xyXG4gICAgdGhpcy5fZGV2aWNlQ2FwdHVyZXNbZGV2aWNlSW5kZXhdLmNvbXBsZXRlZCA9IHRydWU7XHJcblxyXG4gICAgLy8g5qOA5p+l5omA5pyJ6K6+5aSH5piv5ZCm6YO95a6M5oiQ6YeH6ZuGXHJcbiAgICBpZiAodGhpcy5fZGV2aWNlQ2FwdHVyZXMuZXZlcnkoY2FwdHVyZSA9PiBjYXB0dXJlLmNvbXBsZXRlZCkpIHtcclxuICAgICAgdGhpcy5jb21iaW5lRGV2aWNlUmVzdWx0cygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5ZCI5bm25omA5pyJ6K6+5aSH55qE6YeH6ZuG57uT5p6cXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb21iaW5lRGV2aWNlUmVzdWx0cygpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5fc291cmNlU2Vzc2lvbikgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IG1heENoYW5uZWxzUGVyRGV2aWNlID0gTWF0aC5taW4oLi4udGhpcy5fY29ubmVjdGVkRGV2aWNlcy5tYXAoZCA9PiBkLmNoYW5uZWxDb3VudCkpO1xyXG5cclxuICAgIC8vIOWQiOW5tuaJgOacieiuvuWkh+eahOmAmumBk+aVsOaNrlxyXG4gICAgZm9yIChsZXQgZGV2aWNlSW5kZXggPSAwOyBkZXZpY2VJbmRleCA8IHRoaXMuX2RldmljZUNhcHR1cmVzLmxlbmd0aDsgZGV2aWNlSW5kZXgrKykge1xyXG4gICAgICBjb25zdCBkZXZpY2VDYXB0dXJlID0gdGhpcy5fZGV2aWNlQ2FwdHVyZXNbZGV2aWNlSW5kZXhdO1xyXG4gICAgICBcclxuICAgICAgaWYgKGRldmljZUNhcHR1cmUuc2Vzc2lvbikge1xyXG4gICAgICAgIGZvciAoY29uc3QgZGV2aWNlQ2hhbm5lbCBvZiBkZXZpY2VDYXB0dXJlLnNlc3Npb24uY2FwdHVyZUNoYW5uZWxzKSB7XHJcbiAgICAgICAgICAvLyDorqHnrpflnKjmupDkvJror53kuK3nmoTpgJrpgZPntKLlvJVcclxuICAgICAgICAgIGNvbnN0IGdsb2JhbENoYW5uZWxOdW1iZXIgPSBkZXZpY2VDaGFubmVsLmNoYW5uZWxOdW1iZXIgKyBkZXZpY2VJbmRleCAqIG1heENoYW5uZWxzUGVyRGV2aWNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDmib7liLDlr7nlupTnmoTmupDkvJror53pgJrpgZNcclxuICAgICAgICAgIGNvbnN0IHNvdXJjZUNoYW5uZWwgPSB0aGlzLl9zb3VyY2VTZXNzaW9uLmNhcHR1cmVDaGFubmVscy5maW5kKFxyXG4gICAgICAgICAgICBjaCA9PiBjaC5jaGFubmVsTnVtYmVyID09PSBnbG9iYWxDaGFubmVsTnVtYmVyXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGlmIChzb3VyY2VDaGFubmVsKSB7XHJcbiAgICAgICAgICAgIHNvdXJjZUNoYW5uZWwuc2FtcGxlcyA9IGRldmljZUNoYW5uZWwuc2FtcGxlcztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jYXB0dXJpbmcgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdCBldmVudEFyZ3M6IENhcHR1cmVFdmVudEFyZ3MgPSB7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIHNlc3Npb246IHRoaXMuX3NvdXJjZVNlc3Npb25cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRDYXB0dXJlSGFuZGxlcikge1xyXG4gICAgICB0aGlzLl9jdXJyZW50Q2FwdHVyZUhhbmRsZXIoZXZlbnRBcmdzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZW1pdENhcHR1cmVDb21wbGV0ZWQoZXZlbnRBcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWkmuiuvuWkh+mHh+mbhuaooeW8j1xyXG4gICAqL1xyXG4gIG92ZXJyaWRlIGdldENhcHR1cmVNb2RlKGNoYW5uZWxzOiBudW1iZXJbXSk6IENhcHR1cmVNb2RlIHtcclxuICAgIGNvbnN0IHNwbGl0Q2hhbm5lbHMgPSB0aGlzLnNwbGl0Q2hhbm5lbHNQZXJEZXZpY2UoY2hhbm5lbHMpO1xyXG4gICAgY29uc3QgbWF4Q2hhbm5lbFBlckRldmljZSA9IHNwbGl0Q2hhbm5lbHNcclxuICAgICAgLm1hcChkZXZpY2VDaGFubmVscyA9PiBNYXRoLm1heCguLi5kZXZpY2VDaGFubmVscywgMCkpXHJcbiAgICAgIC5yZWR1Y2UoKG1heCwgY3VycmVudCkgPT4gTWF0aC5tYXgobWF4LCBjdXJyZW50KSwgMCk7XHJcblxyXG4gICAgaWYgKG1heENoYW5uZWxQZXJEZXZpY2UgPCA4KSByZXR1cm4gQ2FwdHVyZU1vZGUuQ2hhbm5lbHNfODtcclxuICAgIGlmIChtYXhDaGFubmVsUGVyRGV2aWNlIDwgMTYpIHJldHVybiBDYXB0dXJlTW9kZS5DaGFubmVsc18xNjtcclxuICAgIHJldHVybiBDYXB0dXJlTW9kZS5DaGFubmVsc18yNDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWkmuiuvuWkh+mHh+mbhumZkOWItlxyXG4gICAqL1xyXG4gIG92ZXJyaWRlIGdldExpbWl0cyhjaGFubmVsczogbnVtYmVyW10pOiBhbnkge1xyXG4gICAgY29uc3Qgc3BsaXRDaGFubmVscyA9IHRoaXMuc3BsaXRDaGFubmVsc1BlckRldmljZShjaGFubmVscyk7XHJcbiAgICBjb25zdCBkZXZpY2VMaW1pdHMgPSB0aGlzLl9jb25uZWN0ZWREZXZpY2VzLm1hcCgoZGV2aWNlLCBpbmRleCkgPT4gXHJcbiAgICAgIGRldmljZS5nZXRMaW1pdHMoc3BsaXRDaGFubmVsc1tpbmRleF0gfHwgW10pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIOi/lOWbnuaJgOacieiuvuWkh+eahOacgOS4peagvOmZkOWItlxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWluUHJlU2FtcGxlczogTWF0aC5tYXgoLi4uZGV2aWNlTGltaXRzLm1hcChsaW1pdCA9PiBsaW1pdC5taW5QcmVTYW1wbGVzKSksXHJcbiAgICAgIG1heFByZVNhbXBsZXM6IE1hdGgubWluKC4uLmRldmljZUxpbWl0cy5tYXAobGltaXQgPT4gbGltaXQubWF4UHJlU2FtcGxlcykpLFxyXG4gICAgICBtaW5Qb3N0U2FtcGxlczogTWF0aC5tYXgoLi4uZGV2aWNlTGltaXRzLm1hcChsaW1pdCA9PiBsaW1pdC5taW5Qb3N0U2FtcGxlcykpLFxyXG4gICAgICBtYXhQb3N0U2FtcGxlczogTWF0aC5taW4oLi4uZGV2aWNlTGltaXRzLm1hcChsaW1pdCA9PiBsaW1pdC5tYXhQb3N0U2FtcGxlcykpLFxyXG4gICAgICBnZXQgbWF4VG90YWxTYW1wbGVzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWluUHJlU2FtcGxlcyArIHRoaXMubWF4UG9zdFNhbXBsZXM7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnvZHnu5zphY3nva7vvIjlpJrorr7lpIfkuI3mlK/mjIHvvIlcclxuICAgKi9cclxuICBvdmVycmlkZSBhc3luYyBzZW5kTmV0d29ya0NvbmZpZyhcclxuICAgIGFjY2Vzc1BvaW50TmFtZTogc3RyaW5nLFxyXG4gICAgcGFzc3dvcmQ6IHN0cmluZyxcclxuICAgIGlwQWRkcmVzczogc3RyaW5nLFxyXG4gICAgcG9ydDogbnVtYmVyXHJcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gZmFsc2U7IC8vIOWkmuiuvuWkh+mpseWKqOS4jeaUr+aMgee9kee7nOmFjee9rlxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W55S15Y6L54q25oCB77yI5aSa6K6+5aSH5LiN5pSv5oyB77yJXHJcbiAgICovXHJcbiAgb3ZlcnJpZGUgYXN5bmMgZ2V0Vm9sdGFnZVN0YXR1cygpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuICdVTlNVUFBPUlRFRCc7IC8vIOWkmuiuvuWkh+mpseWKqOS4jeaUr+aMgeeUteWOi+ebkeaOp1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E5bu656Gs5Lu26IO95Yqb5o+P6L+wXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZENhcGFiaWxpdGllcygpOiBhbnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2hhbm5lbHM6IHtcclxuICAgICAgICBkaWdpdGFsOiB0aGlzLmNoYW5uZWxDb3VudCxcclxuICAgICAgICBtYXhWb2x0YWdlOiA1LjAsXHJcbiAgICAgICAgaW5wdXRJbXBlZGFuY2U6IDEwMDAwMDBcclxuICAgICAgfSxcclxuICAgICAgc2FtcGxpbmc6IHtcclxuICAgICAgICBtYXhSYXRlOiB0aGlzLm1heEZyZXF1ZW5jeSxcclxuICAgICAgICBtaW5SYXRlOiB0aGlzLm1pbkZyZXF1ZW5jeSxcclxuICAgICAgICBzdXBwb3J0ZWRSYXRlczogW3RoaXMubWF4RnJlcXVlbmN5XSxcclxuICAgICAgICBidWZmZXJTaXplOiB0aGlzLmJ1ZmZlclNpemUsXHJcbiAgICAgICAgc3RyZWFtaW5nU3VwcG9ydDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgdHJpZ2dlcnM6IHtcclxuICAgICAgICB0eXBlczogWzEsIDJdLCAvLyBDb21wbGV4LCBGYXN0ICjkuI3mlK/mjIFFZGdl5ZKMQmxhc3QpXHJcbiAgICAgICAgbWF4Q2hhbm5lbHM6IDE2LFxyXG4gICAgICAgIHBhdHRlcm5XaWR0aDogMTYsXHJcbiAgICAgICAgc2VxdWVudGlhbFN1cHBvcnQ6IHRydWUsXHJcbiAgICAgICAgY29uZGl0aW9uczogWydwYXR0ZXJuJywgJ2NvbXBsZXgnXVxyXG4gICAgICB9LFxyXG4gICAgICBjb25uZWN0aXZpdHk6IHtcclxuICAgICAgICBpbnRlcmZhY2VzOiBbJ211bHRpLWRldmljZSddLFxyXG4gICAgICAgIHByb3RvY29sczogWydjdXN0b20nXVxyXG4gICAgICB9LFxyXG4gICAgICBmZWF0dXJlczoge1xyXG4gICAgICAgIG11bHRpRGV2aWNlOiB0cnVlLFxyXG4gICAgICAgIHN5bmNocm9uaXphdGlvbjogdHJ1ZSxcclxuICAgICAgICBtYXhEZXZpY2VzOiA1LFxyXG4gICAgICAgIHRvdGFsQ2hhbm5lbHM6IHRoaXMuY2hhbm5lbENvdW50XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDotYTmupDmuIXnkIZcclxuICAgKi9cclxuICBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBkZXZpY2Ugb2YgdGhpcy5fY29ubmVjdGVkRGV2aWNlcykge1xyXG4gICAgICBkZXZpY2UuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/drivers/MultiAnalyzerDriver.ts\n\n}");

/***/ }),

/***/ "./src/drivers/NetworkLogicAnalyzerDriver.ts":
/*!***************************************************!*\
  !*** ./src/drivers/NetworkLogicAnalyzerDriver.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NetworkLogicAnalyzerDriver = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst dgram_1 = __webpack_require__(/*! dgram */ \"dgram\");\nconst AnalyzerDriverBase_1 = __webpack_require__(/*! ./AnalyzerDriverBase */ \"./src/drivers/AnalyzerDriverBase.ts\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * 网络逻辑分析器通用驱动\n * 支持通过TCP/UDP协议通信的各种网络设备\n * 包括：ESP32逻辑分析器、树莓派逻辑分析器、FPGA逻辑分析器等\n */\n// 协议类型枚举\nvar ProtocolType;\n(function (ProtocolType) {\n    ProtocolType[\"TCP\"] = \"tcp\";\n    ProtocolType[\"UDP\"] = \"udp\";\n    ProtocolType[\"HTTP\"] = \"http\";\n    ProtocolType[\"WEBSOCKET\"] = \"websocket\";\n})(ProtocolType || (ProtocolType = {}));\n// 数据格式类型枚举\nvar DataFormat;\n(function (DataFormat) {\n    DataFormat[\"BINARY\"] = \"binary\";\n    DataFormat[\"JSON\"] = \"json\";\n    DataFormat[\"CSV\"] = \"csv\";\n    DataFormat[\"RAW\"] = \"raw\";\n})(DataFormat || (DataFormat = {}));\nclass NetworkLogicAnalyzerDriver extends AnalyzerDriverBase_1.AnalyzerDriverBase {\n    // 属性实现\n    get deviceVersion() {\n        return this._version;\n    }\n    get channelCount() {\n        return this._channelCount;\n    }\n    get maxFrequency() {\n        return this._maxFrequency;\n    }\n    get blastFrequency() {\n        return this._blastFrequency;\n    }\n    get bufferSize() {\n        return this._bufferSize;\n    }\n    get isNetwork() {\n        return true;\n    }\n    get isCapturing() {\n        return this._capturing;\n    }\n    get driverType() {\n        return AnalyzerTypes_1.AnalyzerDriverType.Network;\n    }\n    constructor(host, port, protocol = ProtocolType.TCP, dataFormat = DataFormat.JSON, authToken) {\n        super();\n        // 私有变量\n        this._capturing = false;\n        this._version = null;\n        this._channelCount = 8;\n        this._maxFrequency = 40000000; // 40MHz默认\n        this._blastFrequency = 80000000; // 80MHz默认\n        this._bufferSize = 8000000; // 8M样本默认\n        // 通信对象\n        this._tcpSocket = undefined;\n        this._udpSocket = undefined;\n        this._isConnected = false;\n        this._deviceConfig = {};\n        this._authToken = '';\n        this._host = host;\n        this._port = port;\n        this._protocol = protocol;\n        this._dataFormat = dataFormat;\n        this._authToken = authToken || '';\n    }\n    /**\n     * 连接设备\n     */\n    async connect(params) {\n        try {\n            // 根据协议类型初始化连接\n            switch (this._protocol) {\n                case ProtocolType.TCP:\n                case ProtocolType.HTTP:\n                    await this.initializeTCP();\n                    break;\n                case ProtocolType.UDP:\n                    await this.initializeUDP();\n                    break;\n                case ProtocolType.WEBSOCKET:\n                    await this.initializeWebSocket();\n                    break;\n                default:\n                    throw new Error(`不支持的协议类型: ${this._protocol}`);\n            }\n            // 进行设备握手和认证\n            await this.performHandshake();\n            // 查询设备信息\n            await this.queryDeviceInfo();\n            this._isConnected = true;\n            return {\n                success: true,\n                deviceInfo: {\n                    name: this._version || 'Network Logic Analyzer',\n                    version: this._version ?? undefined,\n                    type: this.driverType,\n                    connectionPath: `${this._protocol}://${this._host}:${this._port}`,\n                    isNetwork: true,\n                    capabilities: this.buildCapabilities()\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : '连接失败'\n            };\n        }\n    }\n    /**\n     * 断开连接\n     */\n    async disconnect() {\n        this._isConnected = false;\n        if (this._tcpSocket) {\n            this._tcpSocket.destroy();\n            this._tcpSocket = undefined;\n        }\n        if (this._udpSocket) {\n            this._udpSocket.close();\n            this._udpSocket = undefined;\n        }\n    }\n    /**\n     * 获取设备状态\n     */\n    async getStatus() {\n        try {\n            const statusResponse = await this.sendNetworkCommand({\n                command: 'GET_STATUS',\n                timestamp: Date.now()\n            });\n            return {\n                isConnected: this._isConnected,\n                isCapturing: this._capturing,\n                batteryVoltage: statusResponse.battery_voltage || 'N/A',\n                temperature: statusResponse.temperature,\n                lastError: statusResponse.last_error\n            };\n        }\n        catch (error) {\n            return {\n                isConnected: this._isConnected,\n                isCapturing: this._capturing,\n                batteryVoltage: 'N/A',\n                lastError: error instanceof Error ? error.message : '状态查询失败'\n            };\n        }\n    }\n    /**\n     * 开始采集\n     */\n    async startCapture(session, captureCompletedHandler) {\n        if (this._capturing) {\n            return AnalyzerTypes_1.CaptureError.Busy;\n        }\n        if (!this._isConnected) {\n            return AnalyzerTypes_1.CaptureError.HardwareError;\n        }\n        try {\n            this._capturing = true;\n            // 设置捕获完成处理器\n            if (captureCompletedHandler) {\n                this.once('captureCompleted', captureCompletedHandler);\n            }\n            // 发送采集配置\n            const captureConfig = this.buildCaptureConfig(session);\n            const response = await this.sendNetworkCommand({\n                command: 'START_CAPTURE',\n                config: captureConfig,\n                timestamp: Date.now()\n            });\n            if (!response.success) {\n                throw new Error(response.error || '采集启动失败');\n            }\n            // 监控采集进度\n            this.monitorCaptureProgress(session, response.capture_id);\n            return AnalyzerTypes_1.CaptureError.None;\n        }\n        catch (error) {\n            this._capturing = false;\n            console.error('网络采集启动失败:', error);\n            return AnalyzerTypes_1.CaptureError.UnexpectedError;\n        }\n    }\n    /**\n     * 停止采集\n     */\n    async stopCapture() {\n        if (!this._capturing) {\n            return true;\n        }\n        try {\n            await this.sendNetworkCommand({\n                command: 'STOP_CAPTURE',\n                timestamp: Date.now()\n            });\n            this._capturing = false;\n            return true;\n        }\n        catch (error) {\n            console.error('停止网络采集失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 进入引导加载程序模式\n     */\n    async enterBootloader() {\n        try {\n            const response = await this.sendNetworkCommand({\n                command: 'ENTER_BOOTLOADER',\n                timestamp: Date.now()\n            });\n            return response.success === true;\n        }\n        catch (error) {\n            console.error('进入引导加载程序失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 发送网络配置\n     */\n    async sendNetworkConfig(accessPointName, password, ipAddress, port) {\n        try {\n            const response = await this.sendNetworkCommand({\n                command: 'SET_NETWORK_CONFIG',\n                config: {\n                    ssid: accessPointName,\n                    password: password,\n                    ip_address: ipAddress,\n                    port: port\n                },\n                timestamp: Date.now()\n            });\n            return response.success === true;\n        }\n        catch (error) {\n            console.error('发送网络配置失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 获取电压状态\n     */\n    async getVoltageStatus() {\n        try {\n            const response = await this.sendNetworkCommand({\n                command: 'GET_VOLTAGE',\n                timestamp: Date.now()\n            });\n            return response.voltage || 'N/A';\n        }\n        catch (error) {\n            console.error('获取电压状态失败:', error);\n            return 'ERROR';\n        }\n    }\n    /**\n     * 初始化TCP连接\n     */\n    async initializeTCP() {\n        return new Promise((resolve, reject) => {\n            this._tcpSocket = new net_1.Socket();\n            this._tcpSocket.connect(this._port, this._host, () => {\n                console.log(`TCP连接已建立: ${this._host}:${this._port}`);\n                resolve();\n            });\n            this._tcpSocket.on('error', error => {\n                reject(new Error(`TCP连接失败: ${error.message}`));\n            });\n            this._tcpSocket.on('close', () => {\n                this._isConnected = false;\n                console.log('TCP连接已关闭');\n            });\n        });\n    }\n    /**\n     * 初始化UDP连接\n     */\n    async initializeUDP() {\n        return new Promise((resolve, reject) => {\n            this._udpSocket = (0, dgram_1.createSocket)('udp4');\n            this._udpSocket.bind(0, () => {\n                console.log(`UDP套接字已创建，目标: ${this._host}:${this._port}`);\n                resolve();\n            });\n            this._udpSocket.on('error', error => {\n                reject(new Error(`UDP连接失败: ${error.message}`));\n            });\n            this._udpSocket.on('close', () => {\n                this._isConnected = false;\n                console.log('UDP连接已关闭');\n            });\n        });\n    }\n    /**\n     * 初始化WebSocket连接\n     */\n    async initializeWebSocket() {\n        // 注意：这里需要WebSocket库，实际实现中可能需要import WebSocket库\n        return new Promise((resolve, reject) => {\n            try {\n                // 这里是WebSocket连接的占位符实现\n                // 实际使用时需要安装和导入ws库\n                console.log(`WebSocket连接: ws://${this._host}:${this._port}`);\n                resolve();\n            }\n            catch (error) {\n                reject(new Error(`WebSocket连接失败: ${error}`));\n            }\n        });\n    }\n    /**\n     * 执行握手和认证\n     */\n    async performHandshake() {\n        const handshakeData = {\n            command: 'HANDSHAKE',\n            version: '1.0',\n            client_type: 'vscode-logic-analyzer',\n            auth_token: this._authToken,\n            timestamp: Date.now()\n        };\n        const response = await this.sendNetworkCommand(handshakeData);\n        if (!response.success) {\n            throw new Error(`握手失败: ${response.error || '未知错误'}`);\n        }\n        console.log('设备握手成功');\n    }\n    /**\n     * 查询设备信息\n     */\n    async queryDeviceInfo() {\n        const response = await this.sendNetworkCommand({\n            command: 'GET_DEVICE_INFO',\n            timestamp: Date.now()\n        });\n        if (response.device_info) {\n            const info = response.device_info;\n            this._version = info.version || 'Unknown Network Device';\n            this._channelCount = info.channels || 8;\n            this._maxFrequency = info.max_frequency || 40000000;\n            this._blastFrequency = info.blast_frequency || this._maxFrequency * 2;\n            this._bufferSize = info.buffer_size || 8000000;\n            this._deviceConfig = info.config || {};\n        }\n    }\n    /**\n     * 构建采集配置\n     */\n    buildCaptureConfig(session) {\n        return {\n            channels: session.captureChannels.map(ch => ({\n                number: ch.channelNumber,\n                name: ch.channelName,\n                enabled: true\n            })),\n            sample_rate: session.frequency,\n            pre_trigger_samples: session.preTriggerSamples,\n            post_trigger_samples: session.postTriggerSamples,\n            trigger: {\n                type: session.triggerType,\n                channel: session.triggerChannel,\n                inverted: session.triggerInverted,\n                pattern: session.triggerPattern,\n                bit_count: session.triggerBitCount\n            },\n            loop_count: session.loopCount,\n            measure_bursts: session.measureBursts,\n            data_format: this._dataFormat\n        };\n    }\n    /**\n     * 监控采集进度\n     */\n    async monitorCaptureProgress(session, captureId) {\n        const checkInterval = setInterval(async () => {\n            try {\n                if (!this._capturing) {\n                    clearInterval(checkInterval);\n                    return;\n                }\n                const statusResponse = await this.sendNetworkCommand({\n                    command: 'GET_CAPTURE_STATUS',\n                    capture_id: captureId,\n                    timestamp: Date.now()\n                });\n                if (statusResponse.status === 'COMPLETED') {\n                    clearInterval(checkInterval);\n                    await this.processCaptureResults(session, captureId);\n                }\n                else if (statusResponse.status === 'ERROR') {\n                    clearInterval(checkInterval);\n                    this.handleCaptureError(session, statusResponse.error_message);\n                }\n                else if (statusResponse.progress !== undefined) {\n                    // 可选：报告采集进度\n                    console.log(`采集进度: ${statusResponse.progress}%`);\n                }\n            }\n            catch (error) {\n                clearInterval(checkInterval);\n                this.handleCaptureError(session, `监控采集进度失败: ${error}`);\n            }\n        }, 200); // 每200ms检查一次状态\n        // 设置超时保护\n        setTimeout(() => {\n            if (this._capturing) {\n                clearInterval(checkInterval);\n                this.handleCaptureError(session, '采集超时');\n            }\n        }, 300000); // 5分钟超时\n    }\n    /**\n     * 处理采集结果\n     */\n    async processCaptureResults(session, captureId) {\n        try {\n            // 请求采集数据\n            const dataResponse = await this.sendNetworkCommand({\n                command: 'GET_CAPTURE_DATA',\n                capture_id: captureId,\n                format: this._dataFormat,\n                timestamp: Date.now()\n            });\n            if (!dataResponse.success) {\n                throw new Error(dataResponse.error || '获取采集数据失败');\n            }\n            // 根据数据格式解析数据\n            this.parseNetworkCaptureData(session, dataResponse);\n            this._capturing = false;\n            const eventArgs = {\n                success: true,\n                session\n            };\n            this.emitCaptureCompleted(eventArgs);\n        }\n        catch (error) {\n            this.handleCaptureError(session, `处理采集结果失败: ${error}`);\n        }\n    }\n    /**\n     * 解析网络采集数据\n     */\n    parseNetworkCaptureData(session, dataResponse) {\n        switch (this._dataFormat) {\n            case DataFormat.JSON:\n                this.parseJSONData(session, dataResponse.data);\n                break;\n            case DataFormat.BINARY:\n                this.parseBinaryData(session, dataResponse.data);\n                break;\n            case DataFormat.CSV:\n                this.parseCSVData(session, dataResponse.data);\n                break;\n            case DataFormat.RAW:\n                this.parseRawData(session, dataResponse.data);\n                break;\n            default:\n                throw new Error(`不支持的数据格式: ${this._dataFormat}`);\n        }\n    }\n    /**\n     * 解析JSON格式数据\n     */\n    parseJSONData(session, data) {\n        if (data.channels && Array.isArray(data.channels)) {\n            for (let i = 0; i < session.captureChannels.length; i++) {\n                const channel = session.captureChannels[i];\n                const channelData = data.channels.find((ch) => ch.number === channel.channelNumber);\n                if (channelData && channelData.samples) {\n                    channel.samples = new Uint8Array(channelData.samples);\n                }\n            }\n        }\n        // 解析突发信息\n        if (data.bursts && Array.isArray(data.bursts)) {\n            session.bursts = data.bursts;\n        }\n    }\n    /**\n     * 解析二进制格式数据\n     */\n    parseBinaryData(session, data) {\n        // data应该是Base64编码的二进制数据\n        const binaryData = Buffer.from(data, 'base64');\n        const sampleCount = binaryData.length / session.captureChannels.length;\n        for (let i = 0; i < session.captureChannels.length; i++) {\n            const channel = session.captureChannels[i];\n            channel.samples = new Uint8Array(sampleCount);\n            for (let j = 0; j < sampleCount; j++) {\n                const byteIndex = j * session.captureChannels.length + i;\n                channel.samples[j] = binaryData[byteIndex];\n            }\n        }\n    }\n    /**\n     * 解析CSV格式数据\n     */\n    parseCSVData(session, csvData) {\n        const lines = csvData.split('\\\\n');\n        if (lines.length < 2)\n            return;\n        const headers = lines[0].split(',').map(h => h.trim());\n        const dataLines = lines.slice(1).filter(line => line.trim());\n        // 初始化通道数据\n        for (const channel of session.captureChannels) {\n            channel.samples = new Uint8Array(dataLines.length);\n        }\n        // 解析数据行\n        for (let rowIndex = 0; rowIndex < dataLines.length; rowIndex++) {\n            const values = dataLines[rowIndex].split(',');\n            for (const channel of session.captureChannels) {\n                const channelName = `CH${channel.channelNumber}`;\n                const columnIndex = headers.indexOf(channelName);\n                if (columnIndex >= 0 && columnIndex < values.length) {\n                    const value = values[columnIndex].trim();\n                    channel.samples[rowIndex] = value === '1' ? 1 : 0;\n                }\n            }\n        }\n    }\n    /**\n     * 解析原始格式数据\n     */\n    parseRawData(session, data) {\n        // 假设data是样本数组的数组\n        if (Array.isArray(data) && data.length >= session.captureChannels.length) {\n            for (let i = 0; i < session.captureChannels.length; i++) {\n                const channel = session.captureChannels[i];\n                if (Array.isArray(data[i])) {\n                    channel.samples = new Uint8Array(data[i]);\n                }\n            }\n        }\n    }\n    /**\n     * 处理采集错误\n     */\n    handleCaptureError(session, errorMessage) {\n        this._capturing = false;\n        console.error('网络采集错误:', errorMessage);\n        const eventArgs = {\n            success: false,\n            session\n        };\n        this.emitCaptureCompleted(eventArgs);\n    }\n    /**\n     * 发送网络命令\n     */\n    async sendNetworkCommand(command) {\n        return new Promise((resolve, reject) => {\n            const commandData = JSON.stringify(command);\n            if (this._protocol === ProtocolType.TCP && this._tcpSocket) {\n                this.sendTCPCommand(commandData, resolve, reject);\n            }\n            else if (this._protocol === ProtocolType.UDP && this._udpSocket) {\n                this.sendUDPCommand(commandData, resolve, reject);\n            }\n            else {\n                reject(new Error('无效的网络连接'));\n            }\n        });\n    }\n    /**\n     * 发送TCP命令\n     */\n    sendTCPCommand(commandData, resolve, reject) {\n        let responseData = '';\n        const responseHandler = (data) => {\n            responseData += data.toString();\n            // 检查响应是否完整（简单的换行符检查）\n            if (responseData.includes('\\\\n')) {\n                this._tcpSocket.off('data', responseHandler);\n                clearTimeout(timeoutId);\n                try {\n                    const response = JSON.parse(responseData.trim());\n                    resolve(response);\n                }\n                catch (error) {\n                    reject(new Error(`解析响应失败: ${error}`));\n                }\n            }\n        };\n        const timeoutId = setTimeout(() => {\n            this._tcpSocket.off('data', responseHandler);\n            reject(new Error('网络命令超时'));\n        }, 10000);\n        this._tcpSocket.on('data', responseHandler);\n        this._tcpSocket.write(commandData + '\\\\n', error => {\n            if (error) {\n                clearTimeout(timeoutId);\n                reject(new Error(`发送TCP命令失败: ${error.message}`));\n            }\n        });\n    }\n    /**\n     * 发送UDP命令\n     */\n    sendUDPCommand(commandData, resolve, reject) {\n        const responseHandler = (msg, rinfo) => {\n            this._udpSocket.off('message', responseHandler);\n            clearTimeout(timeoutId);\n            try {\n                const response = JSON.parse(msg.toString());\n                resolve(response);\n            }\n            catch (error) {\n                reject(new Error(`解析UDP响应失败: ${error}`));\n            }\n        };\n        const timeoutId = setTimeout(() => {\n            this._udpSocket.off('message', responseHandler);\n            reject(new Error('UDP命令超时'));\n        }, 10000);\n        this._udpSocket.on('message', responseHandler);\n        this._udpSocket.send(commandData, this._port, this._host, error => {\n            if (error) {\n                clearTimeout(timeoutId);\n                reject(new Error(`发送UDP命令失败: ${error.message}`));\n            }\n        });\n    }\n    /**\n     * 构建硬件能力描述\n     */\n    buildCapabilities() {\n        return {\n            channels: {\n                digital: this._channelCount,\n                maxVoltage: 5.0,\n                inputImpedance: 1000000\n            },\n            sampling: {\n                maxRate: this._maxFrequency,\n                minRate: this.minFrequency,\n                supportedRates: [this._maxFrequency, this._blastFrequency],\n                bufferSize: this._bufferSize,\n                streamingSupport: true\n            },\n            triggers: {\n                types: [0, 1, 2, 3],\n                maxChannels: this._channelCount,\n                patternWidth: 16,\n                sequentialSupport: true,\n                conditions: ['rising', 'falling', 'high', 'low', 'change']\n            },\n            connectivity: {\n                interfaces: ['ethernet', 'wifi'],\n                protocols: [this._protocol]\n            },\n            features: {\n                signalGeneration: this._deviceConfig.signal_generation || false,\n                powerSupply: this._deviceConfig.power_supply || false,\n                voltageMonitoring: this._deviceConfig.voltage_monitoring || false,\n                remoteControl: true,\n                firmwareUpdate: this._deviceConfig.firmware_update || false\n            }\n        };\n    }\n    /**\n     * 资源清理\n     */\n    dispose() {\n        this.disconnect();\n        super.dispose();\n    }\n}\nexports.NetworkLogicAnalyzerDriver = NetworkLogicAnalyzerDriver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/drivers/NetworkLogicAnalyzerDriver.ts\n\n}");

/***/ }),

/***/ "./src/drivers/RigolSiglentDriver.ts":
/*!*******************************************!*\
  !*** ./src/drivers/RigolSiglentDriver.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RigolSiglentDriver = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst AnalyzerDriverBase_1 = __webpack_require__(/*! ./AnalyzerDriverBase */ \"./src/drivers/AnalyzerDriverBase.ts\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * Rigol/Siglent逻辑分析器驱动实现\n * 基于SCPI (Standard Commands for Programmable Instruments) 协议\n * 支持设备型号：Rigol DS1000Z系列, Siglent SDS系列等\n */\nclass RigolSiglentDriver extends AnalyzerDriverBase_1.AnalyzerDriverBase {\n    // 属性实现\n    get deviceVersion() {\n        return this._version;\n    }\n    get channelCount() {\n        return this._channelCount;\n    }\n    get maxFrequency() {\n        return this._maxFrequency;\n    }\n    get blastFrequency() {\n        return this._blastFrequency;\n    }\n    get bufferSize() {\n        return this._bufferSize;\n    }\n    get isNetwork() {\n        return this._isNetwork;\n    }\n    get isCapturing() {\n        return this._capturing;\n    }\n    get driverType() {\n        return this._isNetwork ? AnalyzerTypes_1.AnalyzerDriverType.Network : AnalyzerTypes_1.AnalyzerDriverType.Serial;\n    }\n    constructor(connectionString) {\n        super();\n        // 私有变量\n        this._capturing = false;\n        this._isNetwork = true; // 大多数现代设备支持网络\n        this._version = null;\n        this._channelCount = 16; // 默认16通道\n        this._maxFrequency = 1000000000; // 1GHz默认\n        this._blastFrequency = 2000000000; // 2GHz默认\n        this._bufferSize = 56000000; // 56M样本默认\n        this._manufacturer = 'unknown';\n        // 通信对象\n        this._socket = undefined;\n        this._isConnected = false;\n        this._commandQueue = [];\n        this._isProcessingCommand = false;\n        if (!connectionString) {\n            throw new Error('连接字符串不能为空');\n        }\n        // 解析连接字符串 \"host:port\" 或 \"host\"\n        if (connectionString.includes(':')) {\n            const parts = connectionString.split(':');\n            this._host = parts[0];\n            this._port = parseInt(parts[1], 10);\n        }\n        else {\n            this._host = connectionString;\n            this._port = RigolSiglentDriver.SCPI_PORT;\n        }\n    }\n    /**\n     * 连接设备\n     */\n    async connect(params) {\n        try {\n            await this.initializeSocket();\n            await this.queryDeviceInfo();\n            await this.initializeLogicAnalyzer();\n            this._isConnected = true;\n            return {\n                success: true,\n                deviceInfo: {\n                    name: this._version || 'Rigol/Siglent Logic Analyzer',\n                    version: this._version ?? undefined,\n                    type: this.driverType,\n                    connectionPath: `${this._host}:${this._port}`,\n                    isNetwork: this._isNetwork,\n                    capabilities: this.buildCapabilities()\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : '连接失败'\n            };\n        }\n    }\n    /**\n     * 断开连接\n     */\n    async disconnect() {\n        this._isConnected = false;\n        if (this._socket) {\n            this._socket.destroy();\n            this._socket = undefined;\n        }\n        this._commandQueue = [];\n        this._isProcessingCommand = false;\n    }\n    /**\n     * 获取设备状态\n     */\n    async getStatus() {\n        try {\n            const status = await this.sendSCPICommand('SYST:ERR?');\n            return {\n                isConnected: this._isConnected,\n                isCapturing: this._capturing,\n                batteryVoltage: 'N/A',\n                lastError: status !== '+0,\"No error\"' ? status : undefined\n            };\n        }\n        catch (error) {\n            return {\n                isConnected: this._isConnected,\n                isCapturing: this._capturing,\n                batteryVoltage: 'N/A',\n                lastError: error instanceof Error ? error.message : '状态查询失败'\n            };\n        }\n    }\n    /**\n     * 开始采集\n     */\n    async startCapture(session, captureCompletedHandler) {\n        if (this._capturing) {\n            return AnalyzerTypes_1.CaptureError.Busy;\n        }\n        if (!this._isConnected || !this._socket) {\n            return AnalyzerTypes_1.CaptureError.HardwareError;\n        }\n        try {\n            this._capturing = true;\n            // 配置逻辑分析器设置\n            await this.configureLogicAnalyzer(session);\n            // 启动采集\n            await this.startSCPICapture();\n            // 设置捕获完成处理器\n            if (captureCompletedHandler) {\n                this.once('captureCompleted', captureCompletedHandler);\n            }\n            // 监控采集状态\n            this.monitorCaptureStatus(session);\n            return AnalyzerTypes_1.CaptureError.None;\n        }\n        catch (error) {\n            this._capturing = false;\n            console.error('Rigol/Siglent采集启动失败:', error);\n            return AnalyzerTypes_1.CaptureError.UnexpectedError;\n        }\n    }\n    /**\n     * 停止采集\n     */\n    async stopCapture() {\n        if (!this._capturing) {\n            return true;\n        }\n        try {\n            // 发送停止命令\n            await this.sendSCPICommand('LA:STOP');\n            this._capturing = false;\n            return true;\n        }\n        catch (error) {\n            console.error('停止Rigol/Siglent采集失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 进入引导加载程序模式（不支持）\n     */\n    async enterBootloader() {\n        return false; // Rigol/Siglent设备不支持引导加载程序模式\n    }\n    /**\n     * 初始化Socket连接\n     */\n    async initializeSocket() {\n        return new Promise((resolve, reject) => {\n            this._socket = new net_1.Socket();\n            this._socket.connect(this._port, this._host, () => {\n                console.log(`已连接到Rigol/Siglent设备: ${this._host}:${this._port}`);\n                resolve();\n            });\n            this._socket.on('error', error => {\n                reject(new Error(`Socket连接失败: ${error.message}`));\n            });\n            this._socket.on('close', () => {\n                this._isConnected = false;\n                console.log('Rigol/Siglent连接已关闭');\n            });\n            this._socket.on('data', data => {\n                this.handleIncomingData(data);\n            });\n        });\n    }\n    /**\n     * 查询设备信息\n     */\n    async queryDeviceInfo() {\n        try {\n            // 查询设备身份信息\n            const idn = await this.sendSCPICommand('*IDN?');\n            this.parseIDNResponse(idn);\n            // 查询逻辑分析器能力\n            await this.queryLogicAnalyzerCapabilities();\n        }\n        catch (error) {\n            throw new Error(`查询设备信息失败: ${error}`);\n        }\n    }\n    /**\n     * 解析IDN响应\n     */\n    parseIDNResponse(idn) {\n        // IDN格式: \"厂商,型号,序列号,固件版本\"\n        const parts = idn.split(',');\n        if (parts.length >= 4) {\n            const manufacturer = parts[0].toLowerCase();\n            const model = parts[1];\n            const firmware = parts[3];\n            this._version = `${parts[0]} ${model} (${firmware})`;\n            // 识别制造商\n            if (manufacturer.includes('rigol')) {\n                this._manufacturer = 'rigol';\n            }\n            else if (manufacturer.includes('siglent')) {\n                this._manufacturer = 'siglent';\n            }\n            // 根据型号设置默认参数\n            this.setModelCapabilities(model);\n        }\n    }\n    /**\n     * 根据型号设置能力参数\n     */\n    setModelCapabilities(model) {\n        const modelLower = model.toLowerCase();\n        // Rigol设备\n        if (modelLower.includes('ds1000z') || modelLower.includes('ds2000') || modelLower.includes('ds4000')) {\n            this._channelCount = 16;\n            this._maxFrequency = 1000000000; // 1GHz\n            this._blastFrequency = 2000000000; // 2GHz\n            this._bufferSize = 56000000; // 56M样本\n        }\n        // Siglent设备\n        else if (modelLower.includes('sds') || modelLower.includes('sps')) {\n            this._channelCount = 16;\n            this._maxFrequency = 1000000000; // 1GHz\n            this._blastFrequency = 2000000000; // 2GHz\n            this._bufferSize = 100000000; // 100M样本\n        }\n        // 默认配置\n        else {\n            this._channelCount = 16;\n            this._maxFrequency = 500000000; // 500MHz\n            this._blastFrequency = 1000000000; // 1GHz\n            this._bufferSize = 28000000; // 28M样本\n        }\n    }\n    /**\n     * 查询逻辑分析器能力\n     */\n    async queryLogicAnalyzerCapabilities() {\n        try {\n            // 查询逻辑分析器是否可用\n            const laAvailable = await this.sendSCPICommand('LA:STAT?');\n            if (!laAvailable.includes('1') && !laAvailable.toLowerCase().includes('on')) {\n                console.warn('逻辑分析器功能可能不可用或未激活');\n            }\n            // 查询通道数\n            try {\n                const channels = await this.sendSCPICommand('LA:CHAN?');\n                const channelMatch = channels.match(/\\\\d+/);\n                if (channelMatch) {\n                    this._channelCount = parseInt(channelMatch[0], 10);\n                }\n            }\n            catch (error) {\n                console.warn('无法查询逻辑分析器通道数:', error);\n            }\n            // 查询采样率范围\n            try {\n                const sampleRate = await this.sendSCPICommand('LA:SRAT:MAX?');\n                const rateMatch = sampleRate.match(/([0-9.]+)[E]?([+-]?[0-9]+)?/);\n                if (rateMatch) {\n                    const baseRate = parseFloat(rateMatch[1]);\n                    const exponent = rateMatch[2] ? parseInt(rateMatch[2], 10) : 0;\n                    this._maxFrequency = baseRate * Math.pow(10, exponent);\n                }\n            }\n            catch (error) {\n                console.warn('无法查询最大采样率:', error);\n            }\n            // 查询内存深度\n            try {\n                const memDepth = await this.sendSCPICommand('LA:MDEP?');\n                const depthMatch = memDepth.match(/([0-9.]+)[E]?([+-]?[0-9]+)?/);\n                if (depthMatch) {\n                    const baseDepth = parseFloat(depthMatch[1]);\n                    const exponent = depthMatch[2] ? parseInt(depthMatch[2], 10) : 0;\n                    this._bufferSize = baseDepth * Math.pow(10, exponent);\n                }\n            }\n            catch (error) {\n                console.warn('无法查询内存深度:', error);\n            }\n        }\n        catch (error) {\n            console.warn('查询逻辑分析器能力失败:', error);\n        }\n    }\n    /**\n     * 初始化逻辑分析器\n     */\n    async initializeLogicAnalyzer() {\n        try {\n            // 重置逻辑分析器\n            await this.sendSCPICommand('LA:RST');\n            // 设置为逻辑分析模式\n            await this.sendSCPICommand('LA:STAT ON');\n            // 等待设备稳定\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n        catch (error) {\n            console.warn('初始化逻辑分析器失败:', error);\n        }\n    }\n    /**\n     * 配置逻辑分析器\n     */\n    async configureLogicAnalyzer(session) {\n        try {\n            // 配置采样率\n            await this.sendSCPICommand(`LA:SRAT ${session.frequency}`);\n            // 配置内存深度\n            const totalSamples = session.preTriggerSamples + session.postTriggerSamples;\n            await this.sendSCPICommand(`LA:MDEP ${totalSamples}`);\n            // 配置通道\n            for (const channel of session.captureChannels) {\n                const channelNum = channel.channelNumber + 1; // SCPI通常从1开始编号\n                await this.sendSCPICommand(`LA:D${channelNum}:DISP ON`);\n                if (channel.channelName) {\n                    await this.sendSCPICommand(`LA:D${channelNum}:LAB \"${channel.channelName}\"`);\n                }\n            }\n            // 配置触发\n            if (session.triggerType !== undefined && session.triggerChannel !== undefined) {\n                await this.configureTrigger(session);\n            }\n            // 配置时基\n            const timeRange = totalSamples / session.frequency;\n            await this.sendSCPICommand(`LA:SCAL ${timeRange}`);\n        }\n        catch (error) {\n            throw new Error(`配置逻辑分析器失败: ${error}`);\n        }\n    }\n    /**\n     * 配置触发\n     */\n    async configureTrigger(session) {\n        const triggerChannel = session.triggerChannel + 1; // SCPI从1开始编号\n        try {\n            // 设置触发源\n            await this.sendSCPICommand(`LA:TRIG:SOUR D${triggerChannel}`);\n            // 设置触发类型\n            let triggerSlope = 'POS'; // 默认上升沿\n            if (session.triggerInverted) {\n                triggerSlope = 'NEG';\n            }\n            await this.sendSCPICommand(`LA:TRIG:SLOP ${triggerSlope}`);\n            // 设置触发模式\n            switch (session.triggerType) {\n                case 0: // Edge\n                    await this.sendSCPICommand('LA:TRIG:TYP EDGE');\n                    break;\n                case 1: // Complex/Pattern\n                    await this.sendSCPICommand('LA:TRIG:TYP PATT');\n                    if (session.triggerPattern !== undefined) {\n                        // 将触发模式转换为SCPI格式\n                        const pattern = session.triggerPattern.toString(2).padStart(16, '0');\n                        await this.sendSCPICommand(`LA:TRIG:PATT:DATA \"${pattern}\"`);\n                    }\n                    break;\n                default:\n                    await this.sendSCPICommand('LA:TRIG:TYP EDGE');\n            }\n            // 设置触发位置\n            if (session.preTriggerSamples > 0) {\n                const triggerPosition = session.preTriggerSamples /\n                    (session.preTriggerSamples + session.postTriggerSamples);\n                await this.sendSCPICommand(`LA:TRIG:POS ${triggerPosition * 100}`);\n            }\n        }\n        catch (error) {\n            console.warn('配置触发失败:', error);\n        }\n    }\n    /**\n     * 启动SCPI采集\n     */\n    async startSCPICapture() {\n        try {\n            // 清除错误状态\n            await this.sendSCPICommand('*CLS');\n            // 启动单次采集\n            await this.sendSCPICommand('LA:RUN');\n            console.log('Rigol/Siglent逻辑分析器采集已启动');\n        }\n        catch (error) {\n            throw new Error(`启动采集失败: ${error}`);\n        }\n    }\n    /**\n     * 监控采集状态\n     */\n    async monitorCaptureStatus(session) {\n        const checkInterval = setInterval(async () => {\n            try {\n                if (!this._capturing) {\n                    clearInterval(checkInterval);\n                    return;\n                }\n                // 查询采集状态\n                const status = await this.sendSCPICommand('LA:STAT?');\n                if (status.includes('STOP') || status.includes('0')) {\n                    clearInterval(checkInterval);\n                    await this.processCaptureResults(session);\n                }\n            }\n            catch (error) {\n                clearInterval(checkInterval);\n                this.handleCaptureError(session, `监控采集状态失败: ${error}`);\n            }\n        }, 500); // 每500ms检查一次状态\n        // 设置超时保护\n        setTimeout(() => {\n            if (this._capturing) {\n                clearInterval(checkInterval);\n                this.handleCaptureError(session, '采集超时');\n            }\n        }, 60000); // 60秒超时\n    }\n    /**\n     * 处理采集结果\n     */\n    async processCaptureResults(session) {\n        try {\n            // 读取采集数据\n            for (const channel of session.captureChannels) {\n                const channelNum = channel.channelNumber + 1;\n                // 请求通道数据\n                const dataCommand = `LA:D${channelNum}:DATA?`;\n                const rawData = await this.sendSCPICommand(dataCommand);\n                // 解析数据\n                channel.samples = this.parseSCPIBinaryData(rawData);\n            }\n            this._capturing = false;\n            const eventArgs = {\n                success: true,\n                session\n            };\n            this.emitCaptureCompleted(eventArgs);\n        }\n        catch (error) {\n            this.handleCaptureError(session, `处理采集结果失败: ${error}`);\n        }\n    }\n    /**\n     * 解析SCPI二进制数据\n     */\n    parseSCPIBinaryData(rawData) {\n        // SCPI二进制数据格式通常是: #<digit><count><data>\n        if (rawData.startsWith('#')) {\n            const digitCount = parseInt(rawData[1], 10);\n            const dataLength = parseInt(rawData.substring(2, 2 + digitCount), 10);\n            const binaryStart = 2 + digitCount;\n            // 提取二进制数据部分\n            const binaryData = rawData.substring(binaryStart, binaryStart + dataLength);\n            // 转换为Uint8Array\n            const samples = new Uint8Array(binaryData.length);\n            for (let i = 0; i < binaryData.length; i++) {\n                samples[i] = binaryData.charCodeAt(i) !== 0 ? 1 : 0;\n            }\n            return samples;\n        }\n        // 如果不是二进制格式，尝试解析为ASCII格式\n        const values = rawData.split(',').map(val => parseInt(val.trim(), 10));\n        const samples = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; i++) {\n            samples[i] = values[i] ? 1 : 0;\n        }\n        return samples;\n    }\n    /**\n     * 处理采集错误\n     */\n    handleCaptureError(session, errorMessage) {\n        this._capturing = false;\n        console.error('Rigol/Siglent采集错误:', errorMessage);\n        const eventArgs = {\n            success: false,\n            session\n        };\n        this.emitCaptureCompleted(eventArgs);\n    }\n    /**\n     * 发送SCPI命令\n     */\n    async sendSCPICommand(command) {\n        return new Promise((resolve, reject) => {\n            this._commandQueue.push({ command, resolve, reject });\n            this.processCommandQueue();\n        });\n    }\n    /**\n     * 处理命令队列\n     */\n    async processCommandQueue() {\n        if (this._isProcessingCommand || this._commandQueue.length === 0) {\n            return;\n        }\n        this._isProcessingCommand = true;\n        const { command, resolve, reject } = this._commandQueue.shift();\n        try {\n            if (!this._socket) {\n                reject(new Error('Socket未连接'));\n                return;\n            }\n            let responseData = '';\n            const isQuery = command.includes('?');\n            // 数据接收处理器\n            const dataHandler = (data) => {\n                responseData += data.toString();\n                // 检查响应是否完整（以换行符结束）\n                if (responseData.includes('\\\\n')) {\n                    this._socket.off('data', dataHandler);\n                    clearTimeout(timeoutId);\n                    resolve(responseData.trim());\n                    // 继续处理队列中的其他命令\n                    this._isProcessingCommand = false;\n                    setTimeout(() => this.processCommandQueue(), 10);\n                }\n            };\n            // 设置超时\n            const timeoutId = setTimeout(() => {\n                this._socket.off('data', dataHandler);\n                reject(new Error(`SCPI命令超时: ${command}`));\n                this._isProcessingCommand = false;\n                setTimeout(() => this.processCommandQueue(), 10);\n            }, 5000);\n            // 如果是查询命令，设置数据接收器\n            if (isQuery) {\n                this._socket.on('data', dataHandler);\n            }\n            else {\n                // 非查询命令，直接返回\n                setTimeout(() => {\n                    resolve('OK');\n                    this._isProcessingCommand = false;\n                    setTimeout(() => this.processCommandQueue(), 10);\n                }, 100);\n            }\n            // 发送命令\n            this._socket.write(command + '\\\\n', error => {\n                if (error) {\n                    if (isQuery) {\n                        this._socket.off('data', dataHandler);\n                    }\n                    clearTimeout(timeoutId);\n                    reject(new Error(`发送SCPI命令失败: ${error.message}`));\n                    this._isProcessingCommand = false;\n                    setTimeout(() => this.processCommandQueue(), 10);\n                }\n            });\n        }\n        catch (error) {\n            reject(error);\n            this._isProcessingCommand = false;\n            setTimeout(() => this.processCommandQueue(), 10);\n        }\n    }\n    /**\n     * 处理接收到的数据\n     */\n    handleIncomingData(data) {\n        // 这个方法主要用于处理异步数据或状态更新\n        const dataStr = data.toString();\n        // 可以在这里处理设备主动发送的状态信息\n        if (dataStr.includes('ERROR') || dataStr.includes('FAIL')) {\n            console.warn('设备报告错误:', dataStr);\n        }\n    }\n    /**\n     * 构建硬件能力描述\n     */\n    buildCapabilities() {\n        return {\n            channels: {\n                digital: this._channelCount,\n                maxVoltage: 5.0,\n                inputImpedance: 1000000\n            },\n            sampling: {\n                maxRate: this._maxFrequency,\n                minRate: this.minFrequency,\n                supportedRates: [this._maxFrequency, this._blastFrequency],\n                bufferSize: this._bufferSize,\n                streamingSupport: false\n            },\n            triggers: {\n                types: [0, 1, 2],\n                maxChannels: this._channelCount,\n                patternWidth: 16,\n                sequentialSupport: true,\n                conditions: ['rising', 'falling', 'high', 'low', 'change']\n            },\n            connectivity: {\n                interfaces: ['ethernet', 'usb'],\n                protocols: ['scpi', 'vxi11']\n            },\n            features: {\n                signalGeneration: false,\n                powerSupply: false,\n                voltageMonitoring: false,\n                mathFunctions: true,\n                protocolDecoding: true\n            }\n        };\n    }\n    /**\n     * 资源清理\n     */\n    dispose() {\n        this.disconnect();\n        super.dispose();\n    }\n}\nexports.RigolSiglentDriver = RigolSiglentDriver;\n// SCPI端口配置\nRigolSiglentDriver.SCPI_PORT = 5555;\nRigolSiglentDriver.VXI11_PORT = 111;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/drivers/RigolSiglentDriver.ts\n\n}");

/***/ }),

/***/ "./src/drivers/SaleaeLogicDriver.ts":
/*!******************************************!*\
  !*** ./src/drivers/SaleaeLogicDriver.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SaleaeLogicDriver = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst AnalyzerDriverBase_1 = __webpack_require__(/*! ./AnalyzerDriverBase */ \"./src/drivers/AnalyzerDriverBase.ts\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * Saleae Logic兼容驱动实现\n * 基于Saleae Logic 2 Socket API\n */\nclass SaleaeLogicDriver extends AnalyzerDriverBase_1.AnalyzerDriverBase {\n    // 属性实现\n    get deviceVersion() {\n        return this._version;\n    }\n    get channelCount() {\n        return this._channelCount;\n    }\n    get maxFrequency() {\n        return this._maxFrequency;\n    }\n    get blastFrequency() {\n        return this._blastFrequency;\n    }\n    get bufferSize() {\n        return this._bufferSize;\n    }\n    get isNetwork() {\n        return true; // Saleae Logic总是通过网络API通信\n    }\n    get isCapturing() {\n        return this._capturing;\n    }\n    get driverType() {\n        return AnalyzerTypes_1.AnalyzerDriverType.Network;\n    }\n    constructor(connectionString) {\n        super();\n        // 私有变量\n        this._capturing = false;\n        this._version = null;\n        this._channelCount = 8; // 默认8通道，实际会从设备查询\n        this._maxFrequency = 100000000; // 100MHz，默认值\n        this._blastFrequency = 500000000; // 500MHz，默认值\n        this._bufferSize = 10000000; // 默认10M样本\n        // 通信对象\n        this._socket = undefined;\n        this._isConnected = false;\n        this._deviceId = null;\n        this._currentCaptureId = null;\n        // 解析连接字符串 \"host:port\" 或使用默认值\n        if (connectionString && connectionString.includes(':')) {\n            const parts = connectionString.split(':');\n            this._host = parts[0];\n            this._port = parseInt(parts[1], 10);\n        }\n        else {\n            this._host = SaleaeLogicDriver.DEFAULT_HOST;\n            this._port = SaleaeLogicDriver.DEFAULT_PORT;\n        }\n    }\n    /**\n     * 连接设备\n     */\n    async connect(params) {\n        try {\n            await this.initializeSocket();\n            await this.queryDeviceInfo();\n            this._isConnected = true;\n            return {\n                success: true,\n                deviceInfo: {\n                    name: this._version || 'Saleae Logic Analyzer',\n                    version: this._version ?? undefined,\n                    type: this.driverType,\n                    connectionPath: `${this._host}:${this._port}`,\n                    isNetwork: true,\n                    capabilities: this.buildCapabilities()\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : '连接失败'\n            };\n        }\n    }\n    /**\n     * 断开连接\n     */\n    async disconnect() {\n        this._isConnected = false;\n        if (this._socket) {\n            this._socket.destroy();\n            this._socket = undefined;\n        }\n        this._deviceId = null;\n        this._currentCaptureId = null;\n    }\n    /**\n     * 获取设备状态\n     */\n    async getStatus() {\n        return {\n            isConnected: this._isConnected,\n            isCapturing: this._capturing,\n            batteryVoltage: 'N/A' // Saleae Logic通常是USB供电\n        };\n    }\n    /**\n     * 开始采集\n     */\n    async startCapture(session, captureCompletedHandler) {\n        if (this._capturing) {\n            return AnalyzerTypes_1.CaptureError.Busy;\n        }\n        if (!this._isConnected || !this._socket) {\n            return AnalyzerTypes_1.CaptureError.HardwareError;\n        }\n        try {\n            this._capturing = true;\n            // 设置捕获配置\n            await this.configureCaptureSettings(session);\n            // 开始采集\n            const captureId = await this.startSaleaeCapture();\n            this._currentCaptureId = captureId;\n            // 设置捕获完成处理器\n            if (captureCompletedHandler) {\n                this.once('captureCompleted', captureCompletedHandler);\n            }\n            // 监控采集状态\n            this.monitorCaptureProgress(session);\n            return AnalyzerTypes_1.CaptureError.None;\n        }\n        catch (error) {\n            this._capturing = false;\n            console.error('Saleae采集启动失败:', error);\n            return AnalyzerTypes_1.CaptureError.UnexpectedError;\n        }\n    }\n    /**\n     * 停止采集\n     */\n    async stopCapture() {\n        if (!this._capturing) {\n            return true;\n        }\n        try {\n            if (this._currentCaptureId) {\n                await this.sendCommand({\n                    command: 'STOP_CAPTURE',\n                    capture_id: this._currentCaptureId\n                });\n            }\n            this._capturing = false;\n            this._currentCaptureId = null;\n            return true;\n        }\n        catch (error) {\n            console.error('停止Saleae采集失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 进入引导加载程序模式（Saleae不支持）\n     */\n    async enterBootloader() {\n        return false; // Saleae Logic不支持引导加载程序模式\n    }\n    /**\n     * 初始化Socket连接\n     */\n    async initializeSocket() {\n        return new Promise((resolve, reject) => {\n            this._socket = new net_1.Socket();\n            this._socket.connect(this._port, this._host, () => {\n                console.log(`已连接到Saleae Logic API: ${this._host}:${this._port}`);\n                resolve();\n            });\n            this._socket.on('error', error => {\n                reject(new Error(`Socket连接失败: ${error.message}`));\n            });\n            this._socket.on('close', () => {\n                this._isConnected = false;\n                console.log('Saleae Logic连接已关闭');\n            });\n        });\n    }\n    /**\n     * 查询设备信息\n     */\n    async queryDeviceInfo() {\n        try {\n            // 获取连接的设备列表\n            const devicesResponse = await this.sendCommand({ command: 'GET_CONNECTED_DEVICES' });\n            if (devicesResponse.connected_devices && devicesResponse.connected_devices.length > 0) {\n                const device = devicesResponse.connected_devices[0];\n                this._deviceId = device.device_id;\n                this._version = `Saleae Logic ${device.device_type}`;\n                // 根据设备类型设置通道数和频率\n                this.setDeviceCapabilities(device.device_type);\n            }\n            else {\n                throw new Error('未发现连接的Saleae Logic设备');\n            }\n            // 获取详细的设备能力信息\n            if (this._deviceId) {\n                const capabilitiesResponse = await this.sendCommand({\n                    command: 'GET_DEVICE_CAPABILITIES',\n                    device_id: this._deviceId\n                });\n                if (capabilitiesResponse.capabilities) {\n                    this.parseDeviceCapabilities(capabilitiesResponse.capabilities);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`查询Saleae设备信息失败: ${error}`);\n        }\n    }\n    /**\n     * 根据设备类型设置能力参数\n     */\n    setDeviceCapabilities(deviceType) {\n        // 根据Saleae Logic设备类型设置默认参数\n        switch (deviceType.toLowerCase()) {\n            case 'logic 4':\n                this._channelCount = 4;\n                this._maxFrequency = 12500000; // 12.5MHz\n                this._blastFrequency = 25000000; // 25MHz\n                break;\n            case 'logic 8':\n                this._channelCount = 8;\n                this._maxFrequency = 100000000; // 100MHz\n                this._blastFrequency = 500000000; // 500MHz\n                break;\n            case 'logic 16':\n                this._channelCount = 16;\n                this._maxFrequency = 100000000; // 100MHz\n                this._blastFrequency = 500000000; // 500MHz\n                break;\n            case 'logic pro 8':\n                this._channelCount = 8;\n                this._maxFrequency = 500000000; // 500MHz\n                this._blastFrequency = 1000000000; // 1GHz\n                break;\n            case 'logic pro 16':\n                this._channelCount = 16;\n                this._maxFrequency = 500000000; // 500MHz\n                this._blastFrequency = 1000000000; // 1GHz\n                break;\n            default:\n                this._channelCount = 8;\n                this._maxFrequency = 100000000;\n                this._blastFrequency = 500000000;\n        }\n    }\n    /**\n     * 解析设备能力信息\n     */\n    parseDeviceCapabilities(capabilities) {\n        if (capabilities.digital_channels) {\n            this._channelCount = capabilities.digital_channels.length;\n        }\n        if (capabilities.supported_sample_rates) {\n            const rates = capabilities.supported_sample_rates;\n            this._maxFrequency = Math.max(...rates);\n            this._blastFrequency = this._maxFrequency;\n        }\n        if (capabilities.memory_size) {\n            this._bufferSize = capabilities.memory_size;\n        }\n    }\n    /**\n     * 配置采集设置\n     */\n    async configureCaptureSettings(session) {\n        if (!this._deviceId) {\n            throw new Error('设备ID未设置');\n        }\n        // 配置数字通道\n        const digitalChannels = session.captureChannels.map(ch => ({\n            index: ch.channelNumber,\n            enabled: true,\n            label: ch.channelName || `Channel ${ch.channelNumber + 1}`\n        }));\n        await this.sendCommand({\n            command: 'SET_CAPTURE_CONFIGURATION',\n            device_id: this._deviceId,\n            configuration: {\n                digital_channels: digitalChannels,\n                sample_rate: session.frequency,\n                capture_mode: this.getSaleaeCaptureMode(session),\n                trigger_settings: this.buildTriggerSettings(session)\n            }\n        });\n    }\n    /**\n     * 获取Saleae采集模式\n     */\n    getSaleaeCaptureMode(session) {\n        // Saleae Logic 2的采集模式\n        if (session.measureBursts || session.loopCount > 0) {\n            return 'LOOPING';\n        }\n        return 'NORMAL';\n    }\n    /**\n     * 构建触发设置\n     */\n    buildTriggerSettings(session) {\n        const triggers = [];\n        // 基于原始触发类型构建Saleae触发设置\n        if (session.triggerType !== undefined && session.triggerChannel !== undefined) {\n            triggers.push({\n                channel_index: session.triggerChannel,\n                trigger_type: session.triggerInverted ? 'FALLING_EDGE' : 'RISING_EDGE',\n                minimum_pulse_width_seconds: 0\n            });\n        }\n        return {\n            triggers,\n            capture_mode: 'ALWAYS' // 始终捕获，或根据触发条件调整\n        };\n    }\n    /**\n     * 开始Saleae采集\n     */\n    async startSaleaeCapture() {\n        const response = await this.sendCommand({\n            command: 'START_CAPTURE',\n            device_id: this._deviceId\n        });\n        if (!response.capture_id) {\n            throw new Error('Saleae采集启动失败：未收到capture_id');\n        }\n        return response.capture_id;\n    }\n    /**\n     * 监控采集进度\n     */\n    async monitorCaptureProgress(session) {\n        const checkInterval = setInterval(async () => {\n            try {\n                if (!this._currentCaptureId || !this._capturing) {\n                    clearInterval(checkInterval);\n                    return;\n                }\n                const statusResponse = await this.sendCommand({\n                    command: 'GET_CAPTURE_STATUS',\n                    capture_id: this._currentCaptureId\n                });\n                if (statusResponse.status === 'COMPLETE') {\n                    clearInterval(checkInterval);\n                    await this.processCaptureResults(session);\n                }\n                else if (statusResponse.status === 'ERROR') {\n                    clearInterval(checkInterval);\n                    this.handleCaptureError(session, statusResponse.error_message);\n                }\n            }\n            catch (error) {\n                clearInterval(checkInterval);\n                this.handleCaptureError(session, `监控采集进度失败: ${error}`);\n            }\n        }, 100); // 每100ms检查一次状态\n    }\n    /**\n     * 处理采集结果\n     */\n    async processCaptureResults(session) {\n        try {\n            // 获取采集数据\n            const dataResponse = await this.sendCommand({\n                command: 'GET_CAPTURE_DATA',\n                capture_id: this._currentCaptureId,\n                format: 'BINARY'\n            });\n            // 解析数据到session.captureChannels\n            this.parseSaleaeData(session, dataResponse);\n            this._capturing = false;\n            this._currentCaptureId = null;\n            const eventArgs = {\n                success: true,\n                session\n            };\n            this.emitCaptureCompleted(eventArgs);\n        }\n        catch (error) {\n            this.handleCaptureError(session, `处理采集结果失败: ${error}`);\n        }\n    }\n    /**\n     * 解析Saleae数据格式\n     */\n    parseSaleaeData(session, dataResponse) {\n        // Saleae Logic 2 API返回的数据格式处理\n        if (dataResponse.digital_samples) {\n            const samples = dataResponse.digital_samples;\n            for (let channelIndex = 0; channelIndex < session.captureChannels.length; channelIndex++) {\n                const channel = session.captureChannels[channelIndex];\n                const channelData = samples[channel.channelNumber];\n                if (channelData && channelData.samples) {\n                    // 转换Saleae的时间序列数据为样本数组\n                    channel.samples = this.convertSaleaeTimeSeriesToSamples(channelData.samples, channelData.sample_rate || session.frequency);\n                }\n            }\n        }\n    }\n    /**\n     * 转换Saleae时间序列数据为样本数组\n     */\n    convertSaleaeTimeSeriesToSamples(timeSeries, sampleRate) {\n        if (timeSeries.length === 0)\n            return new Uint8Array(0);\n        // 计算总样本数\n        const lastTime = timeSeries[timeSeries.length - 1].time;\n        const totalSamples = Math.ceil(lastTime * sampleRate) + 1;\n        const samples = new Uint8Array(totalSamples);\n        // 填充样本数据\n        let currentValue = 0;\n        let timeSeriesIndex = 0;\n        for (let sampleIndex = 0; sampleIndex < totalSamples; sampleIndex++) {\n            const currentTime = sampleIndex / sampleRate;\n            // 检查是否需要更新当前值\n            while (timeSeriesIndex < timeSeries.length &&\n                timeSeries[timeSeriesIndex].time <= currentTime) {\n                currentValue = timeSeries[timeSeriesIndex].value ? 1 : 0;\n                timeSeriesIndex++;\n            }\n            samples[sampleIndex] = currentValue;\n        }\n        return samples;\n    }\n    /**\n     * 处理采集错误\n     */\n    handleCaptureError(session, errorMessage) {\n        this._capturing = false;\n        this._currentCaptureId = null;\n        console.error('Saleae采集错误:', errorMessage);\n        const eventArgs = {\n            success: false,\n            session\n        };\n        this.emitCaptureCompleted(eventArgs);\n    }\n    /**\n     * 发送命令到Saleae Logic API\n     */\n    async sendCommand(command) {\n        return new Promise((resolve, reject) => {\n            if (!this._socket) {\n                reject(new Error('Socket未连接'));\n                return;\n            }\n            const commandStr = JSON.stringify(command) + '\\n';\n            // 设置响应处理器\n            const responseHandler = (data) => {\n                try {\n                    const response = JSON.parse(data.toString());\n                    this._socket.off('data', responseHandler);\n                    if (response.success === false) {\n                        reject(new Error(response.error_message || '命令执行失败'));\n                    }\n                    else {\n                        resolve(response);\n                    }\n                }\n                catch (error) {\n                    reject(new Error(`解析响应失败: ${error}`));\n                }\n            };\n            this._socket.once('data', responseHandler);\n            // 发送命令\n            this._socket.write(commandStr, error => {\n                if (error) {\n                    reject(new Error(`发送命令失败: ${error.message}`));\n                }\n            });\n            // 设置超时\n            setTimeout(() => {\n                this._socket.off('data', responseHandler);\n                reject(new Error('命令执行超时'));\n            }, 10000);\n        });\n    }\n    /**\n     * 构建硬件能力描述\n     */\n    buildCapabilities() {\n        return {\n            channels: {\n                digital: this._channelCount,\n                maxVoltage: 5.0,\n                inputImpedance: 1000000\n            },\n            sampling: {\n                maxRate: this._maxFrequency,\n                minRate: this.minFrequency,\n                supportedRates: [this._maxFrequency, this._blastFrequency],\n                bufferSize: this._bufferSize,\n                streamingSupport: true\n            },\n            triggers: {\n                types: [0, 1],\n                maxChannels: this._channelCount,\n                patternWidth: this._channelCount,\n                sequentialSupport: true,\n                conditions: ['rising', 'falling', 'high', 'low', 'change']\n            },\n            connectivity: {\n                interfaces: ['usb'],\n                protocols: ['saleae_api']\n            },\n            features: {\n                signalGeneration: false,\n                powerSupply: false,\n                voltageMonitoring: false\n            }\n        };\n    }\n    /**\n     * 资源清理\n     */\n    dispose() {\n        this.disconnect();\n        super.dispose();\n    }\n}\nexports.SaleaeLogicDriver = SaleaeLogicDriver;\n// Saleae Logic 2 默认端口\nSaleaeLogicDriver.DEFAULT_PORT = 10429;\nSaleaeLogicDriver.DEFAULT_HOST = 'localhost';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/drivers/SaleaeLogicDriver.ts\n\n}");

/***/ }),

/***/ "./src/drivers/SigrokAdapter.ts":
/*!**************************************!*\
  !*** ./src/drivers/SigrokAdapter.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SigrokAdapter = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst os_1 = __webpack_require__(/*! os */ \"os\");\nconst AnalyzerDriverBase_1 = __webpack_require__(/*! ./AnalyzerDriverBase */ \"./src/drivers/AnalyzerDriverBase.ts\");\nconst AnalyzerTypes_1 = __webpack_require__(/*! ../models/AnalyzerTypes */ \"./src/models/AnalyzerTypes.ts\");\n/**\n * sigrok通用驱动适配器\n * 通过sigrok-cli命令行工具支持80+种硬件设备\n * 包括：fx2lafw, hantek-dso, rigol-ds, saleae-logic16, openbench-logic-sniffer等\n */\nclass SigrokAdapter extends AnalyzerDriverBase_1.AnalyzerDriverBase {\n    // 属性实现\n    get deviceVersion() {\n        return this._version;\n    }\n    get channelCount() {\n        return this._channelCount;\n    }\n    get maxFrequency() {\n        return this._maxFrequency;\n    }\n    get blastFrequency() {\n        return this._blastFrequency;\n    }\n    get bufferSize() {\n        return this._bufferSize;\n    }\n    get isNetwork() {\n        return false; // sigrok主要通过USB等本地接口\n    }\n    get isCapturing() {\n        return this._capturing;\n    }\n    get driverType() {\n        return AnalyzerTypes_1.AnalyzerDriverType.Serial; // 通过本地接口\n    }\n    constructor(deviceDriver = 'fx2lafw', deviceId, sigrokCliPath) {\n        super();\n        // 私有变量\n        this._capturing = false;\n        this._version = null;\n        this._channelCount = 8;\n        this._maxFrequency = 24000000; // 24MHz默认\n        this._blastFrequency = 100000000; // 100MHz默认\n        this._bufferSize = 2000000; // 2M样本默认\n        this._isConnected = false;\n        this._deviceDriver = '';\n        this._deviceId = '';\n        this._sigrokCliPath = 'sigrok-cli';\n        this._tempDir = '';\n        this._currentProcess = null;\n        this._deviceDriver = deviceDriver;\n        this._deviceId = deviceId || '';\n        this._sigrokCliPath = sigrokCliPath || 'sigrok-cli';\n        this._tempDir = (0, path_1.join)((0, os_1.tmpdir)(), `sigrok-${Date.now()}`);\n    }\n    /**\n     * 连接设备\n     */\n    async connect(params) {\n        try {\n            // 检查sigrok-cli是否可用\n            await this.checkSigrokCli();\n            // 扫描设备\n            const devices = await this.scanDevices();\n            if (devices.length === 0) {\n                throw new Error('未发现支持的sigrok设备');\n            }\n            // 选择设备\n            const selectedDevice = this.selectBestDevice(devices);\n            this._deviceId = selectedDevice.id;\n            this._deviceDriver = selectedDevice.driver;\n            // 查询设备信息\n            await this.queryDeviceInfo();\n            // 创建临时目录\n            await fs_1.promises.mkdir(this._tempDir, { recursive: true });\n            this._isConnected = true;\n            return {\n                success: true,\n                deviceInfo: {\n                    name: this._version || `Sigrok ${this._deviceDriver}`,\n                    version: this._version ?? undefined,\n                    type: this.driverType,\n                    connectionPath: `${this._deviceDriver}:${this._deviceId}`,\n                    isNetwork: false,\n                    capabilities: this.buildCapabilities()\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : '连接失败'\n            };\n        }\n    }\n    /**\n     * 断开连接\n     */\n    async disconnect() {\n        this._isConnected = false;\n        // 停止当前进程\n        if (this._currentProcess) {\n            this._currentProcess.kill('SIGTERM');\n            this._currentProcess = null;\n        }\n        // 清理临时目录\n        try {\n            await fs_1.promises.rm(this._tempDir, { recursive: true, force: true });\n        }\n        catch (error) {\n            console.warn('清理临时目录失败:', error);\n        }\n    }\n    /**\n     * 获取设备状态\n     */\n    async getStatus() {\n        return {\n            isConnected: this._isConnected,\n            isCapturing: this._capturing,\n            batteryVoltage: 'N/A' // sigrok设备通常不报告电池状态\n        };\n    }\n    /**\n     * 开始采集\n     */\n    async startCapture(session, captureCompletedHandler) {\n        if (this._capturing) {\n            return AnalyzerTypes_1.CaptureError.Busy;\n        }\n        if (!this._isConnected) {\n            return AnalyzerTypes_1.CaptureError.HardwareError;\n        }\n        try {\n            this._capturing = true;\n            // 设置捕获完成处理器\n            if (captureCompletedHandler) {\n                this.once('captureCompleted', captureCompletedHandler);\n            }\n            // 启动sigrok采集\n            await this.startSigrokCapture(session);\n            return AnalyzerTypes_1.CaptureError.None;\n        }\n        catch (error) {\n            this._capturing = false;\n            console.error('sigrok采集启动失败:', error);\n            return AnalyzerTypes_1.CaptureError.UnexpectedError;\n        }\n    }\n    /**\n     * 停止采集\n     */\n    async stopCapture() {\n        if (!this._capturing) {\n            return true;\n        }\n        try {\n            if (this._currentProcess) {\n                this._currentProcess.kill('SIGTERM');\n                this._currentProcess = null;\n            }\n            this._capturing = false;\n            return true;\n        }\n        catch (error) {\n            console.error('停止sigrok采集失败:', error);\n            return false;\n        }\n    }\n    /**\n     * 进入引导加载程序模式（不支持）\n     */\n    async enterBootloader() {\n        return false; // sigrok设备通常不支持引导加载程序模式\n    }\n    /**\n     * 检查sigrok-cli是否可用\n     */\n    async checkSigrokCli() {\n        return new Promise((resolve, reject) => {\n            const process = (0, child_process_1.spawn)(this._sigrokCliPath, ['--version']);\n            let output = '';\n            process.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n            process.on('close', (code) => {\n                if (code === 0) {\n                    console.log('sigrok-cli版本:', output.trim());\n                    resolve();\n                }\n                else {\n                    reject(new Error('sigrok-cli未安装或不可用。请安装sigrok软件包。'));\n                }\n            });\n            process.on('error', (error) => {\n                reject(new Error(`sigrok-cli执行失败: ${error.message}`));\n            });\n        });\n    }\n    /**\n     * 扫描sigrok设备\n     */\n    async scanDevices() {\n        return new Promise((resolve, reject) => {\n            const process = (0, child_process_1.spawn)(this._sigrokCliPath, ['--scan']);\n            let output = '';\n            process.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n            process.on('close', (code) => {\n                if (code === 0) {\n                    const devices = this.parseScanOutput(output);\n                    resolve(devices);\n                }\n                else {\n                    reject(new Error('设备扫描失败'));\n                }\n            });\n            process.on('error', (error) => {\n                reject(new Error(`设备扫描执行失败: ${error.message}`));\n            });\n        });\n    }\n    /**\n     * 解析扫描输出\n     */\n    parseScanOutput(output) {\n        const devices = [];\n        const lines = output.split('\\\\n');\n        for (const line of lines) {\n            const trimmed = line.trim();\n            if (!trimmed || trimmed.startsWith('The following'))\n                continue;\n            // 解析格式: \"driver:conn=value - Description\"\n            const match = trimmed.match(/^([^:]+):([^-]+)\\\\s*-\\\\s*(.+)$/);\n            if (match) {\n                const driver = match[1].trim();\n                const connection = match[2].trim();\n                const description = match[3].trim();\n                devices.push({\n                    id: connection,\n                    driver: driver,\n                    description: description\n                });\n            }\n        }\n        return devices;\n    }\n    /**\n     * 选择最佳设备\n     */\n    selectBestDevice(devices) {\n        // 如果指定了设备驱动，优先选择\n        if (this._deviceDriver) {\n            const matchingDevice = devices.find(d => d.driver === this._deviceDriver);\n            if (matchingDevice) {\n                return matchingDevice;\n            }\n        }\n        // 如果指定了设备ID，优先选择\n        if (this._deviceId) {\n            const matchingDevice = devices.find(d => d.id.includes(this._deviceId));\n            if (matchingDevice) {\n                return matchingDevice;\n            }\n        }\n        // 否则选择第一个可用设备\n        return devices[0];\n    }\n    /**\n     * 查询设备信息\n     */\n    async queryDeviceInfo() {\n        try {\n            // 查询设备配置信息\n            const configOutput = await this.runSigrokCommand([\n                '--driver', this._deviceDriver,\n                '--conn', this._deviceId,\n                '--show'\n            ]);\n            this.parseDeviceConfig(configOutput);\n            // 设置设备版本信息\n            const driverInfo = SigrokAdapter.SIGROK_DRIVERS.get(this._deviceDriver);\n            if (driverInfo) {\n                this._version = driverInfo.name;\n                this._channelCount = driverInfo.channels;\n                this._maxFrequency = driverInfo.maxRate;\n                this._blastFrequency = driverInfo.maxRate * 2;\n            }\n        }\n        catch (error) {\n            console.warn('查询设备信息失败:', error);\n        }\n    }\n    /**\n     * 解析设备配置\n     */\n    parseDeviceConfig(output) {\n        const lines = output.split('\\\\n');\n        for (const line of lines) {\n            const trimmed = line.trim();\n            // 解析通道数\n            if (trimmed.includes('channels:')) {\n                const channelMatch = trimmed.match(/channels:\\\\s*(\\\\d+)/);\n                if (channelMatch) {\n                    this._channelCount = parseInt(channelMatch[1], 10);\n                }\n            }\n            // 解析采样率\n            if (trimmed.includes('samplerate:')) {\n                const rateMatch = trimmed.match(/samplerate:\\\\s*([0-9.]+)\\\\s*([kMG]?Hz)/);\n                if (rateMatch) {\n                    let rate = parseFloat(rateMatch[1]);\n                    const unit = rateMatch[2];\n                    switch (unit) {\n                        case 'kHz':\n                            rate *= 1000;\n                            break;\n                        case 'MHz':\n                            rate *= 1000000;\n                            break;\n                        case 'GHz':\n                            rate *= 1000000000;\n                            break;\n                    }\n                    this._maxFrequency = rate;\n                    this._blastFrequency = rate;\n                }\n            }\n            // 解析缓冲区大小\n            if (trimmed.includes('limit_samples:')) {\n                const sampleMatch = trimmed.match(/limit_samples:\\\\s*(\\\\d+)/);\n                if (sampleMatch) {\n                    this._bufferSize = parseInt(sampleMatch[1], 10);\n                }\n            }\n        }\n    }\n    /**\n     * 启动sigrok采集\n     */\n    async startSigrokCapture(session) {\n        const outputFile = (0, path_1.join)(this._tempDir, 'capture.sr');\n        const totalSamples = session.preTriggerSamples + session.postTriggerSamples;\n        // 构建sigrok-cli命令参数\n        const args = [\n            '--driver', this._deviceDriver,\n            '--conn', this._deviceId,\n            '--config', `samplerate=${session.frequency}`,\n            '--samples', totalSamples.toString(),\n            '--output-file', outputFile,\n            '--output-format', 'srzip'\n        ];\n        // 配置通道\n        const channels = session.captureChannels.map(ch => ch.channelNumber).join(',');\n        if (channels) {\n            args.push('--channels', channels);\n        }\n        // 配置触发\n        if (session.triggerType !== undefined && session.triggerChannel !== undefined) {\n            const triggerConfig = this.buildTriggerConfig(session);\n            if (triggerConfig) {\n                args.push('--triggers', triggerConfig);\n            }\n        }\n        console.log('启动sigrok采集:', this._sigrokCliPath, args.join(' '));\n        return new Promise((resolve, reject) => {\n            this._currentProcess = (0, child_process_1.spawn)(this._sigrokCliPath, args);\n            let errorOutput = '';\n            this._currentProcess.stdout?.on('data', (data) => {\n                console.log('sigrok输出:', data.toString());\n            });\n            this._currentProcess.stderr?.on('data', (data) => {\n                errorOutput += data.toString();\n            });\n            this._currentProcess.on('close', async (code) => {\n                this._currentProcess = null;\n                if (code === 0) {\n                    try {\n                        // 读取采集结果\n                        await this.processSigrokResults(session, outputFile);\n                        resolve();\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                }\n                else {\n                    reject(new Error(`sigrok采集失败 (代码 ${code}): ${errorOutput}`));\n                }\n            });\n            this._currentProcess.on('error', (error) => {\n                this._currentProcess = null;\n                reject(new Error(`sigrok采集进程错误: ${error.message}`));\n            });\n        });\n    }\n    /**\n     * 构建触发配置\n     */\n    buildTriggerConfig(session) {\n        if (session.triggerChannel === undefined)\n            return null;\n        const channel = session.triggerChannel;\n        let trigger = '';\n        switch (session.triggerType) {\n            case 0: // Edge\n                trigger = session.triggerInverted ? `${channel}=f` : `${channel}=r`;\n                break;\n            case 1: // Complex/Pattern\n                if (session.triggerPattern !== undefined) {\n                    // 将模式转换为sigrok格式\n                    const pattern = session.triggerPattern.toString(2).padStart(16, '0');\n                    trigger = pattern.split('').map((bit, index) => bit === '1' ? `${index}=1` : bit === '0' ? `${index}=0` : '').filter(t => t).join(',');\n                }\n                break;\n            default:\n                trigger = `${channel}=r`; // 默认上升沿\n        }\n        return trigger;\n    }\n    /**\n     * 处理sigrok采集结果\n     */\n    async processSigrokResults(session, outputFile) {\n        try {\n            // 将.sr文件转换为CSV格式以便解析\n            const csvFile = (0, path_1.join)(this._tempDir, 'capture.csv');\n            await this.convertSrToCSV(outputFile, csvFile);\n            // 读取CSV数据\n            const csvData = await fs_1.promises.readFile(csvFile, 'utf-8');\n            const lines = csvData.split('\\\\n');\n            if (lines.length < 2) {\n                throw new Error('采集数据为空');\n            }\n            // 解析CSV头部（通道名称）\n            const headers = lines[0].split(',').map(h => h.trim());\n            const dataLines = lines.slice(1).filter(line => line.trim());\n            // 初始化通道数据\n            for (const channel of session.captureChannels) {\n                channel.samples = new Uint8Array(dataLines.length);\n            }\n            // 解析数据行\n            for (let rowIndex = 0; rowIndex < dataLines.length; rowIndex++) {\n                const values = dataLines[rowIndex].split(',');\n                for (const channel of session.captureChannels) {\n                    const channelName = `D${channel.channelNumber}`;\n                    const columnIndex = headers.indexOf(channelName);\n                    if (columnIndex >= 0 && columnIndex < values.length) {\n                        const value = values[columnIndex].trim();\n                        channel.samples[rowIndex] = value === '1' ? 1 : 0;\n                    }\n                }\n            }\n            this._capturing = false;\n            const eventArgs = {\n                success: true,\n                session\n            };\n            this.emitCaptureCompleted(eventArgs);\n        }\n        catch (error) {\n            this.handleCaptureError(session, `处理sigrok结果失败: ${error}`);\n        }\n    }\n    /**\n     * 将.sr文件转换为CSV格式\n     */\n    async convertSrToCSV(srFile, csvFile) {\n        return new Promise((resolve, reject) => {\n            const process = (0, child_process_1.spawn)(this._sigrokCliPath, [\n                '--input-file', srFile,\n                '--output-file', csvFile,\n                '--output-format', 'csv'\n            ]);\n            process.on('close', (code) => {\n                if (code === 0) {\n                    resolve();\n                }\n                else {\n                    reject(new Error(`转换为CSV失败 (代码 ${code})`));\n                }\n            });\n            process.on('error', (error) => {\n                reject(new Error(`CSV转换进程错误: ${error.message}`));\n            });\n        });\n    }\n    /**\n     * 处理采集错误\n     */\n    handleCaptureError(session, errorMessage) {\n        this._capturing = false;\n        console.error('sigrok采集错误:', errorMessage);\n        const eventArgs = {\n            success: false,\n            session\n        };\n        this.emitCaptureCompleted(eventArgs);\n    }\n    /**\n     * 运行sigrok命令\n     */\n    async runSigrokCommand(args) {\n        return new Promise((resolve, reject) => {\n            const process = (0, child_process_1.spawn)(this._sigrokCliPath, args);\n            let output = '';\n            let errorOutput = '';\n            process.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n            process.stderr.on('data', (data) => {\n                errorOutput += data.toString();\n            });\n            process.on('close', (code) => {\n                if (code === 0) {\n                    resolve(output);\n                }\n                else {\n                    reject(new Error(`sigrok命令失败 (代码 ${code}): ${errorOutput}`));\n                }\n            });\n            process.on('error', (error) => {\n                reject(new Error(`sigrok命令执行错误: ${error.message}`));\n            });\n        });\n    }\n    /**\n     * 构建硬件能力描述\n     */\n    buildCapabilities() {\n        return {\n            channels: {\n                digital: this._channelCount,\n                maxVoltage: 5.0,\n                inputImpedance: 1000000\n            },\n            sampling: {\n                maxRate: this._maxFrequency,\n                minRate: this.minFrequency,\n                supportedRates: [this._maxFrequency, this._blastFrequency],\n                bufferSize: this._bufferSize,\n                streamingSupport: false\n            },\n            triggers: {\n                types: [0, 1],\n                maxChannels: this._channelCount,\n                patternWidth: this._channelCount,\n                sequentialSupport: false,\n                conditions: ['rising', 'falling', 'high', 'low', 'change']\n            },\n            connectivity: {\n                interfaces: ['usb', 'serial'],\n                protocols: ['sigrok']\n            },\n            features: {\n                signalGeneration: false,\n                powerSupply: false,\n                voltageMonitoring: false,\n                protocolDecoding: true // sigrok有强大的协议解码功能\n            }\n        };\n    }\n    /**\n     * 获取支持的设备列表\n     */\n    static getSupportedDevices() {\n        return Array.from(SigrokAdapter.SIGROK_DRIVERS.entries()).map(([driver, info]) => ({\n            driver,\n            name: info.name,\n            channels: info.channels,\n            maxRate: info.maxRate\n        }));\n    }\n    /**\n     * 资源清理\n     */\n    dispose() {\n        this.disconnect();\n        super.dispose();\n    }\n}\nexports.SigrokAdapter = SigrokAdapter;\n// sigrok支持的设备类型映射\nSigrokAdapter.SIGROK_DRIVERS = new Map([\n    // USB逻辑分析器\n    ['fx2lafw', { name: 'FX2 Logic Analyzer', channels: 16, maxRate: 24000000 }],\n    ['saleae-logic16', { name: 'Saleae Logic16', channels: 16, maxRate: 100000000 }],\n    ['openbench-logic-sniffer', { name: 'OpenBench Logic Sniffer', channels: 32, maxRate: 200000000 }],\n    ['kingst-la2016', { name: 'Kingst LA2016', channels: 16, maxRate: 200000000 }],\n    ['hantek-6022be', { name: 'Hantek 6022BE', channels: 2, maxRate: 48000000 }],\n    // 示波器的逻辑分析功能\n    ['rigol-ds', { name: 'Rigol DS Series', channels: 16, maxRate: 1000000000 }],\n    ['siglent-sds', { name: 'Siglent SDS Series', channels: 16, maxRate: 1000000000 }],\n    ['tek-mso', { name: 'Tektronix MSO Series', channels: 16, maxRate: 2500000000 }],\n    ['lecroy-logicstudio', { name: 'LeCroy LogicStudio', channels: 16, maxRate: 500000000 }],\n    // 其他专业设备\n    ['chronovu-la', { name: 'ChronoVu LA Series', channels: 32, maxRate: 200000000 }],\n    ['ikalogic-scanalogic2', { name: 'Ikalogic Scanalogic-2', channels: 4, maxRate: 20000000 }],\n    ['link-mso19', { name: 'Link MSO-19', channels: 16, maxRate: 200000000 }],\n    ['zeroplus-logic-cube', { name: 'Zeroplus Logic Cube', channels: 16, maxRate: 200000000 }]\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVMsRUFBRSxDQUFDO0lBQ2pGLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDM0YsQ0FBQyxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDO0lBQ3pFLENBQUMscUJBQXFCLEVBQUUsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLENBQUM7Q0FDM0YsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnNjb2RlLWxvZ2ljLWFuYWx5emVyLy4vc3JjL2RyaXZlcnMvU2lncm9rQWRhcHRlci50cz8zMmNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwYXduLCBDaGlsZFByb2Nlc3MgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcclxuaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgdG1wZGlyIH0gZnJvbSAnb3MnO1xyXG5pbXBvcnQgeyBBbmFseXplckRyaXZlckJhc2UgfSBmcm9tICcuL0FuYWx5emVyRHJpdmVyQmFzZSc7XHJcbmltcG9ydCB7XHJcbiAgQW5hbHl6ZXJEcml2ZXJUeXBlLFxyXG4gIENhcHR1cmVFcnJvcixcclxuICBDYXB0dXJlU2Vzc2lvbixcclxuICBDYXB0dXJlRXZlbnRBcmdzLFxyXG4gIENhcHR1cmVDb21wbGV0ZWRIYW5kbGVyLFxyXG4gIENvbm5lY3Rpb25QYXJhbXMsXHJcbiAgQ29ubmVjdGlvblJlc3VsdCxcclxuICBEZXZpY2VTdGF0dXMsXHJcbiAgQ2FwdHVyZU1vZGVcclxufSBmcm9tICcuLi9tb2RlbHMvQW5hbHl6ZXJUeXBlcyc7XHJcblxyXG4vKipcclxuICogc2lncm9r6YCa55So6amx5Yqo6YCC6YWN5ZmoXHJcbiAqIOmAmui/h3NpZ3Jvay1jbGnlkb3ku6TooYzlt6XlhbfmlK/mjIE4MCvnp43noazku7borr7lpIdcclxuICog5YyF5ous77yaZngybGFmdywgaGFudGVrLWRzbywgcmlnb2wtZHMsIHNhbGVhZS1sb2dpYzE2LCBvcGVuYmVuY2gtbG9naWMtc25pZmZlcuetiVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNpZ3Jva0FkYXB0ZXIgZXh0ZW5kcyBBbmFseXplckRyaXZlckJhc2Uge1xyXG4gIC8vIHNpZ3Jva+aUr+aMgeeahOiuvuWkh+exu+Wei+aYoOWwhFxyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNJR1JPS19EUklWRVJTID0gbmV3IE1hcChbXHJcbiAgICAvLyBVU0LpgLvovpHliIbmnpDlmahcclxuICAgIFsnZngybGFmdycsIHsgbmFtZTogJ0ZYMiBMb2dpYyBBbmFseXplcicsIGNoYW5uZWxzOiAxNiwgbWF4UmF0ZTogMjQwMDAwMDAgfV0sXHJcbiAgICBbJ3NhbGVhZS1sb2dpYzE2JywgeyBuYW1lOiAnU2FsZWFlIExvZ2ljMTYnLCBjaGFubmVsczogMTYsIG1heFJhdGU6IDEwMDAwMDAwMCB9XSxcclxuICAgIFsnb3BlbmJlbmNoLWxvZ2ljLXNuaWZmZXInLCB7IG5hbWU6ICdPcGVuQmVuY2ggTG9naWMgU25pZmZlcicsIGNoYW5uZWxzOiAzMiwgbWF4UmF0ZTogMjAwMDAwMDAwIH1dLFxyXG4gICAgWydraW5nc3QtbGEyMDE2JywgeyBuYW1lOiAnS2luZ3N0IExBMjAxNicsIGNoYW5uZWxzOiAxNiwgbWF4UmF0ZTogMjAwMDAwMDAwIH1dLFxyXG4gICAgWydoYW50ZWstNjAyMmJlJywgeyBuYW1lOiAnSGFudGVrIDYwMjJCRScsIGNoYW5uZWxzOiAyLCBtYXhSYXRlOiA0ODAwMDAwMCB9XSxcclxuICAgIFxyXG4gICAgLy8g56S65rOi5Zmo55qE6YC76L6R5YiG5p6Q5Yqf6IO9XHJcbiAgICBbJ3JpZ29sLWRzJywgeyBuYW1lOiAnUmlnb2wgRFMgU2VyaWVzJywgY2hhbm5lbHM6IDE2LCBtYXhSYXRlOiAxMDAwMDAwMDAwIH1dLFxyXG4gICAgWydzaWdsZW50LXNkcycsIHsgbmFtZTogJ1NpZ2xlbnQgU0RTIFNlcmllcycsIGNoYW5uZWxzOiAxNiwgbWF4UmF0ZTogMTAwMDAwMDAwMCB9XSxcclxuICAgIFsndGVrLW1zbycsIHsgbmFtZTogJ1Rla3Ryb25peCBNU08gU2VyaWVzJywgY2hhbm5lbHM6IDE2LCBtYXhSYXRlOiAyNTAwMDAwMDAwIH1dLFxyXG4gICAgWydsZWNyb3ktbG9naWNzdHVkaW8nLCB7IG5hbWU6ICdMZUNyb3kgTG9naWNTdHVkaW8nLCBjaGFubmVsczogMTYsIG1heFJhdGU6IDUwMDAwMDAwMCB9XSxcclxuICAgIFxyXG4gICAgLy8g5YW25LuW5LiT5Lia6K6+5aSHXHJcbiAgICBbJ2Nocm9ub3Z1LWxhJywgeyBuYW1lOiAnQ2hyb25vVnUgTEEgU2VyaWVzJywgY2hhbm5lbHM6IDMyLCBtYXhSYXRlOiAyMDAwMDAwMDAgfV0sXHJcbiAgICBbJ2lrYWxvZ2ljLXNjYW5hbG9naWMyJywgeyBuYW1lOiAnSWthbG9naWMgU2NhbmFsb2dpYy0yJywgY2hhbm5lbHM6IDQsIG1heFJhdGU6IDIwMDAwMDAwIH1dLFxyXG4gICAgWydsaW5rLW1zbzE5JywgeyBuYW1lOiAnTGluayBNU08tMTknLCBjaGFubmVsczogMTYsIG1heFJhdGU6IDIwMDAwMDAwMCB9XSxcclxuICAgIFsnemVyb3BsdXMtbG9naWMtY3ViZScsIHsgbmFtZTogJ1plcm9wbHVzIExvZ2ljIEN1YmUnLCBjaGFubmVsczogMTYsIG1heFJhdGU6IDIwMDAwMDAwMCB9XVxyXG4gIF0pO1xyXG5cclxuICAvLyDlsZ7mgKflrp7njrBcclxuICBnZXQgZGV2aWNlVmVyc2lvbigpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xyXG4gIH1cclxuICBnZXQgY2hhbm5lbENvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fY2hhbm5lbENvdW50O1xyXG4gIH1cclxuICBnZXQgbWF4RnJlcXVlbmN5KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWF4RnJlcXVlbmN5O1xyXG4gIH1cclxuICBnZXQgYmxhc3RGcmVxdWVuY3koKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9ibGFzdEZyZXF1ZW5jeTtcclxuICB9XHJcbiAgZ2V0IGJ1ZmZlclNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9idWZmZXJTaXplO1xyXG4gIH1cclxuICBnZXQgaXNOZXR3b3JrKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBzaWdyb2vkuLvopoHpgJrov4dVU0LnrYnmnKzlnLDmjqXlj6NcclxuICB9XHJcbiAgZ2V0IGlzQ2FwdHVyaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NhcHR1cmluZztcclxuICB9XHJcbiAgZ2V0IGRyaXZlclR5cGUoKTogQW5hbHl6ZXJEcml2ZXJUeXBlIHtcclxuICAgIHJldHVybiBBbmFseXplckRyaXZlclR5cGUuU2VyaWFsOyAvLyDpgJrov4fmnKzlnLDmjqXlj6NcclxuICB9XHJcblxyXG4gIC8vIOengeacieWPmOmHj1xyXG4gIHByaXZhdGUgX2NhcHR1cmluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByaXZhdGUgX3ZlcnNpb246IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgX2NoYW5uZWxDb3VudDogbnVtYmVyID0gODtcclxuICBwcml2YXRlIF9tYXhGcmVxdWVuY3k6IG51bWJlciA9IDI0MDAwMDAwOyAvLyAyNE1Ieum7mOiupFxyXG4gIHByaXZhdGUgX2JsYXN0RnJlcXVlbmN5OiBudW1iZXIgPSAxMDAwMDAwMDA7IC8vIDEwME1Ieum7mOiupFxyXG4gIHByaXZhdGUgX2J1ZmZlclNpemU6IG51bWJlciA9IDIwMDAwMDA7IC8vIDJN5qC35pys6buY6K6kXHJcbiAgcHJpdmF0ZSBfaXNDb25uZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBwcml2YXRlIF9kZXZpY2VEcml2ZXI6IHN0cmluZyA9ICcnO1xyXG4gIHByaXZhdGUgX2RldmljZUlkOiBzdHJpbmcgPSAnJztcclxuICBwcml2YXRlIF9zaWdyb2tDbGlQYXRoOiBzdHJpbmcgPSAnc2lncm9rLWNsaSc7XHJcbiAgcHJpdmF0ZSBfdGVtcERpcjogc3RyaW5nID0gJyc7XHJcbiAgcHJpdmF0ZSBfY3VycmVudFByb2Nlc3M6IENoaWxkUHJvY2VzcyB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRldmljZURyaXZlcjogc3RyaW5nID0gJ2Z4MmxhZncnLFxyXG4gICAgZGV2aWNlSWQ/OiBzdHJpbmcsXHJcbiAgICBzaWdyb2tDbGlQYXRoPzogc3RyaW5nXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuX2RldmljZURyaXZlciA9IGRldmljZURyaXZlcjtcclxuICAgIHRoaXMuX2RldmljZUlkID0gZGV2aWNlSWQgfHwgJyc7XHJcbiAgICB0aGlzLl9zaWdyb2tDbGlQYXRoID0gc2lncm9rQ2xpUGF0aCB8fCAnc2lncm9rLWNsaSc7XHJcbiAgICB0aGlzLl90ZW1wRGlyID0gam9pbih0bXBkaXIoKSwgYHNpZ3Jvay0ke0RhdGUubm93KCl9YCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov57mjqXorr7lpIdcclxuICAgKi9cclxuICBhc3luYyBjb25uZWN0KHBhcmFtcz86IENvbm5lY3Rpb25QYXJhbXMpOiBQcm9taXNlPENvbm5lY3Rpb25SZXN1bHQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOajgOafpXNpZ3Jvay1jbGnmmK/lkKblj6/nlKhcclxuICAgICAgYXdhaXQgdGhpcy5jaGVja1NpZ3Jva0NsaSgpO1xyXG5cclxuICAgICAgLy8g5omr5o+P6K6+5aSHXHJcbiAgICAgIGNvbnN0IGRldmljZXMgPSBhd2FpdCB0aGlzLnNjYW5EZXZpY2VzKCk7XHJcbiAgICAgIGlmIChkZXZpY2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcign5pyq5Y+R546w5pSv5oyB55qEc2lncm9r6K6+5aSHJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOmAieaLqeiuvuWkh1xyXG4gICAgICBjb25zdCBzZWxlY3RlZERldmljZSA9IHRoaXMuc2VsZWN0QmVzdERldmljZShkZXZpY2VzKTtcclxuICAgICAgdGhpcy5fZGV2aWNlSWQgPSBzZWxlY3RlZERldmljZS5pZDtcclxuICAgICAgdGhpcy5fZGV2aWNlRHJpdmVyID0gc2VsZWN0ZWREZXZpY2UuZHJpdmVyO1xyXG5cclxuICAgICAgLy8g5p+l6K+i6K6+5aSH5L+h5oGvXHJcbiAgICAgIGF3YWl0IHRoaXMucXVlcnlEZXZpY2VJbmZvKCk7XHJcblxyXG4gICAgICAvLyDliJvlu7rkuLTml7bnm67lvZVcclxuICAgICAgYXdhaXQgZnMubWtkaXIodGhpcy5fdGVtcERpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcblxyXG4gICAgICB0aGlzLl9pc0Nvbm5lY3RlZCA9IHRydWU7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgZGV2aWNlSW5mbzoge1xyXG4gICAgICAgICAgbmFtZTogdGhpcy5fdmVyc2lvbiB8fCBgU2lncm9rICR7dGhpcy5fZGV2aWNlRHJpdmVyfWAsXHJcbiAgICAgICAgICB2ZXJzaW9uOiB0aGlzLl92ZXJzaW9uID8/IHVuZGVmaW5lZCxcclxuICAgICAgICAgIHR5cGU6IHRoaXMuZHJpdmVyVHlwZSxcclxuICAgICAgICAgIGNvbm5lY3Rpb25QYXRoOiBgJHt0aGlzLl9kZXZpY2VEcml2ZXJ9OiR7dGhpcy5fZGV2aWNlSWR9YCxcclxuICAgICAgICAgIGlzTmV0d29yazogZmFsc2UsXHJcbiAgICAgICAgICBjYXBhYmlsaXRpZXM6IHRoaXMuYnVpbGRDYXBhYmlsaXRpZXMoKVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ+i/nuaOpeWksei0pSdcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWreW8gOi/nuaOpVxyXG4gICAqL1xyXG4gIGFzeW5jIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLl9pc0Nvbm5lY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIOWBnOatouW9k+WJjei/m+eoi1xyXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRQcm9jZXNzKSB7XHJcbiAgICAgIHRoaXMuX2N1cnJlbnRQcm9jZXNzLmtpbGwoJ1NJR1RFUk0nKTtcclxuICAgICAgdGhpcy5fY3VycmVudFByb2Nlc3MgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOa4heeQhuS4tOaXtuebruW9lVxyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZnMucm0odGhpcy5fdGVtcERpciwgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCfmuIXnkIbkuLTml7bnm67lvZXlpLHotKU6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W6K6+5aSH54q25oCBXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0U3RhdHVzKCk6IFByb21pc2U8RGV2aWNlU3RhdHVzPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpc0Nvbm5lY3RlZDogdGhpcy5faXNDb25uZWN0ZWQsXHJcbiAgICAgIGlzQ2FwdHVyaW5nOiB0aGlzLl9jYXB0dXJpbmcsXHJcbiAgICAgIGJhdHRlcnlWb2x0YWdlOiAnTi9BJyAvLyBzaWdyb2vorr7lpIfpgJrluLjkuI3miqXlkYrnlLXmsaDnirbmgIFcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvIDlp4vph4fpm4ZcclxuICAgKi9cclxuICBhc3luYyBzdGFydENhcHR1cmUoXHJcbiAgICBzZXNzaW9uOiBDYXB0dXJlU2Vzc2lvbixcclxuICAgIGNhcHR1cmVDb21wbGV0ZWRIYW5kbGVyPzogQ2FwdHVyZUNvbXBsZXRlZEhhbmRsZXJcclxuICApOiBQcm9taXNlPENhcHR1cmVFcnJvcj4ge1xyXG4gICAgaWYgKHRoaXMuX2NhcHR1cmluZykge1xyXG4gICAgICByZXR1cm4gQ2FwdHVyZUVycm9yLkJ1c3k7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLl9pc0Nvbm5lY3RlZCkge1xyXG4gICAgICByZXR1cm4gQ2FwdHVyZUVycm9yLkhhcmR3YXJlRXJyb3I7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5fY2FwdHVyaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgIC8vIOiuvue9ruaNleiOt+WujOaIkOWkhOeQhuWZqFxyXG4gICAgICBpZiAoY2FwdHVyZUNvbXBsZXRlZEhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLm9uY2UoJ2NhcHR1cmVDb21wbGV0ZWQnLCBjYXB0dXJlQ29tcGxldGVkSGFuZGxlcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOWQr+WKqHNpZ3Jva+mHh+mbhlxyXG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0U2lncm9rQ2FwdHVyZShzZXNzaW9uKTtcclxuXHJcbiAgICAgIHJldHVybiBDYXB0dXJlRXJyb3IuTm9uZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMuX2NhcHR1cmluZyA9IGZhbHNlO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdzaWdyb2vph4fpm4blkK/liqjlpLHotKU6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gQ2FwdHVyZUVycm9yLlVuZXhwZWN0ZWRFcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWBnOatoumHh+mbhlxyXG4gICAqL1xyXG4gIGFzeW5jIHN0b3BDYXB0dXJlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgaWYgKCF0aGlzLl9jYXB0dXJpbmcpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRQcm9jZXNzKSB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudFByb2Nlc3Mua2lsbCgnU0lHVEVSTScpO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRQcm9jZXNzID0gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fY2FwdHVyaW5nID0gZmFsc2U7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign5YGc5q2ic2lncm9r6YeH6ZuG5aSx6LSlOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L+b5YWl5byV5a+85Yqg6L2956iL5bqP5qih5byP77yI5LiN5pSv5oyB77yJXHJcbiAgICovXHJcbiAgYXN5bmMgZW50ZXJCb290bG9hZGVyKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBzaWdyb2vorr7lpIfpgJrluLjkuI3mlK/mjIHlvJXlr7zliqDovb3nqIvluo/mqKHlvI9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOajgOafpXNpZ3Jvay1jbGnmmK/lkKblj6/nlKhcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIGNoZWNrU2lncm9rQ2xpKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcHJvY2VzcyA9IHNwYXduKHRoaXMuX3NpZ3Jva0NsaVBhdGgsIFsnLS12ZXJzaW9uJ10pO1xyXG5cclxuICAgICAgbGV0IG91dHB1dCA9ICcnO1xyXG4gICAgICBwcm9jZXNzLnN0ZG91dC5vbignZGF0YScsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgb3V0cHV0ICs9IGRhdGEudG9TdHJpbmcoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBwcm9jZXNzLm9uKCdjbG9zZScsIChjb2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdzaWdyb2stY2xp54mI5pysOicsIG91dHB1dC50cmltKCkpO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdzaWdyb2stY2xp5pyq5a6J6KOF5oiW5LiN5Y+v55So44CC6K+35a6J6KOFc2lncm9r6L2v5Lu25YyF44CCJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBwcm9jZXNzLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYHNpZ3Jvay1jbGnmiafooYzlpLHotKU6ICR7ZXJyb3IubWVzc2FnZX1gKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmiavmj49zaWdyb2vorr7lpIdcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIHNjYW5EZXZpY2VzKCk6IFByb21pc2U8QXJyYXk8eyBpZDogc3RyaW5nOyBkcml2ZXI6IHN0cmluZzsgZGVzY3JpcHRpb246IHN0cmluZyB9Pj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcHJvY2VzcyA9IHNwYXduKHRoaXMuX3NpZ3Jva0NsaVBhdGgsIFsnLS1zY2FuJ10pO1xyXG5cclxuICAgICAgbGV0IG91dHB1dCA9ICcnO1xyXG4gICAgICBwcm9jZXNzLnN0ZG91dC5vbignZGF0YScsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgb3V0cHV0ICs9IGRhdGEudG9TdHJpbmcoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBwcm9jZXNzLm9uKCdjbG9zZScsIChjb2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHtcclxuICAgICAgICAgIGNvbnN0IGRldmljZXMgPSB0aGlzLnBhcnNlU2Nhbk91dHB1dChvdXRwdXQpO1xyXG4gICAgICAgICAgcmVzb2x2ZShkZXZpY2VzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcign6K6+5aSH5omr5o+P5aSx6LSlJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBwcm9jZXNzLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYOiuvuWkh+aJq+aPj+aJp+ihjOWksei0pTogJHtlcnJvci5tZXNzYWdlfWApKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOino+aekOaJq+aPj+i+k+WHulxyXG4gICAqL1xyXG4gIHByaXZhdGUgcGFyc2VTY2FuT3V0cHV0KG91dHB1dDogc3RyaW5nKTogQXJyYXk8eyBpZDogc3RyaW5nOyBkcml2ZXI6IHN0cmluZzsgZGVzY3JpcHRpb246IHN0cmluZyB9PiB7XHJcbiAgICBjb25zdCBkZXZpY2VzOiBBcnJheTx7IGlkOiBzdHJpbmc7IGRyaXZlcjogc3RyaW5nOyBkZXNjcmlwdGlvbjogc3RyaW5nIH0+ID0gW107XHJcbiAgICBjb25zdCBsaW5lcyA9IG91dHB1dC5zcGxpdCgnXFxcXG4nKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgICAgY29uc3QgdHJpbW1lZCA9IGxpbmUudHJpbSgpO1xyXG4gICAgICBpZiAoIXRyaW1tZWQgfHwgdHJpbW1lZC5zdGFydHNXaXRoKCdUaGUgZm9sbG93aW5nJykpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgLy8g6Kej5p6Q5qC85byPOiBcImRyaXZlcjpjb25uPXZhbHVlIC0gRGVzY3JpcHRpb25cIlxyXG4gICAgICBjb25zdCBtYXRjaCA9IHRyaW1tZWQubWF0Y2goL14oW146XSspOihbXi1dKylcXFxccyotXFxcXHMqKC4rKSQvKTtcclxuICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgY29uc3QgZHJpdmVyID0gbWF0Y2hbMV0udHJpbSgpO1xyXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBtYXRjaFsyXS50cmltKCk7XHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBtYXRjaFszXS50cmltKCk7XHJcblxyXG4gICAgICAgIGRldmljZXMucHVzaCh7XHJcbiAgICAgICAgICBpZDogY29ubmVjdGlvbixcclxuICAgICAgICAgIGRyaXZlcjogZHJpdmVyLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGV2aWNlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmAieaLqeacgOS9s+iuvuWkh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc2VsZWN0QmVzdERldmljZShkZXZpY2VzOiBBcnJheTx7IGlkOiBzdHJpbmc7IGRyaXZlcjogc3RyaW5nOyBkZXNjcmlwdGlvbjogc3RyaW5nIH0+KTogeyBpZDogc3RyaW5nOyBkcml2ZXI6IHN0cmluZzsgZGVzY3JpcHRpb246IHN0cmluZyB9IHtcclxuICAgIC8vIOWmguaenOaMh+WumuS6huiuvuWkh+mpseWKqO+8jOS8mOWFiOmAieaLqVxyXG4gICAgaWYgKHRoaXMuX2RldmljZURyaXZlcikge1xyXG4gICAgICBjb25zdCBtYXRjaGluZ0RldmljZSA9IGRldmljZXMuZmluZChkID0+IGQuZHJpdmVyID09PSB0aGlzLl9kZXZpY2VEcml2ZXIpO1xyXG4gICAgICBpZiAobWF0Y2hpbmdEZXZpY2UpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hpbmdEZXZpY2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDlpoLmnpzmjIflrprkuoborr7lpIdJRO+8jOS8mOWFiOmAieaLqVxyXG4gICAgaWYgKHRoaXMuX2RldmljZUlkKSB7XHJcbiAgICAgIGNvbnN0IG1hdGNoaW5nRGV2aWNlID0gZGV2aWNlcy5maW5kKGQgPT4gZC5pZC5pbmNsdWRlcyh0aGlzLl9kZXZpY2VJZCkpO1xyXG4gICAgICBpZiAobWF0Y2hpbmdEZXZpY2UpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hpbmdEZXZpY2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDlkKbliJnpgInmi6nnrKzkuIDkuKrlj6/nlKjorr7lpIdcclxuICAgIHJldHVybiBkZXZpY2VzWzBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p+l6K+i6K6+5aSH5L+h5oGvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBxdWVyeURldmljZUluZm8oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyDmn6Xor6Lorr7lpIfphY3nva7kv6Hmga9cclxuICAgICAgY29uc3QgY29uZmlnT3V0cHV0ID0gYXdhaXQgdGhpcy5ydW5TaWdyb2tDb21tYW5kKFtcclxuICAgICAgICAnLS1kcml2ZXInLCB0aGlzLl9kZXZpY2VEcml2ZXIsXHJcbiAgICAgICAgJy0tY29ubicsIHRoaXMuX2RldmljZUlkLFxyXG4gICAgICAgICctLXNob3cnXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgdGhpcy5wYXJzZURldmljZUNvbmZpZyhjb25maWdPdXRwdXQpO1xyXG5cclxuICAgICAgLy8g6K6+572u6K6+5aSH54mI5pys5L+h5oGvXHJcbiAgICAgIGNvbnN0IGRyaXZlckluZm8gPSBTaWdyb2tBZGFwdGVyLlNJR1JPS19EUklWRVJTLmdldCh0aGlzLl9kZXZpY2VEcml2ZXIpO1xyXG4gICAgICBpZiAoZHJpdmVySW5mbykge1xyXG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSBkcml2ZXJJbmZvLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fY2hhbm5lbENvdW50ID0gZHJpdmVySW5mby5jaGFubmVscztcclxuICAgICAgICB0aGlzLl9tYXhGcmVxdWVuY3kgPSBkcml2ZXJJbmZvLm1heFJhdGU7XHJcbiAgICAgICAgdGhpcy5fYmxhc3RGcmVxdWVuY3kgPSBkcml2ZXJJbmZvLm1heFJhdGUgKiAyO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ+afpeivouiuvuWkh+S/oeaBr+Wksei0pTonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDorr7lpIfphY3nva5cclxuICAgKi9cclxuICBwcml2YXRlIHBhcnNlRGV2aWNlQ29uZmlnKG91dHB1dDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBsaW5lcyA9IG91dHB1dC5zcGxpdCgnXFxcXG4nKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgICAgY29uc3QgdHJpbW1lZCA9IGxpbmUudHJpbSgpO1xyXG5cclxuICAgICAgLy8g6Kej5p6Q6YCa6YGT5pWwXHJcbiAgICAgIGlmICh0cmltbWVkLmluY2x1ZGVzKCdjaGFubmVsczonKSkge1xyXG4gICAgICAgIGNvbnN0IGNoYW5uZWxNYXRjaCA9IHRyaW1tZWQubWF0Y2goL2NoYW5uZWxzOlxcXFxzKihcXFxcZCspLyk7XHJcbiAgICAgICAgaWYgKGNoYW5uZWxNYXRjaCkge1xyXG4gICAgICAgICAgdGhpcy5fY2hhbm5lbENvdW50ID0gcGFyc2VJbnQoY2hhbm5lbE1hdGNoWzFdLCAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDop6PmnpDph4fmoLfnjodcclxuICAgICAgaWYgKHRyaW1tZWQuaW5jbHVkZXMoJ3NhbXBsZXJhdGU6JykpIHtcclxuICAgICAgICBjb25zdCByYXRlTWF0Y2ggPSB0cmltbWVkLm1hdGNoKC9zYW1wbGVyYXRlOlxcXFxzKihbMC05Ll0rKVxcXFxzKihba01HXT9IeikvKTtcclxuICAgICAgICBpZiAocmF0ZU1hdGNoKSB7XHJcbiAgICAgICAgICBsZXQgcmF0ZSA9IHBhcnNlRmxvYXQocmF0ZU1hdGNoWzFdKTtcclxuICAgICAgICAgIGNvbnN0IHVuaXQgPSByYXRlTWF0Y2hbMl07XHJcblxyXG4gICAgICAgICAgc3dpdGNoICh1bml0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2tIeic6XHJcbiAgICAgICAgICAgICAgcmF0ZSAqPSAxMDAwO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdNSHonOlxyXG4gICAgICAgICAgICAgIHJhdGUgKj0gMTAwMDAwMDtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnR0h6JzpcclxuICAgICAgICAgICAgICByYXRlICo9IDEwMDAwMDAwMDA7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5fbWF4RnJlcXVlbmN5ID0gcmF0ZTtcclxuICAgICAgICAgIHRoaXMuX2JsYXN0RnJlcXVlbmN5ID0gcmF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOino+aekOe8k+WGsuWMuuWkp+Wwj1xyXG4gICAgICBpZiAodHJpbW1lZC5pbmNsdWRlcygnbGltaXRfc2FtcGxlczonKSkge1xyXG4gICAgICAgIGNvbnN0IHNhbXBsZU1hdGNoID0gdHJpbW1lZC5tYXRjaCgvbGltaXRfc2FtcGxlczpcXFxccyooXFxcXGQrKS8pO1xyXG4gICAgICAgIGlmIChzYW1wbGVNYXRjaCkge1xyXG4gICAgICAgICAgdGhpcy5fYnVmZmVyU2l6ZSA9IHBhcnNlSW50KHNhbXBsZU1hdGNoWzFdLCAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlkK/liqhzaWdyb2vph4fpm4ZcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIHN0YXJ0U2lncm9rQ2FwdHVyZShzZXNzaW9uOiBDYXB0dXJlU2Vzc2lvbik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3Qgb3V0cHV0RmlsZSA9IGpvaW4odGhpcy5fdGVtcERpciwgJ2NhcHR1cmUuc3InKTtcclxuICAgIGNvbnN0IHRvdGFsU2FtcGxlcyA9IHNlc3Npb24ucHJlVHJpZ2dlclNhbXBsZXMgKyBzZXNzaW9uLnBvc3RUcmlnZ2VyU2FtcGxlcztcclxuXHJcbiAgICAvLyDmnoTlu7pzaWdyb2stY2xp5ZG95Luk5Y+C5pWwXHJcbiAgICBjb25zdCBhcmdzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgJy0tZHJpdmVyJywgdGhpcy5fZGV2aWNlRHJpdmVyLFxyXG4gICAgICAnLS1jb25uJywgdGhpcy5fZGV2aWNlSWQsXHJcbiAgICAgICctLWNvbmZpZycsIGBzYW1wbGVyYXRlPSR7c2Vzc2lvbi5mcmVxdWVuY3l9YCxcclxuICAgICAgJy0tc2FtcGxlcycsIHRvdGFsU2FtcGxlcy50b1N0cmluZygpLFxyXG4gICAgICAnLS1vdXRwdXQtZmlsZScsIG91dHB1dEZpbGUsXHJcbiAgICAgICctLW91dHB1dC1mb3JtYXQnLCAnc3J6aXAnXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIOmFjee9rumAmumBk1xyXG4gICAgY29uc3QgY2hhbm5lbHMgPSBzZXNzaW9uLmNhcHR1cmVDaGFubmVscy5tYXAoY2ggPT4gY2guY2hhbm5lbE51bWJlcikuam9pbignLCcpO1xyXG4gICAgaWYgKGNoYW5uZWxzKSB7XHJcbiAgICAgIGFyZ3MucHVzaCgnLS1jaGFubmVscycsIGNoYW5uZWxzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDphY3nva7op6blj5FcclxuICAgIGlmIChzZXNzaW9uLnRyaWdnZXJUeXBlICE9PSB1bmRlZmluZWQgJiYgc2Vzc2lvbi50cmlnZ2VyQ2hhbm5lbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnN0IHRyaWdnZXJDb25maWcgPSB0aGlzLmJ1aWxkVHJpZ2dlckNvbmZpZyhzZXNzaW9uKTtcclxuICAgICAgaWYgKHRyaWdnZXJDb25maWcpIHtcclxuICAgICAgICBhcmdzLnB1c2goJy0tdHJpZ2dlcnMnLCB0cmlnZ2VyQ29uZmlnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCflkK/liqhzaWdyb2vph4fpm4Y6JywgdGhpcy5fc2lncm9rQ2xpUGF0aCwgYXJncy5qb2luKCcgJykpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2N1cnJlbnRQcm9jZXNzID0gc3Bhd24odGhpcy5fc2lncm9rQ2xpUGF0aCwgYXJncyk7XHJcblxyXG4gICAgICBsZXQgZXJyb3JPdXRwdXQgPSAnJztcclxuXHJcbiAgICAgIHRoaXMuX2N1cnJlbnRQcm9jZXNzLnN0ZG91dD8ub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzaWdyb2vovpPlh7o6JywgZGF0YS50b1N0cmluZygpKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLl9jdXJyZW50UHJvY2Vzcy5zdGRlcnI/Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcclxuICAgICAgICBlcnJvck91dHB1dCArPSBkYXRhLnRvU3RyaW5nKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5fY3VycmVudFByb2Nlc3Mub24oJ2Nsb3NlJywgYXN5bmMgKGNvZGUpID0+IHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50UHJvY2VzcyA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChjb2RlID09PSAwKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyDor7vlj5bph4fpm4bnu5PmnpxcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzU2lncm9rUmVzdWx0cyhzZXNzaW9uLCBvdXRwdXRGaWxlKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgc2lncm9r6YeH6ZuG5aSx6LSlICjku6PnoIEgJHtjb2RlfSk6ICR7ZXJyb3JPdXRwdXR9YCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLl9jdXJyZW50UHJvY2Vzcy5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50UHJvY2VzcyA9IG51bGw7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgc2lncm9r6YeH6ZuG6L+b56iL6ZSZ6K+vOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E5bu66Kem5Y+R6YWN572uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZFRyaWdnZXJDb25maWcoc2Vzc2lvbjogQ2FwdHVyZVNlc3Npb24pOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIGlmIChzZXNzaW9uLnRyaWdnZXJDaGFubmVsID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG5cclxuICAgIGNvbnN0IGNoYW5uZWwgPSBzZXNzaW9uLnRyaWdnZXJDaGFubmVsO1xyXG4gICAgbGV0IHRyaWdnZXIgPSAnJztcclxuXHJcbiAgICBzd2l0Y2ggKHNlc3Npb24udHJpZ2dlclR5cGUpIHtcclxuICAgICAgY2FzZSAwOiAvLyBFZGdlXHJcbiAgICAgICAgdHJpZ2dlciA9IHNlc3Npb24udHJpZ2dlckludmVydGVkID8gYCR7Y2hhbm5lbH09ZmAgOiBgJHtjaGFubmVsfT1yYDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAxOiAvLyBDb21wbGV4L1BhdHRlcm5cclxuICAgICAgICBpZiAoc2Vzc2lvbi50cmlnZ2VyUGF0dGVybiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAvLyDlsIbmqKHlvI/ovazmjaLkuLpzaWdyb2vmoLzlvI9cclxuICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSBzZXNzaW9uLnRyaWdnZXJQYXR0ZXJuLnRvU3RyaW5nKDIpLnBhZFN0YXJ0KDE2LCAnMCcpO1xyXG4gICAgICAgICAgdHJpZ2dlciA9IHBhdHRlcm4uc3BsaXQoJycpLm1hcCgoYml0LCBpbmRleCkgPT4gXHJcbiAgICAgICAgICAgIGJpdCA9PT0gJzEnID8gYCR7aW5kZXh9PTFgIDogYml0ID09PSAnMCcgPyBgJHtpbmRleH09MGAgOiAnJ1xyXG4gICAgICAgICAgKS5maWx0ZXIodCA9PiB0KS5qb2luKCcsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRyaWdnZXIgPSBgJHtjaGFubmVsfT1yYDsgLy8g6buY6K6k5LiK5Y2H5rK/XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRyaWdnZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIZzaWdyb2vph4fpm4bnu5PmnpxcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NTaWdyb2tSZXN1bHRzKHNlc3Npb246IENhcHR1cmVTZXNzaW9uLCBvdXRwdXRGaWxlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOWwhi5zcuaWh+S7tui9rOaNouS4ukNTVuagvOW8j+S7peS+v+ino+aekFxyXG4gICAgICBjb25zdCBjc3ZGaWxlID0gam9pbih0aGlzLl90ZW1wRGlyLCAnY2FwdHVyZS5jc3YnKTtcclxuICAgICAgYXdhaXQgdGhpcy5jb252ZXJ0U3JUb0NTVihvdXRwdXRGaWxlLCBjc3ZGaWxlKTtcclxuXHJcbiAgICAgIC8vIOivu+WPlkNTVuaVsOaNrlxyXG4gICAgICBjb25zdCBjc3ZEYXRhID0gYXdhaXQgZnMucmVhZEZpbGUoY3N2RmlsZSwgJ3V0Zi04Jyk7XHJcbiAgICAgIGNvbnN0IGxpbmVzID0gY3N2RGF0YS5zcGxpdCgnXFxcXG4nKTtcclxuXHJcbiAgICAgIGlmIChsaW5lcy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfph4fpm4bmlbDmja7kuLrnqbonKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6Kej5p6QQ1NW5aS06YOo77yI6YCa6YGT5ZCN56ew77yJXHJcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBsaW5lc1swXS5zcGxpdCgnLCcpLm1hcChoID0+IGgudHJpbSgpKTtcclxuICAgICAgY29uc3QgZGF0YUxpbmVzID0gbGluZXMuc2xpY2UoMSkuZmlsdGVyKGxpbmUgPT4gbGluZS50cmltKCkpO1xyXG5cclxuICAgICAgLy8g5Yid5aeL5YyW6YCa6YGT5pWw5o2uXHJcbiAgICAgIGZvciAoY29uc3QgY2hhbm5lbCBvZiBzZXNzaW9uLmNhcHR1cmVDaGFubmVscykge1xyXG4gICAgICAgIGNoYW5uZWwuc2FtcGxlcyA9IG5ldyBVaW50OEFycmF5KGRhdGFMaW5lcy5sZW5ndGgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDop6PmnpDmlbDmja7ooYxcclxuICAgICAgZm9yIChsZXQgcm93SW5kZXggPSAwOyByb3dJbmRleCA8IGRhdGFMaW5lcy5sZW5ndGg7IHJvd0luZGV4KyspIHtcclxuICAgICAgICBjb25zdCB2YWx1ZXMgPSBkYXRhTGluZXNbcm93SW5kZXhdLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2hhbm5lbCBvZiBzZXNzaW9uLmNhcHR1cmVDaGFubmVscykge1xyXG4gICAgICAgICAgY29uc3QgY2hhbm5lbE5hbWUgPSBgRCR7Y2hhbm5lbC5jaGFubmVsTnVtYmVyfWA7XHJcbiAgICAgICAgICBjb25zdCBjb2x1bW5JbmRleCA9IGhlYWRlcnMuaW5kZXhPZihjaGFubmVsTmFtZSk7XHJcblxyXG4gICAgICAgICAgaWYgKGNvbHVtbkluZGV4ID49IDAgJiYgY29sdW1uSW5kZXggPCB2YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2NvbHVtbkluZGV4XS50cmltKCk7XHJcbiAgICAgICAgICAgIGNoYW5uZWwuc2FtcGxlcyFbcm93SW5kZXhdID0gdmFsdWUgPT09ICcxJyA/IDEgOiAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fY2FwdHVyaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICBjb25zdCBldmVudEFyZ3M6IENhcHR1cmVFdmVudEFyZ3MgPSB7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBzZXNzaW9uXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLmVtaXRDYXB0dXJlQ29tcGxldGVkKGV2ZW50QXJncyk7XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5oYW5kbGVDYXB0dXJlRXJyb3Ioc2Vzc2lvbiwgYOWkhOeQhnNpZ3Jva+e7k+aenOWksei0pTogJHtlcnJvcn1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwhi5zcuaWh+S7tui9rOaNouS4ukNTVuagvOW8j1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgY29udmVydFNyVG9DU1Yoc3JGaWxlOiBzdHJpbmcsIGNzdkZpbGU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcHJvY2VzcyA9IHNwYXduKHRoaXMuX3NpZ3Jva0NsaVBhdGgsIFtcclxuICAgICAgICAnLS1pbnB1dC1maWxlJywgc3JGaWxlLFxyXG4gICAgICAgICctLW91dHB1dC1maWxlJywgY3N2RmlsZSxcclxuICAgICAgICAnLS1vdXRwdXQtZm9ybWF0JywgJ2NzdidcclxuICAgICAgXSk7XHJcblxyXG4gICAgICBwcm9jZXNzLm9uKCdjbG9zZScsIChjb2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihg6L2s5o2i5Li6Q1NW5aSx6LSlICjku6PnoIEgJHtjb2RlfSlgKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHByb2Nlc3Mub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgQ1NW6L2s5o2i6L+b56iL6ZSZ6K+vOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5aSE55CG6YeH6ZuG6ZSZ6K+vXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoYW5kbGVDYXB0dXJlRXJyb3Ioc2Vzc2lvbjogQ2FwdHVyZVNlc3Npb24sIGVycm9yTWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jYXB0dXJpbmcgPSBmYWxzZTtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ3NpZ3Jva+mHh+mbhumUmeivrzonLCBlcnJvck1lc3NhZ2UpO1xyXG5cclxuICAgIGNvbnN0IGV2ZW50QXJnczogQ2FwdHVyZUV2ZW50QXJncyA9IHtcclxuICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgIHNlc3Npb25cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5lbWl0Q2FwdHVyZUNvbXBsZXRlZChldmVudEFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L+Q6KGMc2lncm9r5ZG95LukXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBydW5TaWdyb2tDb21tYW5kKGFyZ3M6IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHByb2Nlc3MgPSBzcGF3bih0aGlzLl9zaWdyb2tDbGlQYXRoLCBhcmdzKTtcclxuXHJcbiAgICAgIGxldCBvdXRwdXQgPSAnJztcclxuICAgICAgbGV0IGVycm9yT3V0cHV0ID0gJyc7XHJcblxyXG4gICAgICBwcm9jZXNzLnN0ZG91dC5vbignZGF0YScsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgb3V0cHV0ICs9IGRhdGEudG9TdHJpbmcoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBwcm9jZXNzLnN0ZGVyci5vbignZGF0YScsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgZXJyb3JPdXRwdXQgKz0gZGF0YS50b1N0cmluZygpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHByb2Nlc3Mub24oJ2Nsb3NlJywgKGNvZGUpID0+IHtcclxuICAgICAgICBpZiAoY29kZSA9PT0gMCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShvdXRwdXQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBzaWdyb2vlkb3ku6TlpLHotKUgKOS7o+eggSAke2NvZGV9KTogJHtlcnJvck91dHB1dH1gKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHByb2Nlc3Mub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgc2lncm9r5ZG95Luk5omn6KGM6ZSZ6K+vOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E5bu656Gs5Lu26IO95Yqb5o+P6L+wXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZENhcGFiaWxpdGllcygpOiBhbnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2hhbm5lbHM6IHtcclxuICAgICAgICBkaWdpdGFsOiB0aGlzLl9jaGFubmVsQ291bnQsXHJcbiAgICAgICAgbWF4Vm9sdGFnZTogNS4wLFxyXG4gICAgICAgIGlucHV0SW1wZWRhbmNlOiAxMDAwMDAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHNhbXBsaW5nOiB7XHJcbiAgICAgICAgbWF4UmF0ZTogdGhpcy5fbWF4RnJlcXVlbmN5LFxyXG4gICAgICAgIG1pblJhdGU6IHRoaXMubWluRnJlcXVlbmN5LFxyXG4gICAgICAgIHN1cHBvcnRlZFJhdGVzOiBbdGhpcy5fbWF4RnJlcXVlbmN5LCB0aGlzLl9ibGFzdEZyZXF1ZW5jeV0sXHJcbiAgICAgICAgYnVmZmVyU2l6ZTogdGhpcy5fYnVmZmVyU2l6ZSxcclxuICAgICAgICBzdHJlYW1pbmdTdXBwb3J0OiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICB0cmlnZ2Vyczoge1xyXG4gICAgICAgIHR5cGVzOiBbMCwgMV0sIC8vIEVkZ2UsIFBhdHRlcm5cclxuICAgICAgICBtYXhDaGFubmVsczogdGhpcy5fY2hhbm5lbENvdW50LFxyXG4gICAgICAgIHBhdHRlcm5XaWR0aDogdGhpcy5fY2hhbm5lbENvdW50LFxyXG4gICAgICAgIHNlcXVlbnRpYWxTdXBwb3J0OiBmYWxzZSxcclxuICAgICAgICBjb25kaXRpb25zOiBbJ3Jpc2luZycsICdmYWxsaW5nJywgJ2hpZ2gnLCAnbG93JywgJ2NoYW5nZSddXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbm5lY3Rpdml0eToge1xyXG4gICAgICAgIGludGVyZmFjZXM6IFsndXNiJywgJ3NlcmlhbCddLFxyXG4gICAgICAgIHByb3RvY29sczogWydzaWdyb2snXVxyXG4gICAgICB9LFxyXG4gICAgICBmZWF0dXJlczoge1xyXG4gICAgICAgIHNpZ25hbEdlbmVyYXRpb246IGZhbHNlLFxyXG4gICAgICAgIHBvd2VyU3VwcGx5OiBmYWxzZSxcclxuICAgICAgICB2b2x0YWdlTW9uaXRvcmluZzogZmFsc2UsXHJcbiAgICAgICAgcHJvdG9jb2xEZWNvZGluZzogdHJ1ZSAvLyBzaWdyb2vmnInlvLrlpKfnmoTljY/orq7op6PnoIHlip/og71cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaUr+aMgeeahOiuvuWkh+WIl+ihqFxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRTdXBwb3J0ZWREZXZpY2VzKCk6IEFycmF5PHsgZHJpdmVyOiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgY2hhbm5lbHM6IG51bWJlcjsgbWF4UmF0ZTogbnVtYmVyIH0+IHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKFNpZ3Jva0FkYXB0ZXIuU0lHUk9LX0RSSVZFUlMuZW50cmllcygpKS5tYXAoKFtkcml2ZXIsIGluZm9dKSA9PiAoe1xyXG4gICAgICBkcml2ZXIsXHJcbiAgICAgIG5hbWU6IGluZm8ubmFtZSxcclxuICAgICAgY2hhbm5lbHM6IGluZm8uY2hhbm5lbHMsXHJcbiAgICAgIG1heFJhdGU6IGluZm8ubWF4UmF0ZVxyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6LWE5rqQ5riF55CGXHJcbiAgICovXHJcbiAgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/drivers/SigrokAdapter.ts\n\n}");

/***/ }),

/***/ "./src/extension.ts":
/*!**************************!*\
  !*** ./src/extension.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deactivate = exports.activate = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nconst vscode = tslib_1.__importStar(__webpack_require__(/*! vscode */ \"vscode\"));\nconst LACEditorProvider_1 = __webpack_require__(/*! ./providers/LACEditorProvider */ \"./src/providers/LACEditorProvider.ts\");\nconst HardwareDriverManager_1 = __webpack_require__(/*! ./drivers/HardwareDriverManager */ \"./src/drivers/HardwareDriverManager.ts\");\nfunction activate(context) {\n    console.log('VSCode Logic Analyzer插件正在激活...');\n    // 注册.lac文件的自定义编辑器\n    context.subscriptions.push(LACEditorProvider_1.LACEditorProvider.register(context));\n    // 注册命令\n    const openAnalyzerCommand = vscode.commands.registerCommand('logicAnalyzer.openAnalyzer', () => {\n        vscode.window.showInformationMessage('打开逻辑分析器界面!');\n        // TODO: 实现主界面打开逻辑\n    });\n    const connectDeviceCommand = vscode.commands.registerCommand('logicAnalyzer.connectDevice', async () => {\n        try {\n            // 检测可用设备\n            vscode.window.showInformationMessage('正在检测逻辑分析器设备...');\n            const devices = await HardwareDriverManager_1.hardwareDriverManager.detectHardware();\n            if (devices.length === 0) {\n                const action = await vscode.window.showWarningMessage('未检测到逻辑分析器设备', '手动指定', '网络连接', '取消');\n                if (action === '手动指定') {\n                    const devicePath = await vscode.window.showInputBox({\n                        prompt: '请输入设备路径 (如: /dev/ttyUSB0 或 COM3)',\n                        placeHolder: '/dev/ttyUSB0'\n                    });\n                    if (devicePath) {\n                        await connectToDevice(devicePath);\n                    }\n                }\n                else if (action === '网络连接') {\n                    const networkAddress = await vscode.window.showInputBox({\n                        prompt: '请输入网络地址 (如: 192.168.1.100:3030)',\n                        placeHolder: '192.168.1.100:3030'\n                    });\n                    if (networkAddress) {\n                        await connectToDevice('network', {\n                            networkConfig: parseNetworkAddress(networkAddress)\n                        });\n                    }\n                }\n                return;\n            }\n            // 显示设备选择列表\n            const deviceItems = devices.map(device => ({\n                label: device.name,\n                description: `${device.type} - ${device.connectionPath}`,\n                detail: `置信度: ${Math.round(device.confidence * 100)}%`,\n                device\n            }));\n            // 添加特殊选项\n            deviceItems.push({\n                label: '$(broadcast) 自动检测',\n                description: '自动选择最佳匹配设备',\n                detail: '让系统自动选择置信度最高的设备',\n                device: {\n                    id: 'autodetect',\n                    name: '自动检测',\n                    type: 'Auto',\n                    connectionPath: '',\n                    confidence: 1\n                }\n            }, {\n                label: '$(globe) 网络连接',\n                description: '连接网络逻辑分析器',\n                detail: '通过TCP/IP连接网络设备',\n                device: {\n                    id: 'network',\n                    name: '网络设备',\n                    type: 'Network',\n                    connectionPath: '',\n                    confidence: 0.5\n                }\n            });\n            const selectedItem = await vscode.window.showQuickPick(deviceItems, {\n                placeHolder: '选择要连接的逻辑分析器设备',\n                matchOnDescription: true,\n                matchOnDetail: true\n            });\n            if (selectedItem) {\n                await connectToDevice(selectedItem.device.id);\n            }\n        }\n        catch (error) {\n            vscode.window.showErrorMessage(`设备检测失败: ${error}`);\n        }\n    });\n    const startCaptureCommand = vscode.commands.registerCommand('logicAnalyzer.startCapture', () => {\n        vscode.window.showInformationMessage('开始数据采集!');\n        // TODO: 实现数据采集逻辑\n    });\n    context.subscriptions.push(openAnalyzerCommand, connectDeviceCommand, startCaptureCommand);\n    console.log('VSCode Logic Analyzer插件激活完成');\n}\nexports.activate = activate;\nfunction deactivate() {\n    console.log('VSCode Logic Analyzer插件正在停用...');\n    // 清理硬件驱动管理器\n    HardwareDriverManager_1.hardwareDriverManager.dispose().catch(error => {\n        console.error('清理硬件驱动管理器失败:', error);\n    });\n}\nexports.deactivate = deactivate;\n// 连接到指定设备的辅助函数\nasync function connectToDevice(deviceId, params) {\n    try {\n        vscode.window.showInformationMessage(`正在连接设备: ${deviceId}`);\n        const result = await HardwareDriverManager_1.hardwareDriverManager.connectToDevice(deviceId, params);\n        if (result.success) {\n            vscode.window.showInformationMessage(`设备连接成功: ${result.deviceInfo?.name || deviceId}`);\n        }\n        else {\n            vscode.window.showErrorMessage(`设备连接失败: ${result.error}`);\n        }\n    }\n    catch (error) {\n        vscode.window.showErrorMessage(`设备连接异常: ${error}`);\n    }\n}\n// 解析网络地址的辅助函数\nfunction parseNetworkAddress(address) {\n    const parts = address.split(':');\n    if (parts.length !== 2) {\n        throw new Error('网络地址格式无效，应为 host:port');\n    }\n    const host = parts[0].trim();\n    const port = parseInt(parts[1].trim(), 10);\n    if (!host || isNaN(port) || port < 1 || port > 65535) {\n        throw new Error('网络地址格式无效');\n    }\n    return { host, port };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/extension.ts\n\n}");

/***/ }),

/***/ "./src/models/AnalyzerTypes.ts":
/*!*************************************!*\
  !*** ./src/models/AnalyzerTypes.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\n/**\n * 逻辑分析器类型定义\n * 基于C# SharedDriver模块的TypeScript移植\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TriggerDelays = exports.TriggerType = exports.CaptureError = exports.CaptureMode = exports.AnalyzerDriverType = void 0;\n// 枚举类型定义\nvar AnalyzerDriverType;\n(function (AnalyzerDriverType) {\n    AnalyzerDriverType[\"Serial\"] = \"Serial\";\n    AnalyzerDriverType[\"Network\"] = \"Network\";\n    AnalyzerDriverType[\"Multi\"] = \"Multi\";\n    AnalyzerDriverType[\"Emulated\"] = \"Emulated\";\n})(AnalyzerDriverType = exports.AnalyzerDriverType || (exports.AnalyzerDriverType = {}));\nvar CaptureMode;\n(function (CaptureMode) {\n    CaptureMode[CaptureMode[\"Channels_8\"] = 0] = \"Channels_8\";\n    CaptureMode[CaptureMode[\"Channels_16\"] = 1] = \"Channels_16\";\n    CaptureMode[CaptureMode[\"Channels_24\"] = 2] = \"Channels_24\";\n})(CaptureMode = exports.CaptureMode || (exports.CaptureMode = {}));\nvar CaptureError;\n(function (CaptureError) {\n    CaptureError[\"None\"] = \"None\";\n    CaptureError[\"Busy\"] = \"Busy\";\n    CaptureError[\"BadParams\"] = \"BadParams\";\n    CaptureError[\"HardwareError\"] = \"HardwareError\";\n    CaptureError[\"UnexpectedError\"] = \"UnexpectedError\";\n})(CaptureError = exports.CaptureError || (exports.CaptureError = {}));\nvar TriggerType;\n(function (TriggerType) {\n    TriggerType[TriggerType[\"Edge\"] = 0] = \"Edge\";\n    TriggerType[TriggerType[\"Complex\"] = 1] = \"Complex\";\n    TriggerType[TriggerType[\"Fast\"] = 2] = \"Fast\";\n    TriggerType[TriggerType[\"Blast\"] = 3] = \"Blast\";\n})(TriggerType = exports.TriggerType || (exports.TriggerType = {}));\n// 常量定义\nexports.TriggerDelays = {\n    ComplexTriggerDelay: 5,\n    FastTriggerDelay: 3 // 快速触发延迟 (纳秒)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWxzL0FuYWx5emVyVHlwZXMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsU0FBUztBQUNULElBQVksa0JBS1g7QUFMRCxXQUFZLGtCQUFrQjtJQUM1Qix1Q0FBaUI7SUFDakIseUNBQW1CO0lBQ25CLHFDQUFlO0lBQ2YsMkNBQXFCO0FBQ3ZCLENBQUMsRUFMVyxrQkFBa0IsR0FBbEIsMEJBQWtCLEtBQWxCLDBCQUFrQixRQUs3QjtBQUVELElBQVksV0FJWDtBQUpELFdBQVksV0FBVztJQUNyQix5REFBYztJQUNkLDJEQUFlO0lBQ2YsMkRBQWU7QUFDakIsQ0FBQyxFQUpXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBSXRCO0FBRUQsSUFBWSxZQU1YO0FBTkQsV0FBWSxZQUFZO0lBQ3RCLDZCQUFhO0lBQ2IsNkJBQWE7SUFDYix1Q0FBdUI7SUFDdkIsK0NBQStCO0lBQy9CLG1EQUFtQztBQUNyQyxDQUFDLEVBTlcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFNdkI7QUFFRCxJQUFZLFdBS1g7QUFMRCxXQUFZLFdBQVc7SUFDckIsNkNBQVE7SUFDUixtREFBVztJQUNYLDZDQUFRO0lBQ1IsK0NBQVM7QUFDWCxDQUFDLEVBTFcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFLdEI7QUF5TUQsT0FBTztBQUNNLHFCQUFhLEdBQUc7SUFDM0IsbUJBQW1CLEVBQUUsQ0FBQztJQUN0QixnQkFBZ0IsRUFBRSxDQUFDLENBQUMsY0FBYztDQUMxQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnNjb2RlLWxvZ2ljLWFuYWx5emVyLy4vc3JjL21vZGVscy9BbmFseXplclR5cGVzLnRzPzA3OWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDpgLvovpHliIbmnpDlmajnsbvlnovlrprkuYlcbiAqIOWfuuS6jkMjIFNoYXJlZERyaXZlcuaooeWdl+eahFR5cGVTY3JpcHTnp7vmpI1cbiAqL1xuXG4vLyDmnprkuL7nsbvlnovlrprkuYlcbmV4cG9ydCBlbnVtIEFuYWx5emVyRHJpdmVyVHlwZSB7XG4gIFNlcmlhbCA9ICdTZXJpYWwnLFxuICBOZXR3b3JrID0gJ05ldHdvcmsnLFxuICBNdWx0aSA9ICdNdWx0aScsXG4gIEVtdWxhdGVkID0gJ0VtdWxhdGVkJ1xufVxuXG5leHBvcnQgZW51bSBDYXB0dXJlTW9kZSB7XG4gIENoYW5uZWxzXzggPSAwLFxuICBDaGFubmVsc18xNiA9IDEsXG4gIENoYW5uZWxzXzI0ID0gMlxufVxuXG5leHBvcnQgZW51bSBDYXB0dXJlRXJyb3Ige1xuICBOb25lID0gJ05vbmUnLFxuICBCdXN5ID0gJ0J1c3knLFxuICBCYWRQYXJhbXMgPSAnQmFkUGFyYW1zJyxcbiAgSGFyZHdhcmVFcnJvciA9ICdIYXJkd2FyZUVycm9yJyxcbiAgVW5leHBlY3RlZEVycm9yID0gJ1VuZXhwZWN0ZWRFcnJvcidcbn1cblxuZXhwb3J0IGVudW0gVHJpZ2dlclR5cGUge1xuICBFZGdlID0gMCxcbiAgQ29tcGxleCA9IDEsXG4gIEZhc3QgPSAyLFxuICBCbGFzdCA9IDNcbn1cblxuLy8g5pWw5o2u57uT5p6E5a6a5LmJXG5leHBvcnQgaW50ZXJmYWNlIENhcHR1cmVMaW1pdHMge1xuICBtaW5QcmVTYW1wbGVzOiBudW1iZXI7XG4gIG1heFByZVNhbXBsZXM6IG51bWJlcjtcbiAgbWluUG9zdFNhbXBsZXM6IG51bWJlcjtcbiAgbWF4UG9zdFNhbXBsZXM6IG51bWJlcjtcblxuICAvLyDorqHnrpflsZ7mgKdcbiAgcmVhZG9ubHkgbWF4VG90YWxTYW1wbGVzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5hbHl6ZXJEZXZpY2VJbmZvIHtcbiAgbmFtZTogc3RyaW5nO1xuICBtYXhGcmVxdWVuY3k6IG51bWJlcjtcbiAgYmxhc3RGcmVxdWVuY3k6IG51bWJlcjtcbiAgY2hhbm5lbHM6IG51bWJlcjtcbiAgYnVmZmVyU2l6ZTogbnVtYmVyO1xuICBtb2RlTGltaXRzOiBDYXB0dXJlTGltaXRzW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlSW5mbyB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmVyc2lvbj86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgdHlwZTogQW5hbHl6ZXJEcml2ZXJUeXBlO1xuICBjb25uZWN0aW9uUGF0aD86IHN0cmluZztcbiAgaXNOZXR3b3JrOiBib29sZWFuO1xuICBjYXBhYmlsaXRpZXM6IEhhcmR3YXJlQ2FwYWJpbGl0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhhcmR3YXJlQ2FwYWJpbGl0aWVzIHtcbiAgLy8g6YCa6YGT6KeE5qC8XG4gIGNoYW5uZWxzOiB7XG4gICAgZGlnaXRhbDogbnVtYmVyO1xuICAgIGFuYWxvZz86IG51bWJlcjtcbiAgICBtaXhlZD86IGJvb2xlYW47XG4gICAgbWF4Vm9sdGFnZTogbnVtYmVyO1xuICAgIGlucHV0SW1wZWRhbmNlOiBudW1iZXI7XG4gIH07XG5cbiAgLy8g6YeH5qC36IO95YqbXG4gIHNhbXBsaW5nOiB7XG4gICAgbWF4UmF0ZTogbnVtYmVyO1xuICAgIG1pblJhdGU6IG51bWJlcjtcbiAgICBzdXBwb3J0ZWRSYXRlczogbnVtYmVyW107XG4gICAgYnVmZmVyU2l6ZTogbnVtYmVyO1xuICAgIHN0cmVhbWluZ1N1cHBvcnQ6IGJvb2xlYW47XG4gIH07XG5cbiAgLy8g6Kem5Y+R6IO95YqbXG4gIHRyaWdnZXJzOiB7XG4gICAgdHlwZXM6IFRyaWdnZXJUeXBlW107XG4gICAgbWF4Q2hhbm5lbHM6IG51bWJlcjtcbiAgICBwYXR0ZXJuV2lkdGg6IG51bWJlcjtcbiAgICBzZXF1ZW50aWFsU3VwcG9ydDogYm9vbGVhbjtcbiAgICBjb25kaXRpb25zOiBUcmlnZ2VyQ29uZGl0aW9uW107XG4gIH07XG5cbiAgLy8g6L+e5o6l5pa55byPXG4gIGNvbm5lY3Rpdml0eToge1xuICAgIGludGVyZmFjZXM6ICgndXNiJyB8ICdldGhlcm5ldCcgfCAnc2VyaWFsJyB8ICdibHVldG9vdGgnKVtdO1xuICAgIHByb3RvY29sczogKCdjdXN0b20nIHwgJ3NjcGknIHwgJ3NpZ3JvaycgfCAnc2FsZWFlJylbXTtcbiAgICBuZXR3b3JrQ29uZmlnPzogTmV0d29ya0NhcGFiaWxpdHk7XG4gIH07XG5cbiAgLy8g54m55q6K5Yqf6IO9XG4gIGZlYXR1cmVzOiB7XG4gICAgc2lnbmFsR2VuZXJhdGlvbj86IGJvb2xlYW47XG4gICAgcG93ZXJTdXBwbHk/OiBib29sZWFuO1xuICAgIGkyY1NuaWZmZXI/OiBib29sZWFuO1xuICAgIGNhblN1cHBvcnQ/OiBib29sZWFuO1xuICAgIGN1c3RvbURlY29kZXJzPzogYm9vbGVhbjtcbiAgICB2b2x0YWdlTW9uaXRvcmluZz86IGJvb2xlYW47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmV0d29ya0NhcGFiaWxpdHkge1xuICBzdXBwb3J0c1dpRmk6IGJvb2xlYW47XG4gIHN1cHBvcnRzRXRoZXJuZXQ6IGJvb2xlYW47XG4gIG1heENvbm5lY3Rpb25zOiBudW1iZXI7XG4gIGRlZmF1bHRQb3J0OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIFRyaWdnZXJDb25kaXRpb24gPSAncmlzaW5nJyB8ICdmYWxsaW5nJyB8ICdoaWdoJyB8ICdsb3cnIHwgJ2FueScgfCAnbm9uZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdGlvblBhcmFtcyB7XG4gIGRldmljZVBhdGg/OiBzdHJpbmc7XG4gIG5ldHdvcmtDb25maWc/OiB7XG4gICAgaG9zdDogc3RyaW5nO1xuICAgIHBvcnQ6IG51bWJlcjtcbiAgICB0aW1lb3V0PzogbnVtYmVyO1xuICB9O1xuICBzZXJpYWxDb25maWc/OiB7XG4gICAgYmF1ZFJhdGU6IG51bWJlcjtcbiAgICBkYXRhQml0czogbnVtYmVyO1xuICAgIHN0b3BCaXRzOiBudW1iZXI7XG4gICAgcGFyaXR5OiBzdHJpbmc7XG4gIH07XG4gIGF1dG9EZXRlY3Q/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3Rpb25SZXN1bHQge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBlcnJvcj86IHN0cmluZztcbiAgZGV2aWNlSW5mbz86IERldmljZUluZm87XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FwdHVyZUNvbmZpZ3VyYXRpb24ge1xuICBmcmVxdWVuY3k6IG51bWJlcjtcbiAgcHJlVHJpZ2dlclNhbXBsZXM6IG51bWJlcjtcbiAgcG9zdFRyaWdnZXJTYW1wbGVzOiBudW1iZXI7XG4gIHRyaWdnZXJUeXBlOiBUcmlnZ2VyVHlwZTtcbiAgdHJpZ2dlckNoYW5uZWw6IG51bWJlcjtcbiAgdHJpZ2dlckludmVydGVkOiBib29sZWFuO1xuICB0cmlnZ2VyUGF0dGVybj86IG51bWJlcjtcbiAgdHJpZ2dlckJpdENvdW50PzogbnVtYmVyO1xuICBsb29wQ291bnQ6IG51bWJlcjtcbiAgbWVhc3VyZUJ1cnN0czogYm9vbGVhbjtcbiAgY2FwdHVyZUNoYW5uZWxzOiBudW1iZXJbXTtcbiAgY2FwdHVyZU1vZGU/OiBDYXB0dXJlTW9kZSB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYXB0dXJlUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgZXJyb3I/OiBDYXB0dXJlRXJyb3I7XG4gIHNlc3Npb24/OiBDYXB0dXJlU2Vzc2lvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYXB0dXJlU2Vzc2lvbiB7XG4gIC8vIOWfuuehgOmHh+mbhuWPguaVsFxuICBmcmVxdWVuY3k6IG51bWJlcjtcbiAgcHJlVHJpZ2dlclNhbXBsZXM6IG51bWJlcjtcbiAgcG9zdFRyaWdnZXJTYW1wbGVzOiBudW1iZXI7XG5cbiAgLy8g6K6h566X5bGe5oCnXG4gIGdldCB0b3RhbFNhbXBsZXMoKTogbnVtYmVyO1xuXG4gIC8vIOinpuWPkeezu+e7n+mFjee9rlxuICB0cmlnZ2VyVHlwZTogVHJpZ2dlclR5cGU7XG4gIHRyaWdnZXJDaGFubmVsOiBudW1iZXI7XG4gIHRyaWdnZXJJbnZlcnRlZDogYm9vbGVhbjtcbiAgdHJpZ2dlclBhdHRlcm4/OiBudW1iZXI7XG4gIHRyaWdnZXJCaXRDb3VudD86IG51bWJlcjtcblxuICAvLyDnqoHlj5Hph4fpm4bns7vnu59cbiAgbG9vcENvdW50OiBudW1iZXI7XG4gIG1lYXN1cmVCdXJzdHM6IGJvb2xlYW47XG5cbiAgLy8g6YCa6YGT6YWN572uXG4gIGNhcHR1cmVDaGFubmVsczogQW5hbHl6ZXJDaGFubmVsW107XG4gIGNhcHR1cmVNb2RlPzogQ2FwdHVyZU1vZGU7XG5cbiAgLy8g56qB5Y+R5L+h5oGv5pWw57uEXG4gIGJ1cnN0cz86IEJ1cnN0SW5mb1tdO1xuXG4gIC8vIOaWueazleaOpeWPo1xuICBjbG9uZSgpOiBDYXB0dXJlU2Vzc2lvbjtcbiAgY2xvbmVTZXR0aW5ncygpOiBDYXB0dXJlU2Vzc2lvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbmFseXplckNoYW5uZWwge1xuICBjaGFubmVsTnVtYmVyOiBudW1iZXI7XG4gIGNoYW5uZWxOYW1lOiBzdHJpbmc7XG4gIGNoYW5uZWxDb2xvcj86IHN0cmluZztcbiAgaGlkZGVuOiBib29sZWFuO1xuICBzYW1wbGVzPzogVWludDhBcnJheTtcblxuICAvLyDmmL7npLrlsZ7mgKdcbiAgZ2V0IHRleHR1YWxDaGFubmVsTnVtYmVyKCk6IHN0cmluZztcblxuICAvLyDlhYvpmobmlrnms5VcbiAgY2xvbmUoKTogQW5hbHl6ZXJDaGFubmVsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1cnN0SW5mbyB7XG4gIGJ1cnN0U2FtcGxlU3RhcnQ6IG51bWJlcjtcbiAgYnVyc3RTYW1wbGVFbmQ6IG51bWJlcjtcbiAgYnVyc3RTYW1wbGVHYXA6IG51bWJlcjtcbiAgYnVyc3RUaW1lR2FwOiBudW1iZXI7IC8vIOe6s+enklxuXG4gIC8vIOaXtumXtOagvOW8j+WMluaWueazlVxuICBnZXRUaW1lKCk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VTdGF0dXMge1xuICBpc0Nvbm5lY3RlZDogYm9vbGVhbjtcbiAgaXNDYXB0dXJpbmc6IGJvb2xlYW47XG4gIGJhdHRlcnlWb2x0YWdlPzogc3RyaW5nO1xuICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcbiAgZXJyb3JTdGF0dXM/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FwdHVyZUV2ZW50QXJncyB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIHNlc3Npb246IENhcHR1cmVTZXNzaW9uO1xufVxuXG4vLyDkuovku7bnsbvlnovlrprkuYlcbmV4cG9ydCB0eXBlIENhcHR1cmVDb21wbGV0ZWRIYW5kbGVyID0gKGFyZ3M6IENhcHR1cmVFdmVudEFyZ3MpID0+IHZvaWQ7XG5cbi8vIOW4uOmHj+WumuS5iVxuZXhwb3J0IGNvbnN0IFRyaWdnZXJEZWxheXMgPSB7XG4gIENvbXBsZXhUcmlnZ2VyRGVsYXk6IDUsIC8vIOWkjeadguinpuWPkeW7tui/nyAo57qz56eSKVxuICBGYXN0VHJpZ2dlckRlbGF5OiAzIC8vIOW/q+mAn+inpuWPkeW7tui/nyAo57qz56eSKVxufSBhcyBjb25zdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/models/AnalyzerTypes.ts\n\n}");

/***/ }),

/***/ "./src/providers/LACEditorProvider.ts":
/*!********************************************!*\
  !*** ./src/providers/LACEditorProvider.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LACEditorProvider = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nconst vscode = tslib_1.__importStar(__webpack_require__(/*! vscode */ \"vscode\"));\nconst path = tslib_1.__importStar(__webpack_require__(/*! path */ \"path\"));\n/**\n * .lac文件的自定义编辑器提供者\n * 基于VSCode Custom Editor API实现，支持.lac文件的可视化编辑\n */\nclass LACEditorProvider {\n    static register(context) {\n        const provider = new LACEditorProvider(context);\n        const providerRegistration = vscode.window.registerCustomEditorProvider(LACEditorProvider.viewType, provider);\n        return providerRegistration;\n    }\n    constructor(context) {\n        this.context = context;\n    }\n    /**\n     * 解析自定义文本编辑器\n     */\n    async resolveCustomTextEditor(document, webviewPanel, _token) {\n        // 设置webview选项\n        webviewPanel.webview.options = {\n            enableScripts: true,\n            localResourceRoots: [vscode.Uri.joinPath(this.context.extensionUri, 'out', 'webview')]\n        };\n        // 设置webview的HTML内容\n        webviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview, document);\n        // 处理来自webview的消息\n        webviewPanel.webview.onDidReceiveMessage(async (message) => {\n            switch (message.type) {\n                case 'ready':\n                    // webview准备就绪，发送初始数据\n                    await this.sendDocumentToWebview(webviewPanel.webview, document);\n                    break;\n                case 'save':\n                    // 保存.lac文件\n                    await this.saveLACFile(document, message.data);\n                    break;\n                case 'export':\n                    // 导出数据\n                    await this.exportData(message.data);\n                    break;\n                case 'startCapture':\n                    // 开始数据采集\n                    vscode.commands.executeCommand('logicAnalyzer.startCapture');\n                    break;\n                case 'connectDevice':\n                    // 连接设备\n                    vscode.commands.executeCommand('logicAnalyzer.connectDevice');\n                    break;\n                case 'testMessage':\n                    // 测试通信\n                    console.log('收到来自webview的测试消息:', message.data);\n                    vscode.window.showInformationMessage(`通信测试成功！收到消息: ${message.data.message}`);\n                    // 向webview发送回复\n                    webviewPanel.webview.postMessage({\n                        type: 'testResponse',\n                        data: {\n                            timestamp: new Date().toISOString(),\n                            message: '来自VSCode扩展的回复消息',\n                            receivedAt: message.data.timestamp\n                        }\n                    });\n                    break;\n                default:\n                    console.warn('未知的webview消息类型:', message.type);\n            }\n        });\n        // 监听文档变化\n        const changeDocumentSubscription = vscode.workspace.onDidChangeTextDocument(e => {\n            if (e.document.uri.toString() === document.uri.toString()) {\n                this.sendDocumentToWebview(webviewPanel.webview, document);\n            }\n        });\n        webviewPanel.onDidDispose(() => {\n            changeDocumentSubscription.dispose();\n        });\n    }\n    /**\n     * 获取webview的HTML内容\n     */\n    getHtmlForWebview(webview, document) {\n        // 获取webview资源的URI\n        const webviewUri = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'out', 'webview', 'main.js'));\n        const styleUri = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'out', 'webview', 'style.css'));\n        // 生成随机nonce用于CSP\n        const nonce = getNonce();\n        return `<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource} 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n    <title>Logic Analyzer - ${path.basename(document.uri.fsPath)}</title>\n    <link href=\"${styleUri}\" rel=\"stylesheet\">\n</head>\n<body>\n    <div id=\"app\">\n        <!-- Vue应用挂载点 -->\n        <div class=\"loading\">\n            <div class=\"spinner\"></div>\n            <p>正在加载逻辑分析器界面...</p>\n        </div>\n    </div>\n    \n    <script nonce=\"${nonce}\">\n        // 传递VSCode API给Vue应用\n        window.vscode = acquireVsCodeApi();\n        window.documentData = {\n            uri: '${document.uri.toString()}',\n            fileName: '${path.basename(document.uri.fsPath)}',\n            content: ${JSON.stringify(document.getText())}\n        };\n    </script>\n    <script nonce=\"${nonce}\" src=\"${webviewUri}\"></script>\n</body>\n</html>`;\n    }\n    /**\n     * 发送文档内容到webview\n     */\n    async sendDocumentToWebview(webview, document) {\n        try {\n            const lacData = this.parseLACFile(document.getText());\n            webview.postMessage({\n                type: 'documentUpdate',\n                data: lacData\n            });\n        }\n        catch (error) {\n            console.error('解析.lac文件失败:', error);\n            webview.postMessage({\n                type: 'error',\n                message: `解析文件失败: ${error}`\n            });\n        }\n    }\n    /**\n     * 解析.lac文件内容\n     */\n    parseLACFile(content) {\n        try {\n            // .lac文件是JSON格式\n            return JSON.parse(content);\n        }\n        catch (error) {\n            throw new Error('无效的.lac文件格式');\n        }\n    }\n    /**\n     * 保存.lac文件\n     */\n    async saveLACFile(document, data) {\n        try {\n            const edit = new vscode.WorkspaceEdit();\n            const lacContent = JSON.stringify(data, null, 2);\n            edit.replace(document.uri, new vscode.Range(0, 0, document.lineCount, 0), lacContent);\n            await vscode.workspace.applyEdit(edit);\n            vscode.window.showInformationMessage('文件保存成功');\n        }\n        catch (error) {\n            vscode.window.showErrorMessage(`保存文件失败: ${error}`);\n        }\n    }\n    /**\n     * 导出数据\n     */\n    async exportData(_data) {\n        try {\n            const options = {\n                defaultUri: vscode.Uri.file('capture_export.csv'),\n                filters: {\n                    CSV文件: ['csv'],\n                    JSON文件: ['json'],\n                    所有文件: ['*']\n                }\n            };\n            const fileUri = await vscode.window.showSaveDialog(options);\n            if (fileUri) {\n                // TODO: 实现实际的数据导出逻辑\n                vscode.window.showInformationMessage(`数据已导出到: ${fileUri.fsPath}`);\n            }\n        }\n        catch (error) {\n            vscode.window.showErrorMessage(`导出数据失败: ${error}`);\n        }\n    }\n}\nexports.LACEditorProvider = LACEditorProvider;\nLACEditorProvider.viewType = 'logicAnalyzer.lacEditor';\n/**\n * 生成随机nonce用于内容安全策略\n */\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/providers/LACEditorProvider.ts\n\n}");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "dgram":
/*!************************!*\
  !*** external "dgram" ***!
  \************************/
/***/ ((module) => {

module.exports = require("dgram");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "serialport":
/*!*****************************!*\
  !*** external "serialport" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("serialport");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "vscode":
/*!*************************!*\
  !*** external "vscode" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("vscode");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors"], () => (__webpack_require__("./src/extension.ts")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			"extension": 1
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 			__webpack_require__.O();
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			__webpack_require__.e("vendors");
/******/ 			return next();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;